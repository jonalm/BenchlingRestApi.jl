# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntryTemplate
Entry templates are templates that users can base new notebook entries off of. 

    EntryTemplate(;
        apiURL=nothing,
        createdAt=nothing,
        creator=nothing,
        customFields=nothing,
        days=nothing,
        fields=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        schema=nothing,
        templateCollectionId=nothing,
        webURL=nothing,
    )

    - apiURL::String : The canonical url of the Entry Template in the API.
    - createdAt::ZonedDateTime : DateTime the template was created at
    - creator::EntryTemplateCreator
    - customFields::Dict{String, CustomField}
    - days::Vector{EntryTemplateDay} : Array of day objects. Each day object has a day index (integer) and notes field (array of notes, expand further for details on note types). 
    - fields::Dict{String, Field}
    - id::String : ID of the entry template
    - modifiedAt::String : DateTime the template was last modified
    - name::String : Title of the template
    - schema::SchemaProperty4
    - templateCollectionId::String : ID of the collection that contains the template
    - webURL::String : URL of the template
"""
Base.@kwdef mutable struct EntryTemplate <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, EntryTemplateCreator }
    customFields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CustomField} }
    days::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryTemplateDay} }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty4 }
    templateCollectionId::Union{Nothing, String} = nothing
    webURL::Union{Nothing, String} = nothing

    function EntryTemplate(apiURL, createdAt, creator, customFields, days, fields, id, modifiedAt, name, schema, templateCollectionId, webURL, )
        OpenAPI.validate_property(EntryTemplate, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(EntryTemplate, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(EntryTemplate, Symbol("creator"), creator)
        OpenAPI.validate_property(EntryTemplate, Symbol("customFields"), customFields)
        OpenAPI.validate_property(EntryTemplate, Symbol("days"), days)
        OpenAPI.validate_property(EntryTemplate, Symbol("fields"), fields)
        OpenAPI.validate_property(EntryTemplate, Symbol("id"), id)
        OpenAPI.validate_property(EntryTemplate, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(EntryTemplate, Symbol("name"), name)
        OpenAPI.validate_property(EntryTemplate, Symbol("schema"), schema)
        OpenAPI.validate_property(EntryTemplate, Symbol("templateCollectionId"), templateCollectionId)
        OpenAPI.validate_property(EntryTemplate, Symbol("webURL"), webURL)
        return new(apiURL, createdAt, creator, customFields, days, fields, id, modifiedAt, name, schema, templateCollectionId, webURL, )
    end
end # type EntryTemplate

const _property_types_EntryTemplate = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"EntryTemplateCreator", Symbol("customFields")=>"Dict{String, CustomField}", Symbol("days")=>"Vector{EntryTemplateDay}", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("modifiedAt")=>"String", Symbol("name")=>"String", Symbol("schema")=>"SchemaProperty4", Symbol("templateCollectionId")=>"String", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ EntryTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntryTemplate[name]))}

function check_required(o::EntryTemplate)
    true
end

function OpenAPI.validate_property(::Type{ EntryTemplate }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "EntryTemplate", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "EntryTemplate", :format, val, "date-time")
    end
end
