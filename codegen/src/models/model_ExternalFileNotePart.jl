# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExternalFileNotePart
An attached user-uploaded file

    ExternalFileNotePart(;
        indentation=0,
        type=nothing,
        externalFileId=nothing,
        links=nothing,
        text=nothing,
    )

    - indentation::Int64 : All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
    - type::String
    - externalFileId::String : The ID of the external file. Use the &#39;Get an external file&#39; endpoint to retrieve metadata about it. 
    - links::Vector{EntryLink} : Array of links referenced in the caption via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
    - text::String : The caption of the file attachment.
"""
Base.@kwdef mutable struct ExternalFileNotePart <: OpenAPI.APIModel
    indentation::Union{Nothing, Int64} = 0
    type::Union{Nothing, String} = nothing
    externalFileId::Union{Nothing, String} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryLink} }
    text::Union{Nothing, String} = nothing

    function ExternalFileNotePart(indentation, type, externalFileId, links, text, )
        OpenAPI.validate_property(ExternalFileNotePart, Symbol("indentation"), indentation)
        OpenAPI.validate_property(ExternalFileNotePart, Symbol("type"), type)
        OpenAPI.validate_property(ExternalFileNotePart, Symbol("externalFileId"), externalFileId)
        OpenAPI.validate_property(ExternalFileNotePart, Symbol("links"), links)
        OpenAPI.validate_property(ExternalFileNotePart, Symbol("text"), text)
        return new(indentation, type, externalFileId, links, text, )
    end
end # type ExternalFileNotePart

const _property_types_ExternalFileNotePart = Dict{Symbol,String}(Symbol("indentation")=>"Int64", Symbol("type")=>"String", Symbol("externalFileId")=>"String", Symbol("links")=>"Vector{EntryLink}", Symbol("text")=>"String", )
OpenAPI.property_type(::Type{ ExternalFileNotePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExternalFileNotePart[name]))}

function check_required(o::ExternalFileNotePart)
    true
end

function OpenAPI.validate_property(::Type{ ExternalFileNotePart }, name::Symbol, val)
    if name === Symbol("indentation")
        OpenAPI.validate_param(name, "ExternalFileNotePart", :minimum, val, 0, false)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ExternalFileNotePart", :enum, val, ["external_file"])
    end
end
