# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LookupTableNotePart

    LookupTableNotePart(;
        apiId=nothing,
        columns=nothing,
        type=nothing,
    )

    - apiId::String
    - columns::Vector{StructuredTableColumnInfo}
    - type::String
"""
Base.@kwdef mutable struct LookupTableNotePart <: OpenAPI.APIModel
    apiId::Union{Nothing, String} = nothing
    columns::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StructuredTableColumnInfo} }
    type::Union{Nothing, String} = nothing

    function LookupTableNotePart(apiId, columns, type, )
        OpenAPI.validate_property(LookupTableNotePart, Symbol("apiId"), apiId)
        OpenAPI.validate_property(LookupTableNotePart, Symbol("columns"), columns)
        OpenAPI.validate_property(LookupTableNotePart, Symbol("type"), type)
        return new(apiId, columns, type, )
    end
end # type LookupTableNotePart

const _property_types_LookupTableNotePart = Dict{Symbol,String}(Symbol("apiId")=>"String", Symbol("columns")=>"Vector{StructuredTableColumnInfo}", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ LookupTableNotePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LookupTableNotePart[name]))}

function check_required(o::LookupTableNotePart)
    true
end

function OpenAPI.validate_property(::Type{ LookupTableNotePart }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "LookupTableNotePart", :enum, val, ["lookup_table"])
    end
end
