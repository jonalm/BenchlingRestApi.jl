# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MoleculeUpdate

    MoleculeUpdate(;
        entityRegistryId=nothing,
        aliases=nothing,
        authorIds=nothing,
        chemicalStructure=nothing,
        customFields=nothing,
        fields=nothing,
        folderId=nothing,
        name=nothing,
        schemaId=nothing,
    )

    - entityRegistryId::String
    - aliases::Vector{String} : Aliases to add to the Molecule.
    - authorIds::Vector{String} : IDs of users to set as the Molecule&#39;s authors.
    - chemicalStructure::MoleculeBaseRequestChemicalStructure
    - customFields::Dict{String, CustomField}
    - fields::Dict{String, Field}
    - folderId::String : ID of the folder containing the Molecule. 
    - name::String : Name of the Molecule. 
    - schemaId::String : ID of the Molecule&#39;s schema. 
"""
Base.@kwdef mutable struct MoleculeUpdate <: OpenAPI.APIModel
    entityRegistryId::Union{Nothing, String} = nothing
    aliases::Union{Nothing, Vector{String}} = nothing
    authorIds::Union{Nothing, Vector{String}} = nothing
    chemicalStructure = nothing # spec type: Union{ Nothing, MoleculeBaseRequestChemicalStructure }
    customFields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CustomField} }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    folderId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    schemaId::Union{Nothing, String} = nothing

    function MoleculeUpdate(entityRegistryId, aliases, authorIds, chemicalStructure, customFields, fields, folderId, name, schemaId, )
        OpenAPI.validate_property(MoleculeUpdate, Symbol("entityRegistryId"), entityRegistryId)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("aliases"), aliases)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("authorIds"), authorIds)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("chemicalStructure"), chemicalStructure)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("customFields"), customFields)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("fields"), fields)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("folderId"), folderId)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("name"), name)
        OpenAPI.validate_property(MoleculeUpdate, Symbol("schemaId"), schemaId)
        return new(entityRegistryId, aliases, authorIds, chemicalStructure, customFields, fields, folderId, name, schemaId, )
    end
end # type MoleculeUpdate

const _property_types_MoleculeUpdate = Dict{Symbol,String}(Symbol("entityRegistryId")=>"String", Symbol("aliases")=>"Vector{String}", Symbol("authorIds")=>"Vector{String}", Symbol("chemicalStructure")=>"MoleculeBaseRequestChemicalStructure", Symbol("customFields")=>"Dict{String, CustomField}", Symbol("fields")=>"Dict{String, Field}", Symbol("folderId")=>"String", Symbol("name")=>"String", Symbol("schemaId")=>"String", )
OpenAPI.property_type(::Type{ MoleculeUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MoleculeUpdate[name]))}

function check_required(o::MoleculeUpdate)
    true
end

function OpenAPI.validate_property(::Type{ MoleculeUpdate }, name::Symbol, val)
end
