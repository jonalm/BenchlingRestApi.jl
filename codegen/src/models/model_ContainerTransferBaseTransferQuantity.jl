# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainerTransferBase_transferQuantity
This represents the quantity of the source to be transferred into the destination container. Supports mass, volume, and other quantities. Required in place of transferVolume. 

    ContainerTransferBaseTransferQuantity(;
        units=nothing,
        value=nothing,
    )

    - units::String
    - value::Float64
"""
Base.@kwdef mutable struct ContainerTransferBaseTransferQuantity <: OpenAPI.APIModel
    units::Union{Nothing, String} = nothing
    value::Union{Nothing, Float64} = nothing

    function ContainerTransferBaseTransferQuantity(units, value, )
        OpenAPI.validate_property(ContainerTransferBaseTransferQuantity, Symbol("units"), units)
        OpenAPI.validate_property(ContainerTransferBaseTransferQuantity, Symbol("value"), value)
        return new(units, value, )
    end
end # type ContainerTransferBaseTransferQuantity

const _property_types_ContainerTransferBaseTransferQuantity = Dict{Symbol,String}(Symbol("units")=>"String", Symbol("value")=>"Float64", )
OpenAPI.property_type(::Type{ ContainerTransferBaseTransferQuantity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainerTransferBaseTransferQuantity[name]))}

function check_required(o::ContainerTransferBaseTransferQuantity)
    true
end

function OpenAPI.validate_property(::Type{ ContainerTransferBaseTransferQuantity }, name::Symbol, val)
    if name === Symbol("units")
        OpenAPI.validate_param(name, "ContainerTransferBaseTransferQuantity", :enum, val, ["L", "mL", "uL", "nL", "pL", "gal (US)", "qt (US)", "pt (US)", "kg", "g", "mg", "ug", "ng", "pg", "lb", "oz", "mol", "mmol", "umol", "nmol", "pmol", "cells", "(x10^3) cells", "(x10^4) cells", "(x10^5) cells", "(x10^6) cells", "(x10^7) cells", "(x10^8) cells", "(x10^9) cells", "items", "units", "null"])
    end
end
