# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Project

    Project(;
        archiveRecord=nothing,
        id=nothing,
        name=nothing,
        owner=nothing,
    )

    - archiveRecord::ArchiveRecord
    - id::String
    - name::String
    - owner::FeatureLibraryAllOfOwner
"""
Base.@kwdef mutable struct Project <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    owner = nothing # spec type: Union{ Nothing, FeatureLibraryAllOfOwner }

    function Project(archiveRecord, id, name, owner, )
        OpenAPI.validate_property(Project, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Project, Symbol("id"), id)
        OpenAPI.validate_property(Project, Symbol("name"), name)
        OpenAPI.validate_property(Project, Symbol("owner"), owner)
        return new(archiveRecord, id, name, owner, )
    end
end # type Project

const _property_types_Project = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("owner")=>"FeatureLibraryAllOfOwner", )
OpenAPI.property_type(::Type{ Project }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Project[name]))}

function check_required(o::Project)
    true
end

function OpenAPI.validate_property(::Type{ Project }, name::Symbol, val)
end
