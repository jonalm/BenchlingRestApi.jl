# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeatureLibrary
A feature library

    FeatureLibrary(;
        description=nothing,
        name=nothing,
        createdAt=nothing,
        id=nothing,
        modifiedAt=nothing,
        owner=nothing,
        webURL=nothing,
    )

    - description::String : The description for the feature library
    - name::String : The name of the feature library
    - createdAt::ZonedDateTime : DateTime the Feature Library was created
    - id::String : The id of the feature library
    - modifiedAt::ZonedDateTime : DateTime the Feature Library was last modified
    - owner::FeatureLibraryAllOfOwner
    - webURL::String : The Benchling web UI url to view the Feature Library
"""
Base.@kwdef mutable struct FeatureLibrary <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    owner = nothing # spec type: Union{ Nothing, FeatureLibraryAllOfOwner }
    webURL::Union{Nothing, String} = nothing

    function FeatureLibrary(description, name, createdAt, id, modifiedAt, owner, webURL, )
        OpenAPI.validate_property(FeatureLibrary, Symbol("description"), description)
        OpenAPI.validate_property(FeatureLibrary, Symbol("name"), name)
        OpenAPI.validate_property(FeatureLibrary, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(FeatureLibrary, Symbol("id"), id)
        OpenAPI.validate_property(FeatureLibrary, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(FeatureLibrary, Symbol("owner"), owner)
        OpenAPI.validate_property(FeatureLibrary, Symbol("webURL"), webURL)
        return new(description, name, createdAt, id, modifiedAt, owner, webURL, )
    end
end # type FeatureLibrary

const _property_types_FeatureLibrary = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("name")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("owner")=>"FeatureLibraryAllOfOwner", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ FeatureLibrary }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeatureLibrary[name]))}

function check_required(o::FeatureLibrary)
    true
end

function OpenAPI.validate_property(::Type{ FeatureLibrary }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "FeatureLibrary", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "FeatureLibrary", :format, val, "date-time")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "FeatureLibrary", :format, val, "uri")
    end
end
