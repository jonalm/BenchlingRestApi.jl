# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayResultCreate

    AssayResultCreate(;
        fieldValidation=nothing,
        fields=nothing,
        id=nothing,
        projectId=nothing,
        schemaId=nothing,
    )

    - fieldValidation::Dict{String, UserValidation} : Dictionary mapping field names to UserValidation Resources. 
    - fields::AssayResultCreateFields
    - id::String : UUID
    - projectId::String : The project that the assay result should be uploaded to. Only users with read access to the project will be able to read the assay result. Leaving this empty will result in only the creator having read access. 
    - schemaId::String : ID of result schema under which to upload this result
"""
Base.@kwdef mutable struct AssayResultCreate <: OpenAPI.APIModel
    fieldValidation::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, UserValidation} }
    fields = nothing # spec type: Union{ Nothing, AssayResultCreateFields }
    id::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    schemaId::Union{Nothing, String} = nothing

    function AssayResultCreate(fieldValidation, fields, id, projectId, schemaId, )
        OpenAPI.validate_property(AssayResultCreate, Symbol("fieldValidation"), fieldValidation)
        OpenAPI.validate_property(AssayResultCreate, Symbol("fields"), fields)
        OpenAPI.validate_property(AssayResultCreate, Symbol("id"), id)
        OpenAPI.validate_property(AssayResultCreate, Symbol("projectId"), projectId)
        OpenAPI.validate_property(AssayResultCreate, Symbol("schemaId"), schemaId)
        return new(fieldValidation, fields, id, projectId, schemaId, )
    end
end # type AssayResultCreate

const _property_types_AssayResultCreate = Dict{Symbol,String}(Symbol("fieldValidation")=>"Dict{String, UserValidation}", Symbol("fields")=>"AssayResultCreateFields", Symbol("id")=>"String", Symbol("projectId")=>"String", Symbol("schemaId")=>"String", )
OpenAPI.property_type(::Type{ AssayResultCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayResultCreate[name]))}

function check_required(o::AssayResultCreate)
    o.fields === nothing && (return false)
    o.schemaId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AssayResultCreate }, name::Symbol, val)
end
