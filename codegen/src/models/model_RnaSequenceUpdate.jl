# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RnaSequenceUpdate

    RnaSequenceUpdate(;
        aliases=nothing,
        annotations=nothing,
        authorIds=nothing,
        bases=nothing,
        customFields=nothing,
        fields=nothing,
        folderId=nothing,
        isCircular=nothing,
        name=nothing,
        parts=nothing,
        primers=nothing,
        schemaId=nothing,
        translations=nothing,
        entityRegistryId=nothing,
    )

    - aliases::Vector{String} : Aliases to add to the RNA sequence
    - annotations::Vector{RnaAnnotation} : Annotations to create on the RNA sequence. 
    - authorIds::Vector{String} : IDs of users to set as the RNA sequence&#39;s authors.
    - bases::String : Base pairs for the RNA sequence. 
    - customFields::Dict{String, CustomField}
    - fields::Dict{String, Field}
    - folderId::String : ID of the folder containing the RNA sequence. 
    - isCircular::Bool : Whether the RNA sequence is circular or linear. RNA sequences can only be linear 
    - name::String : Name of the RNA sequence. 
    - parts::Vector{RnaSequencePart}
    - primers::Vector{Primer}
    - schemaId::String : ID of the RNA sequence&#39;s schema. 
    - translations::Vector{Translation} : Translations to create on the RNA sequence. Translations are specified by either a combination of &#39;start&#39; and &#39;end&#39; fields, or a list of regions. Both cannot be provided. 
    - entityRegistryId::String
"""
Base.@kwdef mutable struct RnaSequenceUpdate <: OpenAPI.APIModel
    aliases::Union{Nothing, Vector{String}} = nothing
    annotations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RnaAnnotation} }
    authorIds::Union{Nothing, Vector{String}} = nothing
    bases::Union{Nothing, String} = nothing
    customFields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CustomField} }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    folderId::Union{Nothing, String} = nothing
    isCircular::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    parts::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RnaSequencePart} }
    primers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Primer} }
    schemaId::Union{Nothing, String} = nothing
    translations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Translation} }
    entityRegistryId::Union{Nothing, String} = nothing

    function RnaSequenceUpdate(aliases, annotations, authorIds, bases, customFields, fields, folderId, isCircular, name, parts, primers, schemaId, translations, entityRegistryId, )
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("aliases"), aliases)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("annotations"), annotations)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("authorIds"), authorIds)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("bases"), bases)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("customFields"), customFields)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("fields"), fields)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("folderId"), folderId)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("isCircular"), isCircular)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("name"), name)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("parts"), parts)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("primers"), primers)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("schemaId"), schemaId)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("translations"), translations)
        OpenAPI.validate_property(RnaSequenceUpdate, Symbol("entityRegistryId"), entityRegistryId)
        return new(aliases, annotations, authorIds, bases, customFields, fields, folderId, isCircular, name, parts, primers, schemaId, translations, entityRegistryId, )
    end
end # type RnaSequenceUpdate

const _property_types_RnaSequenceUpdate = Dict{Symbol,String}(Symbol("aliases")=>"Vector{String}", Symbol("annotations")=>"Vector{RnaAnnotation}", Symbol("authorIds")=>"Vector{String}", Symbol("bases")=>"String", Symbol("customFields")=>"Dict{String, CustomField}", Symbol("fields")=>"Dict{String, Field}", Symbol("folderId")=>"String", Symbol("isCircular")=>"Bool", Symbol("name")=>"String", Symbol("parts")=>"Vector{RnaSequencePart}", Symbol("primers")=>"Vector{Primer}", Symbol("schemaId")=>"String", Symbol("translations")=>"Vector{Translation}", Symbol("entityRegistryId")=>"String", )
OpenAPI.property_type(::Type{ RnaSequenceUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RnaSequenceUpdate[name]))}

function check_required(o::RnaSequenceUpdate)
    true
end

function OpenAPI.validate_property(::Type{ RnaSequenceUpdate }, name::Symbol, val)
end
