# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainersArchive

    ContainersArchive(;
        containerIds=nothing,
        reason=nothing,
        shouldRemoveBarcodes=nothing,
    )

    - containerIds::Vector{String} : Array of container IDs
    - reason::String : Reason that containers are being archived. 
    - shouldRemoveBarcodes::Bool : Remove barcodes. Removing barcodes from archived inventory that contain items will also remove barcodes from the contained items. 
"""
Base.@kwdef mutable struct ContainersArchive <: OpenAPI.APIModel
    containerIds::Union{Nothing, Vector{String}} = nothing
    reason::Union{Nothing, String} = nothing
    shouldRemoveBarcodes::Union{Nothing, Bool} = nothing

    function ContainersArchive(containerIds, reason, shouldRemoveBarcodes, )
        OpenAPI.validate_property(ContainersArchive, Symbol("containerIds"), containerIds)
        OpenAPI.validate_property(ContainersArchive, Symbol("reason"), reason)
        OpenAPI.validate_property(ContainersArchive, Symbol("shouldRemoveBarcodes"), shouldRemoveBarcodes)
        return new(containerIds, reason, shouldRemoveBarcodes, )
    end
end # type ContainersArchive

const _property_types_ContainersArchive = Dict{Symbol,String}(Symbol("containerIds")=>"Vector{String}", Symbol("reason")=>"String", Symbol("shouldRemoveBarcodes")=>"Bool", )
OpenAPI.property_type(::Type{ ContainersArchive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainersArchive[name]))}

function check_required(o::ContainersArchive)
    o.containerIds === nothing && (return false)
    o.reason === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ContainersArchive }, name::Symbol, val)
    if name === Symbol("reason")
        OpenAPI.validate_param(name, "ContainersArchive", :enum, val, ["Made in error", "Retired", "Expended", "Shipped", "Contaminated", "Expired", "Missing", "Other"])
    end
end
