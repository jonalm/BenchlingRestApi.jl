# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AaSequence

    AaSequence(;
        aliases=nothing,
        aminoAcids=nothing,
        annotations=nothing,
        apiURL=nothing,
        archiveRecord=nothing,
        createdAt=nothing,
        creator=nothing,
        customFields=nothing,
        entityRegistryId=nothing,
        fields=nothing,
        folderId=nothing,
        id=nothing,
        length=nothing,
        modifiedAt=nothing,
        name=nothing,
        registrationOrigin=nothing,
        registryId=nothing,
        schema=nothing,
        webURL=nothing,
    )

    - aliases::Vector{String} : Array of aliases
    - aminoAcids::String : Amino acids of the AA sequence.
    - annotations::Vector{AaAnnotation} : Array of annotation objects on the AA sequence.
    - apiURL::String : The canonical url of the AA Sequence in the API.
    - archiveRecord::ArchiveRecord
    - createdAt::ZonedDateTime : DateTime the AA sequence was created.
    - creator::UserSummary
    - customFields::Dict{String, CustomField}
    - entityRegistryId::String : Registry ID of the AA sequence if registered.
    - fields::Dict{String, Field}
    - folderId::String : ID of the folder that contains the AA sequence.
    - id::String : ID of the AA sequence.
    - length::Int64 : Number of amino acids in the AA sequence.
    - modifiedAt::ZonedDateTime : DateTime the AA sequence was last modified.
    - name::String : Name of the AA sequence.
    - registrationOrigin::RegistrationOrigin
    - registryId::String : Registry the AA sequence is registered in.
    - schema::SchemaSummary
    - webURL::String : URL of the protein.
"""
Base.@kwdef mutable struct AaSequence <: OpenAPI.APIModel
    aliases::Union{Nothing, Vector{String}} = nothing
    aminoAcids::Union{Nothing, String} = nothing
    annotations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AaAnnotation} }
    apiURL::Union{Nothing, String} = nothing
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    customFields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CustomField} }
    entityRegistryId::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    folderId::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    length::Union{Nothing, Int64} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    registrationOrigin = nothing # spec type: Union{ Nothing, RegistrationOrigin }
    registryId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaSummary }
    webURL::Union{Nothing, String} = nothing

    function AaSequence(aliases, aminoAcids, annotations, apiURL, archiveRecord, createdAt, creator, customFields, entityRegistryId, fields, folderId, id, length, modifiedAt, name, registrationOrigin, registryId, schema, webURL, )
        OpenAPI.validate_property(AaSequence, Symbol("aliases"), aliases)
        OpenAPI.validate_property(AaSequence, Symbol("aminoAcids"), aminoAcids)
        OpenAPI.validate_property(AaSequence, Symbol("annotations"), annotations)
        OpenAPI.validate_property(AaSequence, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(AaSequence, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(AaSequence, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(AaSequence, Symbol("creator"), creator)
        OpenAPI.validate_property(AaSequence, Symbol("customFields"), customFields)
        OpenAPI.validate_property(AaSequence, Symbol("entityRegistryId"), entityRegistryId)
        OpenAPI.validate_property(AaSequence, Symbol("fields"), fields)
        OpenAPI.validate_property(AaSequence, Symbol("folderId"), folderId)
        OpenAPI.validate_property(AaSequence, Symbol("id"), id)
        OpenAPI.validate_property(AaSequence, Symbol("length"), length)
        OpenAPI.validate_property(AaSequence, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(AaSequence, Symbol("name"), name)
        OpenAPI.validate_property(AaSequence, Symbol("registrationOrigin"), registrationOrigin)
        OpenAPI.validate_property(AaSequence, Symbol("registryId"), registryId)
        OpenAPI.validate_property(AaSequence, Symbol("schema"), schema)
        OpenAPI.validate_property(AaSequence, Symbol("webURL"), webURL)
        return new(aliases, aminoAcids, annotations, apiURL, archiveRecord, createdAt, creator, customFields, entityRegistryId, fields, folderId, id, length, modifiedAt, name, registrationOrigin, registryId, schema, webURL, )
    end
end # type AaSequence

const _property_types_AaSequence = Dict{Symbol,String}(Symbol("aliases")=>"Vector{String}", Symbol("aminoAcids")=>"String", Symbol("annotations")=>"Vector{AaAnnotation}", Symbol("apiURL")=>"String", Symbol("archiveRecord")=>"ArchiveRecord", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"UserSummary", Symbol("customFields")=>"Dict{String, CustomField}", Symbol("entityRegistryId")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("folderId")=>"String", Symbol("id")=>"String", Symbol("length")=>"Int64", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("registrationOrigin")=>"RegistrationOrigin", Symbol("registryId")=>"String", Symbol("schema")=>"SchemaSummary", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ AaSequence }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AaSequence[name]))}

function check_required(o::AaSequence)
    true
end

function OpenAPI.validate_property(::Type{ AaSequence }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "AaSequence", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "AaSequence", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "AaSequence", :format, val, "date-time")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "AaSequence", :format, val, "uri")
    end
end
