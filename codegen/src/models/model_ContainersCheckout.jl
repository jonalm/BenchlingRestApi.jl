# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainersCheckout

    ContainersCheckout(;
        assigneeId=nothing,
        comment=nothing,
        containerIds=nothing,
    )

    - assigneeId::String : User or Team API ID.
    - comment::String
    - containerIds::Vector{String} : Array of container IDs.
"""
Base.@kwdef mutable struct ContainersCheckout <: OpenAPI.APIModel
    assigneeId::Union{Nothing, String} = nothing
    comment::Union{Nothing, String} = nothing
    containerIds::Union{Nothing, Vector{String}} = nothing

    function ContainersCheckout(assigneeId, comment, containerIds, )
        OpenAPI.validate_property(ContainersCheckout, Symbol("assigneeId"), assigneeId)
        OpenAPI.validate_property(ContainersCheckout, Symbol("comment"), comment)
        OpenAPI.validate_property(ContainersCheckout, Symbol("containerIds"), containerIds)
        return new(assigneeId, comment, containerIds, )
    end
end # type ContainersCheckout

const _property_types_ContainersCheckout = Dict{Symbol,String}(Symbol("assigneeId")=>"String", Symbol("comment")=>"String", Symbol("containerIds")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ContainersCheckout }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainersCheckout[name]))}

function check_required(o::ContainersCheckout)
    o.assigneeId === nothing && (return false)
    o.containerIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ContainersCheckout }, name::Symbol, val)
end
