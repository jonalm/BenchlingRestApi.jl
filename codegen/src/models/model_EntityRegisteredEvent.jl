# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntityRegisteredEvent

    EntityRegisteredEvent(;
        createdAt=nothing,
        deprecated=nothing,
        excludedProperties=nothing,
        id=nothing,
        schema=nothing,
        entity=nothing,
        eventType=nothing,
    )

    - createdAt::ZonedDateTime
    - deprecated::Bool
    - excludedProperties::Vector{String} : These properties have been dropped from the payload due to size. 
    - id::String
    - schema::EventBaseSchema
    - entity::GenericEntity
    - eventType::String
"""
Base.@kwdef mutable struct EntityRegisteredEvent <: OpenAPI.APIModel
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    deprecated::Union{Nothing, Bool} = nothing
    excludedProperties::Union{Nothing, Vector{String}} = nothing
    id::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, EventBaseSchema }
    entity = nothing # spec type: Union{ Nothing, GenericEntity }
    eventType::Union{Nothing, String} = nothing

    function EntityRegisteredEvent(createdAt, deprecated, excludedProperties, id, schema, entity, eventType, )
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("excludedProperties"), excludedProperties)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("id"), id)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("schema"), schema)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("entity"), entity)
        OpenAPI.validate_property(EntityRegisteredEvent, Symbol("eventType"), eventType)
        return new(createdAt, deprecated, excludedProperties, id, schema, entity, eventType, )
    end
end # type EntityRegisteredEvent

const _property_types_EntityRegisteredEvent = Dict{Symbol,String}(Symbol("createdAt")=>"ZonedDateTime", Symbol("deprecated")=>"Bool", Symbol("excludedProperties")=>"Vector{String}", Symbol("id")=>"String", Symbol("schema")=>"EventBaseSchema", Symbol("entity")=>"GenericEntity", Symbol("eventType")=>"String", )
OpenAPI.property_type(::Type{ EntityRegisteredEvent }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntityRegisteredEvent[name]))}

function check_required(o::EntityRegisteredEvent)
    true
end

function OpenAPI.validate_property(::Type{ EntityRegisteredEvent }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "EntityRegisteredEvent", :format, val, "date-time")
    end
    if name === Symbol("eventType")
        OpenAPI.validate_param(name, "EntityRegisteredEvent", :enum, val, ["v2.entity.registered"])
    end
end
