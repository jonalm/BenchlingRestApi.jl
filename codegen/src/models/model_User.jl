# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""User

    User(;
        handle=nothing,
        id=nothing,
        name=nothing,
        email=nothing,
        isSuspended=nothing,
        passwordLastChangedAt=nothing,
    )

    - handle::String
    - id::String
    - name::String
    - email::String
    - isSuspended::Bool
    - passwordLastChangedAt::String
"""
Base.@kwdef mutable struct User <: OpenAPI.APIModel
    handle::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    isSuspended::Union{Nothing, Bool} = nothing
    passwordLastChangedAt::Union{Nothing, String} = nothing

    function User(handle, id, name, email, isSuspended, passwordLastChangedAt, )
        OpenAPI.validate_property(User, Symbol("handle"), handle)
        OpenAPI.validate_property(User, Symbol("id"), id)
        OpenAPI.validate_property(User, Symbol("name"), name)
        OpenAPI.validate_property(User, Symbol("email"), email)
        OpenAPI.validate_property(User, Symbol("isSuspended"), isSuspended)
        OpenAPI.validate_property(User, Symbol("passwordLastChangedAt"), passwordLastChangedAt)
        return new(handle, id, name, email, isSuspended, passwordLastChangedAt, )
    end
end # type User

const _property_types_User = Dict{Symbol,String}(Symbol("handle")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("email")=>"String", Symbol("isSuspended")=>"Bool", Symbol("passwordLastChangedAt")=>"String", )
OpenAPI.property_type(::Type{ User }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_User[name]))}

function check_required(o::User)
    true
end

function OpenAPI.validate_property(::Type{ User }, name::Symbol, val)
end
