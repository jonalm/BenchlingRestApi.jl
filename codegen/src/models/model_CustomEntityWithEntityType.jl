# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CustomEntityWithEntityType

    CustomEntityWithEntityType(;
        aliases=nothing,
        apiURL=nothing,
        archiveRecord=nothing,
        authors=nothing,
        createdAt=nothing,
        creator=nothing,
        customFields=nothing,
        entityRegistryId=nothing,
        fields=nothing,
        folderId=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        registrationOrigin=nothing,
        registryId=nothing,
        schema=nothing,
        webURL=nothing,
        entityType=nothing,
    )

    - aliases::Vector{String}
    - apiURL::String : The canonical url of the Custom Entity in the API.
    - archiveRecord::ArchiveRecord
    - authors::Vector{UserSummary}
    - createdAt::ZonedDateTime
    - creator::CustomEntityCreator
    - customFields::Dict{String, CustomField}
    - entityRegistryId::String
    - fields::Dict{String, Field}
    - folderId::String
    - id::String
    - modifiedAt::ZonedDateTime
    - name::String
    - registrationOrigin::RegistrationOrigin
    - registryId::String
    - schema::CustomEntitySchema
    - webURL::String
    - entityType::String
"""
Base.@kwdef mutable struct CustomEntityWithEntityType <: OpenAPI.APIModel
    aliases::Union{Nothing, Vector{String}} = nothing
    apiURL::Union{Nothing, String} = nothing
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    authors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserSummary} }
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, CustomEntityCreator }
    customFields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CustomField} }
    entityRegistryId::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    folderId::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    registrationOrigin = nothing # spec type: Union{ Nothing, RegistrationOrigin }
    registryId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, CustomEntitySchema }
    webURL::Union{Nothing, String} = nothing
    entityType::Union{Nothing, String} = nothing

    function CustomEntityWithEntityType(aliases, apiURL, archiveRecord, authors, createdAt, creator, customFields, entityRegistryId, fields, folderId, id, modifiedAt, name, registrationOrigin, registryId, schema, webURL, entityType, )
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("aliases"), aliases)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("authors"), authors)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("creator"), creator)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("customFields"), customFields)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("entityRegistryId"), entityRegistryId)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("fields"), fields)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("folderId"), folderId)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("id"), id)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("name"), name)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("registrationOrigin"), registrationOrigin)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("registryId"), registryId)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("schema"), schema)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("webURL"), webURL)
        OpenAPI.validate_property(CustomEntityWithEntityType, Symbol("entityType"), entityType)
        return new(aliases, apiURL, archiveRecord, authors, createdAt, creator, customFields, entityRegistryId, fields, folderId, id, modifiedAt, name, registrationOrigin, registryId, schema, webURL, entityType, )
    end
end # type CustomEntityWithEntityType

const _property_types_CustomEntityWithEntityType = Dict{Symbol,String}(Symbol("aliases")=>"Vector{String}", Symbol("apiURL")=>"String", Symbol("archiveRecord")=>"ArchiveRecord", Symbol("authors")=>"Vector{UserSummary}", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"CustomEntityCreator", Symbol("customFields")=>"Dict{String, CustomField}", Symbol("entityRegistryId")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("folderId")=>"String", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("registrationOrigin")=>"RegistrationOrigin", Symbol("registryId")=>"String", Symbol("schema")=>"CustomEntitySchema", Symbol("webURL")=>"String", Symbol("entityType")=>"String", )
OpenAPI.property_type(::Type{ CustomEntityWithEntityType }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CustomEntityWithEntityType[name]))}

function check_required(o::CustomEntityWithEntityType)
    true
end

function OpenAPI.validate_property(::Type{ CustomEntityWithEntityType }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "CustomEntityWithEntityType", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "CustomEntityWithEntityType", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "CustomEntityWithEntityType", :format, val, "date-time")
    end
    if name === Symbol("entityType")
        OpenAPI.validate_param(name, "CustomEntityWithEntityType", :enum, val, ["custom_entity"])
    end
end
