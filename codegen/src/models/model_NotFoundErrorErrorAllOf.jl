# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NotFoundError_error_allOf

    NotFoundErrorErrorAllOf(;
        invalidId=nothing,
        type=nothing,
    )

    - invalidId::String
    - type::String
"""
Base.@kwdef mutable struct NotFoundErrorErrorAllOf <: OpenAPI.APIModel
    invalidId::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function NotFoundErrorErrorAllOf(invalidId, type, )
        OpenAPI.validate_property(NotFoundErrorErrorAllOf, Symbol("invalidId"), invalidId)
        OpenAPI.validate_property(NotFoundErrorErrorAllOf, Symbol("type"), type)
        return new(invalidId, type, )
    end
end # type NotFoundErrorErrorAllOf

const _property_types_NotFoundErrorErrorAllOf = Dict{Symbol,String}(Symbol("invalidId")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ NotFoundErrorErrorAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NotFoundErrorErrorAllOf[name]))}

function check_required(o::NotFoundErrorErrorAllOf)
    true
end

function OpenAPI.validate_property(::Type{ NotFoundErrorErrorAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "NotFoundErrorErrorAllOf", :enum, val, ["invalid_request_error"])
    end
end
