# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FoldersArchive

    FoldersArchive(;
        folderIds=nothing,
        reason=nothing,
    )

    - folderIds::Vector{String} : A list of folder IDs to archive.
    - reason::String : The reason for archiving the provided folders. Accepted reasons may differ based on tenant configuration. 
"""
Base.@kwdef mutable struct FoldersArchive <: OpenAPI.APIModel
    folderIds::Union{Nothing, Vector{String}} = nothing
    reason::Union{Nothing, String} = nothing

    function FoldersArchive(folderIds, reason, )
        OpenAPI.validate_property(FoldersArchive, Symbol("folderIds"), folderIds)
        OpenAPI.validate_property(FoldersArchive, Symbol("reason"), reason)
        return new(folderIds, reason, )
    end
end # type FoldersArchive

const _property_types_FoldersArchive = Dict{Symbol,String}(Symbol("folderIds")=>"Vector{String}", Symbol("reason")=>"String", )
OpenAPI.property_type(::Type{ FoldersArchive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FoldersArchive[name]))}

function check_required(o::FoldersArchive)
    o.folderIds === nothing && (return false)
    o.reason === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FoldersArchive }, name::Symbol, val)
    if name === Symbol("reason")
        OpenAPI.validate_param(name, "FoldersArchive", :enum, val, ["Made in error", "Retired", "Other"])
    end
end
