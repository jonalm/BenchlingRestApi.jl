# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowTask

    WorkflowTask(;
        displayId=nothing,
        id=nothing,
        assignee=nothing,
        clonedFrom=nothing,
        creationOrigin=nothing,
        creator=nothing,
        executionOrigin=nothing,
        fields=nothing,
        outputs=nothing,
        scheduledOn=nothing,
        status=nothing,
        webURL=nothing,
        workflowTaskGroup=nothing,
        executionType=nothing,
    )

    - displayId::String : User-friendly ID of the workflow task
    - id::String : The ID of the workflow task
    - assignee::UserSummary
    - clonedFrom::WorkflowTaskSummary
    - creationOrigin::CreationOrigin
    - creator::UserSummary
    - executionOrigin::WorkflowTaskExecutionOrigin
    - fields::Dict{String, Field}
    - outputs::Vector{WorkflowOutputSummary}
    - scheduledOn::Date : The date on which the task is scheduled to be executed
    - status::WorkflowTaskStatus
    - webURL::String : URL of the workflow task
    - workflowTaskGroup::WorkflowTaskGroupSummary
    - executionType::String : The method by which the task of the workflow is executed
"""
Base.@kwdef mutable struct WorkflowTask <: OpenAPI.APIModel
    displayId::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    assignee = nothing # spec type: Union{ Nothing, UserSummary }
    clonedFrom = nothing # spec type: Union{ Nothing, WorkflowTaskSummary }
    creationOrigin = nothing # spec type: Union{ Nothing, CreationOrigin }
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    executionOrigin = nothing # spec type: Union{ Nothing, WorkflowTaskExecutionOrigin }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    outputs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WorkflowOutputSummary} }
    scheduledOn::Union{Nothing, Date} = nothing
    status = nothing # spec type: Union{ Nothing, WorkflowTaskStatus }
    webURL::Union{Nothing, String} = nothing
    workflowTaskGroup = nothing # spec type: Union{ Nothing, WorkflowTaskGroupSummary }
    executionType::Union{Nothing, String} = nothing

    function WorkflowTask(displayId, id, assignee, clonedFrom, creationOrigin, creator, executionOrigin, fields, outputs, scheduledOn, status, webURL, workflowTaskGroup, executionType, )
        OpenAPI.validate_property(WorkflowTask, Symbol("displayId"), displayId)
        OpenAPI.validate_property(WorkflowTask, Symbol("id"), id)
        OpenAPI.validate_property(WorkflowTask, Symbol("assignee"), assignee)
        OpenAPI.validate_property(WorkflowTask, Symbol("clonedFrom"), clonedFrom)
        OpenAPI.validate_property(WorkflowTask, Symbol("creationOrigin"), creationOrigin)
        OpenAPI.validate_property(WorkflowTask, Symbol("creator"), creator)
        OpenAPI.validate_property(WorkflowTask, Symbol("executionOrigin"), executionOrigin)
        OpenAPI.validate_property(WorkflowTask, Symbol("fields"), fields)
        OpenAPI.validate_property(WorkflowTask, Symbol("outputs"), outputs)
        OpenAPI.validate_property(WorkflowTask, Symbol("scheduledOn"), scheduledOn)
        OpenAPI.validate_property(WorkflowTask, Symbol("status"), status)
        OpenAPI.validate_property(WorkflowTask, Symbol("webURL"), webURL)
        OpenAPI.validate_property(WorkflowTask, Symbol("workflowTaskGroup"), workflowTaskGroup)
        OpenAPI.validate_property(WorkflowTask, Symbol("executionType"), executionType)
        return new(displayId, id, assignee, clonedFrom, creationOrigin, creator, executionOrigin, fields, outputs, scheduledOn, status, webURL, workflowTaskGroup, executionType, )
    end
end # type WorkflowTask

const _property_types_WorkflowTask = Dict{Symbol,String}(Symbol("displayId")=>"String", Symbol("id")=>"String", Symbol("assignee")=>"UserSummary", Symbol("clonedFrom")=>"WorkflowTaskSummary", Symbol("creationOrigin")=>"CreationOrigin", Symbol("creator")=>"UserSummary", Symbol("executionOrigin")=>"WorkflowTaskExecutionOrigin", Symbol("fields")=>"Dict{String, Field}", Symbol("outputs")=>"Vector{WorkflowOutputSummary}", Symbol("scheduledOn")=>"Date", Symbol("status")=>"WorkflowTaskStatus", Symbol("webURL")=>"String", Symbol("workflowTaskGroup")=>"WorkflowTaskGroupSummary", Symbol("executionType")=>"String", )
OpenAPI.property_type(::Type{ WorkflowTask }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowTask[name]))}

function check_required(o::WorkflowTask)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowTask }, name::Symbol, val)
    if name === Symbol("scheduledOn")
        OpenAPI.validate_param(name, "WorkflowTask", :format, val, "date")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "WorkflowTask", :format, val, "uri")
    end
    if name === Symbol("executionType")
        OpenAPI.validate_param(name, "WorkflowTask", :enum, val, ["DIRECT", "ENTRY"])
    end
end
