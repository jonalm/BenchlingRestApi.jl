# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.



@doc raw"""Event

    Event(; value=nothing)
"""
mutable struct Event <: OpenAPI.OneOfAPIModel
    value::Any # Union{ AssayRunCreatedEvent, AssayRunUpdatedFieldsEvent, AutomationInputGeneratorCompletedV2BetaEvent, AutomationOutputProcessorCompletedV2BetaEvent, AutomationOutputProcessorUploadedV2BetaEvent, EntityRegisteredEvent, EntryCreatedEvent, EntryUpdatedFieldsEvent, EntryUpdatedReviewRecordEvent, RequestCreatedEvent, RequestUpdatedFieldsEvent, StageEntryCreatedEvent, StageEntryUpdatedFieldsEvent, StageEntryUpdatedReviewRecordEvent, WorkflowOutputCreatedEvent, WorkflowOutputUpdatedFieldsEvent, WorkflowTaskCreatedEvent, WorkflowTaskGroupCreatedEvent, WorkflowTaskGroupUpdatedWatchersEvent, WorkflowTaskUpdatedAssigneeEvent, WorkflowTaskUpdatedFieldsEvent, WorkflowTaskUpdatedScheduledOnEvent, WorkflowTaskUpdatedStatusEvent }
    Event() = new()
    Event(value) = new(value)
end # type Event

function OpenAPI.property_type(::Type{ Event }, name::Symbol, json::Dict{String,Any})
    discriminator = json["eventType"]
    if discriminator == "v2-alpha.stageEntry.created"
        return eval(Base.Meta.parse("StageEntryCreatedEvent"))
    elseif discriminator == "v2-beta.automationInputGenerator.completed"
        return eval(Base.Meta.parse("AutomationInputGeneratorCompletedV2BetaEvent"))
    elseif discriminator == "v2-beta.automationOutputProcessor.completed"
        return eval(Base.Meta.parse("AutomationOutputProcessorCompletedV2BetaEvent"))
    elseif discriminator == "v2-beta.automationOutputProcessor.uploaded"
        return eval(Base.Meta.parse("AutomationOutputProcessorUploadedV2BetaEvent"))
    elseif discriminator == "v2.assayRun.created"
        return eval(Base.Meta.parse("AssayRunCreatedEvent"))
    elseif discriminator == "v2.assayRun.updated.fields"
        return eval(Base.Meta.parse("AssayRunUpdatedFieldsEvent"))
    elseif discriminator == "v2.entity.registered"
        return eval(Base.Meta.parse("EntityRegisteredEvent"))
    elseif discriminator == "v2.entry.created"
        return eval(Base.Meta.parse("EntryCreatedEvent"))
    elseif discriminator == "v2.entry.updated.fields"
        return eval(Base.Meta.parse("EntryUpdatedFieldsEvent"))
    elseif discriminator == "v2.entry.updated.reviewRecord"
        return eval(Base.Meta.parse("EntryUpdatedReviewRecordEvent"))
    elseif discriminator == "v2.request.created"
        return eval(Base.Meta.parse("RequestCreatedEvent"))
    elseif discriminator == "v2.request.updated.fields"
        return eval(Base.Meta.parse("RequestUpdatedFieldsEvent"))
    elseif discriminator == "v2.workflowOutput.created"
        return eval(Base.Meta.parse("WorkflowOutputCreatedEvent"))
    elseif discriminator == "v2.workflowOutput.updated.fields"
        return eval(Base.Meta.parse("WorkflowOutputUpdatedFieldsEvent"))
    elseif discriminator == "v2.workflowTask.created"
        return eval(Base.Meta.parse("WorkflowTaskCreatedEvent"))
    elseif discriminator == "v2.workflowTask.updated.assignee"
        return eval(Base.Meta.parse("WorkflowTaskUpdatedAssigneeEvent"))
    elseif discriminator == "v2.workflowTask.updated.fields"
        return eval(Base.Meta.parse("WorkflowTaskUpdatedFieldsEvent"))
    elseif discriminator == "v2.workflowTask.updated.scheduledOn"
        return eval(Base.Meta.parse("WorkflowTaskUpdatedScheduledOnEvent"))
    elseif discriminator == "v2.workflowTask.updated.status"
        return eval(Base.Meta.parse("WorkflowTaskUpdatedStatusEvent"))
    elseif discriminator == "v2.workflowTaskGroup.created"
        return eval(Base.Meta.parse("WorkflowTaskGroupCreatedEvent"))
    elseif discriminator == "v2.workflowTaskGroup.updated.watchers"
        return eval(Base.Meta.parse("WorkflowTaskGroupUpdatedWatchersEvent"))
    end
    throw(OpenAPI.ValidationException("Invalid discriminator value: $discriminator for Event"))
end
