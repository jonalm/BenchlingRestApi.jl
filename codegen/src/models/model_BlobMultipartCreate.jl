# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BlobMultipartCreate

    BlobMultipartCreate(;
        mimeType="application/octet-stream",
        name=nothing,
        type=nothing,
    )

    - mimeType::String : eg. application/jpeg
    - name::String : Name of the blob
    - type::String : One of RAW_FILE or VISUALIZATION. If VISUALIZATION, the blob may be displayed as an image preview. 
"""
Base.@kwdef mutable struct BlobMultipartCreate <: OpenAPI.APIModel
    mimeType::Union{Nothing, String} = "application/octet-stream"
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function BlobMultipartCreate(mimeType, name, type, )
        OpenAPI.validate_property(BlobMultipartCreate, Symbol("mimeType"), mimeType)
        OpenAPI.validate_property(BlobMultipartCreate, Symbol("name"), name)
        OpenAPI.validate_property(BlobMultipartCreate, Symbol("type"), type)
        return new(mimeType, name, type, )
    end
end # type BlobMultipartCreate

const _property_types_BlobMultipartCreate = Dict{Symbol,String}(Symbol("mimeType")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ BlobMultipartCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BlobMultipartCreate[name]))}

function check_required(o::BlobMultipartCreate)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BlobMultipartCreate }, name::Symbol, val)
    if name === Symbol("mimeType")
        OpenAPI.validate_param(name, "BlobMultipartCreate", :maxLength, val, 100)
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "BlobMultipartCreate", :maxLength, val, 1000)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "BlobMultipartCreate", :enum, val, ["RAW_FILE", "VISUALIZATION"])
    end
end
