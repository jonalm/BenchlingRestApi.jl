# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntitySchema_allOf

    EntitySchemaAllOf(;
        constraint=nothing,
        containableType=nothing,
        modifiedAt=nothing,
        type=nothing,
    )

    - constraint::EntitySchemaAllOfConstraint
    - containableType::String
    - modifiedAt::ZonedDateTime : DateTime the Entity Schema was last modified
    - type::String
"""
Base.@kwdef mutable struct EntitySchemaAllOf <: OpenAPI.APIModel
    constraint = nothing # spec type: Union{ Nothing, EntitySchemaAllOfConstraint }
    containableType::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    type::Union{Nothing, String} = nothing

    function EntitySchemaAllOf(constraint, containableType, modifiedAt, type, )
        OpenAPI.validate_property(EntitySchemaAllOf, Symbol("constraint"), constraint)
        OpenAPI.validate_property(EntitySchemaAllOf, Symbol("containableType"), containableType)
        OpenAPI.validate_property(EntitySchemaAllOf, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(EntitySchemaAllOf, Symbol("type"), type)
        return new(constraint, containableType, modifiedAt, type, )
    end
end # type EntitySchemaAllOf

const _property_types_EntitySchemaAllOf = Dict{Symbol,String}(Symbol("constraint")=>"EntitySchemaAllOfConstraint", Symbol("containableType")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ EntitySchemaAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntitySchemaAllOf[name]))}

function check_required(o::EntitySchemaAllOf)
    true
end

function OpenAPI.validate_property(::Type{ EntitySchemaAllOf }, name::Symbol, val)
    if name === Symbol("containableType")
        OpenAPI.validate_param(name, "EntitySchemaAllOf", :enum, val, ["NONE", "ENTITY", "BATCH"])
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "EntitySchemaAllOf", :format, val, "date-time")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "EntitySchemaAllOf", :enum, val, ["custom_entity", "dna_sequence", "aa_sequence", "mixture", "dna_oligo", "rna_oligo", "molecule"])
    end
end
