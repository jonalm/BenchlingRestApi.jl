# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntryLink
Links are contained within notes to reference resources that live outside of the entry. A link can target an external resource via an http(s):// hyperlink or a Benchling resource via @-mentions and drag-n-drop. 

    EntryLink(;
        id=nothing,
        type=nothing,
        webURL=nothing,
    )

    - id::String : For linked Benchling resources, this will be the ID of that resource (e.g., &#39;seq_RhYGVnHF&#39;). Omitted for \&quot;link\&quot; types. 
    - type::String : The type of resource being linked. For hyperlinks: &#39;link&#39;. For linked Benchling resources, one of: &#39;user&#39;, &#39;request&#39;, &#39;entry&#39;, &#39;stage_entry&#39;, &#39;protocol&#39;, &#39;workflow&#39;, &#39;custom_entity&#39;, &#39;aa_sequence&#39;, &#39;dna_sequence&#39;, &#39;batch&#39;, &#39;box&#39;, &#39;container&#39;, &#39;location&#39;, &#39;plate&#39;. 
    - webURL::String : Canonical URL of the linked Benchling resource (if you have at least READ authorization for that resource), or the explicit URL provided as hyperlink for \&quot;link\&quot; types. Note: locations do not currently have a URL. 
"""
Base.@kwdef mutable struct EntryLink <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    webURL::Union{Nothing, String} = nothing

    function EntryLink(id, type, webURL, )
        OpenAPI.validate_property(EntryLink, Symbol("id"), id)
        OpenAPI.validate_property(EntryLink, Symbol("type"), type)
        OpenAPI.validate_property(EntryLink, Symbol("webURL"), webURL)
        return new(id, type, webURL, )
    end
end # type EntryLink

const _property_types_EntryLink = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ EntryLink }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntryLink[name]))}

function check_required(o::EntryLink)
    true
end

function OpenAPI.validate_property(::Type{ EntryLink }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "EntryLink", :enum, val, ["link", "user", "request", "entry", "stage_entry", "protocol", "workflow", "custom_entity", "aa_sequence", "dna_sequence", "batch", "box", "container", "location", "plate"])
    end
end
