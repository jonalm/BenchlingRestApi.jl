# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RnaOligo_allOf

    RnaOligoAllOf(;
        annotations=nothing,
        apiURL=nothing,
        bases=nothing,
        customNotation=nothing,
        customNotationName=nothing,
        helm=nothing,
        nucleotideType=nothing,
    )

    - annotations::Vector{RnaAnnotation} : Annotations on the Oligo.
    - apiURL::String
    - bases::String
    - customNotation::String : Representation of the oligo in the custom notation specified in the request. Null if no notation was specified.
    - customNotationName::String : Name of the custom notation specified in the request. Null if no notation was specified.
    - helm::String : Representation of the oligo in HELM syntax, including any chemical modifications
    - nucleotideType::String
"""
Base.@kwdef mutable struct RnaOligoAllOf <: OpenAPI.APIModel
    annotations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RnaAnnotation} }
    apiURL::Union{Nothing, String} = nothing
    bases::Union{Nothing, String} = nothing
    customNotation::Union{Nothing, String} = nothing
    customNotationName::Union{Nothing, String} = nothing
    helm::Union{Nothing, String} = nothing
    nucleotideType::Union{Nothing, String} = nothing

    function RnaOligoAllOf(annotations, apiURL, bases, customNotation, customNotationName, helm, nucleotideType, )
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("annotations"), annotations)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("bases"), bases)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("customNotation"), customNotation)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("customNotationName"), customNotationName)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("helm"), helm)
        OpenAPI.validate_property(RnaOligoAllOf, Symbol("nucleotideType"), nucleotideType)
        return new(annotations, apiURL, bases, customNotation, customNotationName, helm, nucleotideType, )
    end
end # type RnaOligoAllOf

const _property_types_RnaOligoAllOf = Dict{Symbol,String}(Symbol("annotations")=>"Vector{RnaAnnotation}", Symbol("apiURL")=>"String", Symbol("bases")=>"String", Symbol("customNotation")=>"String", Symbol("customNotationName")=>"String", Symbol("helm")=>"String", Symbol("nucleotideType")=>"String", )
OpenAPI.property_type(::Type{ RnaOligoAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RnaOligoAllOf[name]))}

function check_required(o::RnaOligoAllOf)
    true
end

function OpenAPI.validate_property(::Type{ RnaOligoAllOf }, name::Symbol, val)
end
