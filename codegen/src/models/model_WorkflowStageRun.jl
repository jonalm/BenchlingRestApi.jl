# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowStageRun

    WorkflowStageRun(;
        createdAt=nothing,
        id=nothing,
        name=nothing,
        status=nothing,
    )

    - createdAt::ZonedDateTime : DateTime at which the the stage run was created
    - id::String : ID of the stage run
    - name::String : Name of the stage run
    - status::String : Status of the stage run
"""
Base.@kwdef mutable struct WorkflowStageRun <: OpenAPI.APIModel
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing

    function WorkflowStageRun(createdAt, id, name, status, )
        OpenAPI.validate_property(WorkflowStageRun, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(WorkflowStageRun, Symbol("id"), id)
        OpenAPI.validate_property(WorkflowStageRun, Symbol("name"), name)
        OpenAPI.validate_property(WorkflowStageRun, Symbol("status"), status)
        return new(createdAt, id, name, status, )
    end
end # type WorkflowStageRun

const _property_types_WorkflowStageRun = Dict{Symbol,String}(Symbol("createdAt")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ WorkflowStageRun }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowStageRun[name]))}

function check_required(o::WorkflowStageRun)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowStageRun }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "WorkflowStageRun", :format, val, "date-time")
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "WorkflowStageRun", :enum, val, ["COMPLETED", "DISCARDED", "INITIALIZED"])
    end
end
