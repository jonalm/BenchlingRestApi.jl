# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PlateCreate

    PlateCreate(;
        barcode=nothing,
        containerSchemaId=nothing,
        fields=nothing,
        name=nothing,
        parentStorageId=nothing,
        projectId=nothing,
        schemaId=nothing,
        wells=nothing,
    )

    - barcode::String
    - containerSchemaId::String
    - fields::Dict{String, Field}
    - name::String
    - parentStorageId::String
    - projectId::String
    - schemaId::String
    - wells::Dict{String, PlateCreateWellsValue}
"""
Base.@kwdef mutable struct PlateCreate <: OpenAPI.APIModel
    barcode::Union{Nothing, String} = nothing
    containerSchemaId::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    name::Union{Nothing, String} = nothing
    parentStorageId::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    schemaId::Union{Nothing, String} = nothing
    wells::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, PlateCreateWellsValue} }

    function PlateCreate(barcode, containerSchemaId, fields, name, parentStorageId, projectId, schemaId, wells, )
        OpenAPI.validate_property(PlateCreate, Symbol("barcode"), barcode)
        OpenAPI.validate_property(PlateCreate, Symbol("containerSchemaId"), containerSchemaId)
        OpenAPI.validate_property(PlateCreate, Symbol("fields"), fields)
        OpenAPI.validate_property(PlateCreate, Symbol("name"), name)
        OpenAPI.validate_property(PlateCreate, Symbol("parentStorageId"), parentStorageId)
        OpenAPI.validate_property(PlateCreate, Symbol("projectId"), projectId)
        OpenAPI.validate_property(PlateCreate, Symbol("schemaId"), schemaId)
        OpenAPI.validate_property(PlateCreate, Symbol("wells"), wells)
        return new(barcode, containerSchemaId, fields, name, parentStorageId, projectId, schemaId, wells, )
    end
end # type PlateCreate

const _property_types_PlateCreate = Dict{Symbol,String}(Symbol("barcode")=>"String", Symbol("containerSchemaId")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("name")=>"String", Symbol("parentStorageId")=>"String", Symbol("projectId")=>"String", Symbol("schemaId")=>"String", Symbol("wells")=>"Dict{String, PlateCreateWellsValue}", )
OpenAPI.property_type(::Type{ PlateCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlateCreate[name]))}

function check_required(o::PlateCreate)
    o.schemaId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PlateCreate }, name::Symbol, val)
end
