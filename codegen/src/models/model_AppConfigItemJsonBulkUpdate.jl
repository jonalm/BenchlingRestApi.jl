# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AppConfigItemJsonBulkUpdate

    AppConfigItemJsonBulkUpdate(;
        type=nothing,
        value=nothing,
        id=nothing,
    )

    - type::String
    - value::String
    - id::String
"""
Base.@kwdef mutable struct AppConfigItemJsonBulkUpdate <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing

    function AppConfigItemJsonBulkUpdate(type, value, id, )
        OpenAPI.validate_property(AppConfigItemJsonBulkUpdate, Symbol("type"), type)
        OpenAPI.validate_property(AppConfigItemJsonBulkUpdate, Symbol("value"), value)
        OpenAPI.validate_property(AppConfigItemJsonBulkUpdate, Symbol("id"), id)
        return new(type, value, id, )
    end
end # type AppConfigItemJsonBulkUpdate

const _property_types_AppConfigItemJsonBulkUpdate = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("value")=>"String", Symbol("id")=>"String", )
OpenAPI.property_type(::Type{ AppConfigItemJsonBulkUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AppConfigItemJsonBulkUpdate[name]))}

function check_required(o::AppConfigItemJsonBulkUpdate)
    o.type === nothing && (return false)
    o.value === nothing && (return false)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AppConfigItemJsonBulkUpdate }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "AppConfigItemJsonBulkUpdate", :enum, val, ["json"])
    end
end
