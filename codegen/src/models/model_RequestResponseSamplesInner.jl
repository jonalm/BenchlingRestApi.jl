# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RequestResponse_samples_inner

    RequestResponseSamplesInner(;
        batch=nothing,
        entity=nothing,
        status=nothing,
    )

    - batch::RequestResponseSamplesInnerBatch
    - entity::RequestResponseSamplesInnerEntity
    - status::String : The status of the sample, based on the status of the stage run that generated it.
"""
Base.@kwdef mutable struct RequestResponseSamplesInner <: OpenAPI.APIModel
    batch = nothing # spec type: Union{ Nothing, RequestResponseSamplesInnerBatch }
    entity = nothing # spec type: Union{ Nothing, RequestResponseSamplesInnerEntity }
    status::Union{Nothing, String} = nothing

    function RequestResponseSamplesInner(batch, entity, status, )
        OpenAPI.validate_property(RequestResponseSamplesInner, Symbol("batch"), batch)
        OpenAPI.validate_property(RequestResponseSamplesInner, Symbol("entity"), entity)
        OpenAPI.validate_property(RequestResponseSamplesInner, Symbol("status"), status)
        return new(batch, entity, status, )
    end
end # type RequestResponseSamplesInner

const _property_types_RequestResponseSamplesInner = Dict{Symbol,String}(Symbol("batch")=>"RequestResponseSamplesInnerBatch", Symbol("entity")=>"RequestResponseSamplesInnerEntity", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ RequestResponseSamplesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RequestResponseSamplesInner[name]))}

function check_required(o::RequestResponseSamplesInner)
    true
end

function OpenAPI.validate_property(::Type{ RequestResponseSamplesInner }, name::Symbol, val)
    if name === Symbol("status")
        OpenAPI.validate_param(name, "RequestResponseSamplesInner", :enum, val, ["COMPLETED", "DISCARDED"])
    end
end
