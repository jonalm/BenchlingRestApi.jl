# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ResultsTableNotePart_allOf

    ResultsTableNotePartAllOf(;
        assayResultSchemaId=nothing,
        type=nothing,
    )

    - assayResultSchemaId::String
    - type::String
"""
Base.@kwdef mutable struct ResultsTableNotePartAllOf <: OpenAPI.APIModel
    assayResultSchemaId::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function ResultsTableNotePartAllOf(assayResultSchemaId, type, )
        OpenAPI.validate_property(ResultsTableNotePartAllOf, Symbol("assayResultSchemaId"), assayResultSchemaId)
        OpenAPI.validate_property(ResultsTableNotePartAllOf, Symbol("type"), type)
        return new(assayResultSchemaId, type, )
    end
end # type ResultsTableNotePartAllOf

const _property_types_ResultsTableNotePartAllOf = Dict{Symbol,String}(Symbol("assayResultSchemaId")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ ResultsTableNotePartAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ResultsTableNotePartAllOf[name]))}

function check_required(o::ResultsTableNotePartAllOf)
    true
end

function OpenAPI.validate_property(::Type{ ResultsTableNotePartAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ResultsTableNotePartAllOf", :enum, val, ["results_table"])
    end
end
