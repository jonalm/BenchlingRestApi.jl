# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LabAutomationTransform

    LabAutomationTransform(;
        apiURL=nothing,
        blobId=nothing,
        customTransformId=nothing,
        errors=nothing,
        id=nothing,
        inputGeneratorId=nothing,
        modifiedAt=nothing,
        outputProcessorId=nothing,
        status=nothing,
    )

    - apiURL::String : The canonical url of the transform in the API.
    - blobId::String
    - customTransformId::String
    - errors::LabAutomationBenchlingAppErrors
    - id::String
    - inputGeneratorId::String
    - modifiedAt::ZonedDateTime : DateTime the transform was last modified.
    - outputProcessorId::String
    - status::String
"""
Base.@kwdef mutable struct LabAutomationTransform <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    blobId::Union{Nothing, String} = nothing
    customTransformId::Union{Nothing, String} = nothing
    errors = nothing # spec type: Union{ Nothing, LabAutomationBenchlingAppErrors }
    id::Union{Nothing, String} = nothing
    inputGeneratorId::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    outputProcessorId::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing

    function LabAutomationTransform(apiURL, blobId, customTransformId, errors, id, inputGeneratorId, modifiedAt, outputProcessorId, status, )
        OpenAPI.validate_property(LabAutomationTransform, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("blobId"), blobId)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("customTransformId"), customTransformId)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("errors"), errors)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("id"), id)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("inputGeneratorId"), inputGeneratorId)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("outputProcessorId"), outputProcessorId)
        OpenAPI.validate_property(LabAutomationTransform, Symbol("status"), status)
        return new(apiURL, blobId, customTransformId, errors, id, inputGeneratorId, modifiedAt, outputProcessorId, status, )
    end
end # type LabAutomationTransform

const _property_types_LabAutomationTransform = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("blobId")=>"String", Symbol("customTransformId")=>"String", Symbol("errors")=>"LabAutomationBenchlingAppErrors", Symbol("id")=>"String", Symbol("inputGeneratorId")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("outputProcessorId")=>"String", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ LabAutomationTransform }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LabAutomationTransform[name]))}

function check_required(o::LabAutomationTransform)
    true
end

function OpenAPI.validate_property(::Type{ LabAutomationTransform }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "LabAutomationTransform", :format, val, "uri")
    end
    if name === Symbol("blobId")
        OpenAPI.validate_param(name, "LabAutomationTransform", :format, val, "uuid")
    end
    if name === Symbol("customTransformId")
        OpenAPI.validate_param(name, "LabAutomationTransform", :format, val, "uuid")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "LabAutomationTransform", :format, val, "date-time")
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "LabAutomationTransform", :enum, val, ["NOT_STARTED", "RUNNING", "FAILED", "SUCCEEDED"])
    end
end
