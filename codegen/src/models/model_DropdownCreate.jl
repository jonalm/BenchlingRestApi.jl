# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DropdownCreate

    DropdownCreate(;
        name=nothing,
        options=nothing,
        registryId=nothing,
    )

    - name::String : Name of the dropdown
    - options::Vector{DropdownOptionCreate} : Options to set for the dropdown
    - registryId::String : ID of registry in which to create the dropdown. Required if multiple registries exist.
"""
Base.@kwdef mutable struct DropdownCreate <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    options::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DropdownOptionCreate} }
    registryId::Union{Nothing, String} = nothing

    function DropdownCreate(name, options, registryId, )
        OpenAPI.validate_property(DropdownCreate, Symbol("name"), name)
        OpenAPI.validate_property(DropdownCreate, Symbol("options"), options)
        OpenAPI.validate_property(DropdownCreate, Symbol("registryId"), registryId)
        return new(name, options, registryId, )
    end
end # type DropdownCreate

const _property_types_DropdownCreate = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("options")=>"Vector{DropdownOptionCreate}", Symbol("registryId")=>"String", )
OpenAPI.property_type(::Type{ DropdownCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DropdownCreate[name]))}

function check_required(o::DropdownCreate)
    o.name === nothing && (return false)
    o.options === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DropdownCreate }, name::Symbol, val)
    if name === Symbol("registryId")
        OpenAPI.validate_param(name, "DropdownCreate", :pattern, val, r"^src_\w+")
    end
end
