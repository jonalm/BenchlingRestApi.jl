# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Dropdown
Dropdowns are registry-wide enums. Use dropdowns to standardize on spelling and naming conventions, especially for important metadata like resistance markers.

    Dropdown(;
        id=nothing,
        name=nothing,
        archiveRecord=nothing,
        options=nothing,
    )

    - id::String : ID of the dropdown
    - name::String : Name of the dropdown
    - archiveRecord::ArchiveRecord
    - options::Vector{DropdownOption} : Array of dropdown options
"""
Base.@kwdef mutable struct Dropdown <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    options::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DropdownOption} }

    function Dropdown(id, name, archiveRecord, options, )
        OpenAPI.validate_property(Dropdown, Symbol("id"), id)
        OpenAPI.validate_property(Dropdown, Symbol("name"), name)
        OpenAPI.validate_property(Dropdown, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Dropdown, Symbol("options"), options)
        return new(id, name, archiveRecord, options, )
    end
end # type Dropdown

const _property_types_Dropdown = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("archiveRecord")=>"ArchiveRecord", Symbol("options")=>"Vector{DropdownOption}", )
OpenAPI.property_type(::Type{ Dropdown }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Dropdown[name]))}

function check_required(o::Dropdown)
    true
end

function OpenAPI.validate_property(::Type{ Dropdown }, name::Symbol, val)
end
