# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BoxSchema

    BoxSchema(;
        archiveRecord=nothing,
        fieldDefinitions=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        prefix=nothing,
        registryId=nothing,
        containerSchema=nothing,
        height=nothing,
        width=nothing,
    )

    - archiveRecord::ArchiveRecord
    - fieldDefinitions::Vector{SchemaFieldDefinitionsInner}
    - id::String
    - name::String
    - type::String
    - prefix::String
    - registryId::String
    - containerSchema::BoxSchemaAllOfContainerSchema
    - height::Float64
    - width::Float64
"""
Base.@kwdef mutable struct BoxSchema <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    fieldDefinitions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SchemaFieldDefinitionsInner} }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    prefix::Union{Nothing, String} = nothing
    registryId::Union{Nothing, String} = nothing
    containerSchema = nothing # spec type: Union{ Nothing, BoxSchemaAllOfContainerSchema }
    height::Union{Nothing, Float64} = nothing
    width::Union{Nothing, Float64} = nothing

    function BoxSchema(archiveRecord, fieldDefinitions, id, name, type, prefix, registryId, containerSchema, height, width, )
        OpenAPI.validate_property(BoxSchema, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(BoxSchema, Symbol("fieldDefinitions"), fieldDefinitions)
        OpenAPI.validate_property(BoxSchema, Symbol("id"), id)
        OpenAPI.validate_property(BoxSchema, Symbol("name"), name)
        OpenAPI.validate_property(BoxSchema, Symbol("type"), type)
        OpenAPI.validate_property(BoxSchema, Symbol("prefix"), prefix)
        OpenAPI.validate_property(BoxSchema, Symbol("registryId"), registryId)
        OpenAPI.validate_property(BoxSchema, Symbol("containerSchema"), containerSchema)
        OpenAPI.validate_property(BoxSchema, Symbol("height"), height)
        OpenAPI.validate_property(BoxSchema, Symbol("width"), width)
        return new(archiveRecord, fieldDefinitions, id, name, type, prefix, registryId, containerSchema, height, width, )
    end
end # type BoxSchema

const _property_types_BoxSchema = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("fieldDefinitions")=>"Vector{SchemaFieldDefinitionsInner}", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("prefix")=>"String", Symbol("registryId")=>"String", Symbol("containerSchema")=>"BoxSchemaAllOfContainerSchema", Symbol("height")=>"Float64", Symbol("width")=>"Float64", )
OpenAPI.property_type(::Type{ BoxSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BoxSchema[name]))}

function check_required(o::BoxSchema)
    true
end

function OpenAPI.validate_property(::Type{ BoxSchema }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "BoxSchema", :enum, val, ["box"])
    end
end
