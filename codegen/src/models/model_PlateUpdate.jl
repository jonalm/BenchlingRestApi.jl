# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PlateUpdate

    PlateUpdate(;
        fields=nothing,
        name=nothing,
        parentStorageId=nothing,
        projectId=nothing,
    )

    - fields::Dict{String, Field}
    - name::String
    - parentStorageId::String
    - projectId::String
"""
Base.@kwdef mutable struct PlateUpdate <: OpenAPI.APIModel
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    name::Union{Nothing, String} = nothing
    parentStorageId::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing

    function PlateUpdate(fields, name, parentStorageId, projectId, )
        OpenAPI.validate_property(PlateUpdate, Symbol("fields"), fields)
        OpenAPI.validate_property(PlateUpdate, Symbol("name"), name)
        OpenAPI.validate_property(PlateUpdate, Symbol("parentStorageId"), parentStorageId)
        OpenAPI.validate_property(PlateUpdate, Symbol("projectId"), projectId)
        return new(fields, name, parentStorageId, projectId, )
    end
end # type PlateUpdate

const _property_types_PlateUpdate = Dict{Symbol,String}(Symbol("fields")=>"Dict{String, Field}", Symbol("name")=>"String", Symbol("parentStorageId")=>"String", Symbol("projectId")=>"String", )
OpenAPI.property_type(::Type{ PlateUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlateUpdate[name]))}

function check_required(o::PlateUpdate)
    true
end

function OpenAPI.validate_property(::Type{ PlateUpdate }, name::Symbol, val)
end
