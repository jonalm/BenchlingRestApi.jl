# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LabAutomationTransformUpdate

    LabAutomationTransformUpdate(;
        blobId=nothing,
        errors=nothing,
    )

    - blobId::String
    - errors::Vector{LabAutomationBenchlingAppError}
"""
Base.@kwdef mutable struct LabAutomationTransformUpdate <: OpenAPI.APIModel
    blobId::Union{Nothing, String} = nothing
    errors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LabAutomationBenchlingAppError} }

    function LabAutomationTransformUpdate(blobId, errors, )
        OpenAPI.validate_property(LabAutomationTransformUpdate, Symbol("blobId"), blobId)
        OpenAPI.validate_property(LabAutomationTransformUpdate, Symbol("errors"), errors)
        return new(blobId, errors, )
    end
end # type LabAutomationTransformUpdate

const _property_types_LabAutomationTransformUpdate = Dict{Symbol,String}(Symbol("blobId")=>"String", Symbol("errors")=>"Vector{LabAutomationBenchlingAppError}", )
OpenAPI.property_type(::Type{ LabAutomationTransformUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LabAutomationTransformUpdate[name]))}

function check_required(o::LabAutomationTransformUpdate)
    true
end

function OpenAPI.validate_property(::Type{ LabAutomationTransformUpdate }, name::Symbol, val)
    if name === Symbol("blobId")
        OpenAPI.validate_param(name, "LabAutomationTransformUpdate", :format, val, "uuid")
    end
end
