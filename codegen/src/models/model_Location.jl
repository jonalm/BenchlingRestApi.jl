# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Location

    Location(;
        archiveRecord=nothing,
        barcode=nothing,
        createdAt=nothing,
        creator=nothing,
        fields=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        parentStorageId=nothing,
        schema=nothing,
        webURL=nothing,
    )

    - archiveRecord::ArchiveRecord
    - barcode::String
    - createdAt::String
    - creator::UserSummary
    - fields::Dict{String, Field}
    - id::String
    - modifiedAt::String
    - name::String
    - parentStorageId::String
    - schema::SchemaSummary
    - webURL::String
"""
Base.@kwdef mutable struct Location <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    barcode::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, String} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    parentStorageId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaSummary }
    webURL::Union{Nothing, String} = nothing

    function Location(archiveRecord, barcode, createdAt, creator, fields, id, modifiedAt, name, parentStorageId, schema, webURL, )
        OpenAPI.validate_property(Location, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Location, Symbol("barcode"), barcode)
        OpenAPI.validate_property(Location, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Location, Symbol("creator"), creator)
        OpenAPI.validate_property(Location, Symbol("fields"), fields)
        OpenAPI.validate_property(Location, Symbol("id"), id)
        OpenAPI.validate_property(Location, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Location, Symbol("name"), name)
        OpenAPI.validate_property(Location, Symbol("parentStorageId"), parentStorageId)
        OpenAPI.validate_property(Location, Symbol("schema"), schema)
        OpenAPI.validate_property(Location, Symbol("webURL"), webURL)
        return new(archiveRecord, barcode, createdAt, creator, fields, id, modifiedAt, name, parentStorageId, schema, webURL, )
    end
end # type Location

const _property_types_Location = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("barcode")=>"String", Symbol("createdAt")=>"String", Symbol("creator")=>"UserSummary", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("modifiedAt")=>"String", Symbol("name")=>"String", Symbol("parentStorageId")=>"String", Symbol("schema")=>"SchemaSummary", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ Location }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Location[name]))}

function check_required(o::Location)
    true
end

function OpenAPI.validate_property(::Type{ Location }, name::Symbol, val)
end
