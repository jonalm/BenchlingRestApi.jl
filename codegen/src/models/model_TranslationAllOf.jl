# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Translation_allOf

    TranslationAllOf(;
        aminoAcids=nothing,
        var"end"=nothing,
        geneticCode=nothing,
        regions=nothing,
        start=nothing,
        strand=nothing,
    )

    - aminoAcids::String
    - var"end"::Int64
    - geneticCode::String : The genetic code to use when translating the nucleotide sequence into amino acids.
    - regions::Vector{TranslationAllOfRegions}
    - start::Int64
    - strand::Int64
"""
Base.@kwdef mutable struct TranslationAllOf <: OpenAPI.APIModel
    aminoAcids::Union{Nothing, String} = nothing
    var"end"::Union{Nothing, Int64} = nothing
    geneticCode::Union{Nothing, String} = nothing
    regions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TranslationAllOfRegions} }
    start::Union{Nothing, Int64} = nothing
    strand::Union{Nothing, Int64} = nothing

    function TranslationAllOf(aminoAcids, var"end", geneticCode, regions, start, strand, )
        OpenAPI.validate_property(TranslationAllOf, Symbol("aminoAcids"), aminoAcids)
        OpenAPI.validate_property(TranslationAllOf, Symbol("end"), var"end")
        OpenAPI.validate_property(TranslationAllOf, Symbol("geneticCode"), geneticCode)
        OpenAPI.validate_property(TranslationAllOf, Symbol("regions"), regions)
        OpenAPI.validate_property(TranslationAllOf, Symbol("start"), start)
        OpenAPI.validate_property(TranslationAllOf, Symbol("strand"), strand)
        return new(aminoAcids, var"end", geneticCode, regions, start, strand, )
    end
end # type TranslationAllOf

const _property_types_TranslationAllOf = Dict{Symbol,String}(Symbol("aminoAcids")=>"String", Symbol("end")=>"Int64", Symbol("geneticCode")=>"String", Symbol("regions")=>"Vector{TranslationAllOfRegions}", Symbol("start")=>"Int64", Symbol("strand")=>"Int64", )
OpenAPI.property_type(::Type{ TranslationAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TranslationAllOf[name]))}

function check_required(o::TranslationAllOf)
    true
end

function OpenAPI.validate_property(::Type{ TranslationAllOf }, name::Symbol, val)
    if name === Symbol("geneticCode")
        OpenAPI.validate_param(name, "TranslationAllOf", :enum, val, ["STANDARD", "VERTEBRATE_MITOCHONDRIAL", "YEAST_MITOCHONDRIAL", "MOLD_PROTOZOAN_COELENTERATE_MITOCHONDRIAL_MYCOPLASMA_SPIROPLASMA", "INVERTEBRATE_MITOCHONDRIAL", "CILIATE_DASYCLADACEAN_HEXAMITA_NUCLEAR", "ECHINODERM_FLATWORM_MITOCHONDRIAL", "EUPLOTID_NUCLEAR", "BACTERIAL_ARCHAEAL_PLANT_PLASTID", "ALTERNATIVE_YEAST_NUCLEAR", "ASCIDIAN_MITOCHONDRIAL", "ALTERNATIVE_FLATWORM_MITOCHONDRIAL", "CHLOROPHYCEAN_MITOCHONDRIAL", "TREMATODE_MITOCHONDRIAL", "SCENEDESMUS_OBLIQUUS_MITOCHONDRIAL", "THRAUSTOCHYTRIUM_MITOCHONDRIAL", "RHABDOPLEURIDAE_MITOCHONDRIAL", "CANDIDATE_DIVISION_SR1_GRACILIBACTERIA", "PACHYSOLEN_TANNOPHILUS_NUCLEAR", "MESODINIUM_NUCLEAR", "PERITRICH_NUCLEAR", "CEPHALODISCIDAE_MITOCHONDRIAL_UAA_TYR"])
    end
end
