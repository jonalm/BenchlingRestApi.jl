# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BlobPartCreate

    BlobPartCreate(;
        data64=nothing,
        md5=nothing,
        partNumber=nothing,
    )

    - data64::String
    - md5::String
    - partNumber::Int64 : An integer between 1 to 10,000, inclusive. The part number must be unique per part and indicates the ordering of the part inside the final blob. The part numbers do not need to be consecutive. 
"""
Base.@kwdef mutable struct BlobPartCreate <: OpenAPI.APIModel
    data64::Union{Nothing, String} = nothing
    md5::Union{Nothing, String} = nothing
    partNumber::Union{Nothing, Int64} = nothing

    function BlobPartCreate(data64, md5, partNumber, )
        OpenAPI.validate_property(BlobPartCreate, Symbol("data64"), data64)
        OpenAPI.validate_property(BlobPartCreate, Symbol("md5"), md5)
        OpenAPI.validate_property(BlobPartCreate, Symbol("partNumber"), partNumber)
        return new(data64, md5, partNumber, )
    end
end # type BlobPartCreate

const _property_types_BlobPartCreate = Dict{Symbol,String}(Symbol("data64")=>"String", Symbol("md5")=>"String", Symbol("partNumber")=>"Int64", )
OpenAPI.property_type(::Type{ BlobPartCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BlobPartCreate[name]))}

function check_required(o::BlobPartCreate)
    o.data64 === nothing && (return false)
    o.md5 === nothing && (return false)
    o.partNumber === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BlobPartCreate }, name::Symbol, val)
    if name === Symbol("data64")
        OpenAPI.validate_param(name, "BlobPartCreate", :format, val, "bytes")
    end
    if name === Symbol("partNumber")
        OpenAPI.validate_param(name, "BlobPartCreate", :maximum, val, 10000, false)
        OpenAPI.validate_param(name, "BlobPartCreate", :minimum, val, 1, false)
    end
end
