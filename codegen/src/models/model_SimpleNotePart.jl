# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SimpleNotePart
Simple note parts include the following types: - &#39;text&#39;: plain text - &#39;code&#39;: preformatted code block - &#39;list_bullet&#39;: one \&quot;line\&quot; of a bulleted list - &#39;list_number&#39;: one \&quot;line\&quot; of a numbered list 

    SimpleNotePart(;
        indentation=0,
        type=nothing,
        links=nothing,
        text=nothing,
    )

    - indentation::Int64 : All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
    - type::String
    - links::Vector{EntryLink} : Array of links referenced in text via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
    - text::String : The textual contents of the note.
"""
Base.@kwdef mutable struct SimpleNotePart <: OpenAPI.APIModel
    indentation::Union{Nothing, Int64} = 0
    type::Union{Nothing, String} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryLink} }
    text::Union{Nothing, String} = nothing

    function SimpleNotePart(indentation, type, links, text, )
        OpenAPI.validate_property(SimpleNotePart, Symbol("indentation"), indentation)
        OpenAPI.validate_property(SimpleNotePart, Symbol("type"), type)
        OpenAPI.validate_property(SimpleNotePart, Symbol("links"), links)
        OpenAPI.validate_property(SimpleNotePart, Symbol("text"), text)
        return new(indentation, type, links, text, )
    end
end # type SimpleNotePart

const _property_types_SimpleNotePart = Dict{Symbol,String}(Symbol("indentation")=>"Int64", Symbol("type")=>"String", Symbol("links")=>"Vector{EntryLink}", Symbol("text")=>"String", )
OpenAPI.property_type(::Type{ SimpleNotePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SimpleNotePart[name]))}

function check_required(o::SimpleNotePart)
    true
end

function OpenAPI.validate_property(::Type{ SimpleNotePart }, name::Symbol, val)
    if name === Symbol("indentation")
        OpenAPI.validate_param(name, "SimpleNotePart", :minimum, val, 0, false)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "SimpleNotePart", :enum, val, ["text", "code", "list_bullet", "list_number"])
    end
end
