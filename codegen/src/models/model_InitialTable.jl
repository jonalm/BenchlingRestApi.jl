# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InitialTable

    InitialTable(;
        csvData=nothing,
        templateTableID=nothing,
    )

    - csvData::String : blobId of an uploaded csv blob. The CSV should be formatted with column headers of &#x60;columnId&#x60; which can be found in the [EntryTemplate](#/components/schemas/EntryTemplate). For more information on uploading a blob, [click here](https://docs.benchling.com/docs/uploading-a-blob-to-benchling).
    - templateTableID::String : Template table API ID
"""
Base.@kwdef mutable struct InitialTable <: OpenAPI.APIModel
    csvData::Union{Nothing, String} = nothing
    templateTableID::Union{Nothing, String} = nothing

    function InitialTable(csvData, templateTableID, )
        OpenAPI.validate_property(InitialTable, Symbol("csvData"), csvData)
        OpenAPI.validate_property(InitialTable, Symbol("templateTableID"), templateTableID)
        return new(csvData, templateTableID, )
    end
end # type InitialTable

const _property_types_InitialTable = Dict{Symbol,String}(Symbol("csvData")=>"String", Symbol("templateTableID")=>"String", )
OpenAPI.property_type(::Type{ InitialTable }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InitialTable[name]))}

function check_required(o::InitialTable)
    true
end

function OpenAPI.validate_property(::Type{ InitialTable }, name::Symbol, val)
end
