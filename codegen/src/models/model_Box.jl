# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Box

    Box(;
        archiveRecord=nothing,
        barcode=nothing,
        createdAt=nothing,
        creator=nothing,
        emptyContainers=nothing,
        emptyPositions=nothing,
        fields=nothing,
        filledPositions=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        parentStorageId=nothing,
        projectId=nothing,
        schema=nothing,
        size=nothing,
        webURL=nothing,
    )

    - archiveRecord::ArchiveRecord
    - barcode::String
    - createdAt::ZonedDateTime
    - creator::UserSummary
    - emptyContainers::Int64 : The number of containers in the box that have no contents.
    - emptyPositions::Int64 : The number of empty positions for adding additional containers in the box.
    - fields::Dict{String, Field}
    - filledPositions::Int64 : The number of containers currently in the box.
    - id::String
    - modifiedAt::ZonedDateTime
    - name::String
    - parentStorageId::String
    - projectId::String
    - schema::SchemaProperty3
    - size::Int64 : The size of the box (i.e. how many containers it can store).
    - webURL::String
"""
Base.@kwdef mutable struct Box <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    barcode::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    emptyContainers::Union{Nothing, Int64} = nothing
    emptyPositions::Union{Nothing, Int64} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    filledPositions::Union{Nothing, Int64} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    parentStorageId::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty3 }
    size::Union{Nothing, Int64} = nothing
    webURL::Union{Nothing, String} = nothing

    function Box(archiveRecord, barcode, createdAt, creator, emptyContainers, emptyPositions, fields, filledPositions, id, modifiedAt, name, parentStorageId, projectId, schema, size, webURL, )
        OpenAPI.validate_property(Box, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Box, Symbol("barcode"), barcode)
        OpenAPI.validate_property(Box, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Box, Symbol("creator"), creator)
        OpenAPI.validate_property(Box, Symbol("emptyContainers"), emptyContainers)
        OpenAPI.validate_property(Box, Symbol("emptyPositions"), emptyPositions)
        OpenAPI.validate_property(Box, Symbol("fields"), fields)
        OpenAPI.validate_property(Box, Symbol("filledPositions"), filledPositions)
        OpenAPI.validate_property(Box, Symbol("id"), id)
        OpenAPI.validate_property(Box, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Box, Symbol("name"), name)
        OpenAPI.validate_property(Box, Symbol("parentStorageId"), parentStorageId)
        OpenAPI.validate_property(Box, Symbol("projectId"), projectId)
        OpenAPI.validate_property(Box, Symbol("schema"), schema)
        OpenAPI.validate_property(Box, Symbol("size"), size)
        OpenAPI.validate_property(Box, Symbol("webURL"), webURL)
        return new(archiveRecord, barcode, createdAt, creator, emptyContainers, emptyPositions, fields, filledPositions, id, modifiedAt, name, parentStorageId, projectId, schema, size, webURL, )
    end
end # type Box

const _property_types_Box = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("barcode")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"UserSummary", Symbol("emptyContainers")=>"Int64", Symbol("emptyPositions")=>"Int64", Symbol("fields")=>"Dict{String, Field}", Symbol("filledPositions")=>"Int64", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("parentStorageId")=>"String", Symbol("projectId")=>"String", Symbol("schema")=>"SchemaProperty3", Symbol("size")=>"Int64", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ Box }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Box[name]))}

function check_required(o::Box)
    true
end

function OpenAPI.validate_property(::Type{ Box }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Box", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "Box", :format, val, "date-time")
    end
end
