# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""IngredientWriteParams

    IngredientWriteParams(;
        amount=nothing,
        catalogIdentifier=nothing,
        componentEntityId=nothing,
        componentLotContainerId=nothing,
        componentLotEntityId=nothing,
        componentLotText=nothing,
        notes=nothing,
        units=nothing,
    )

    - amount::String : The amount value of this ingredient in its mixture, in string format (to preserve full precision). Pair with &#x60;units&#x60;. Supports scientific notation (1.23e4). One ingredient on this mixture can have an amount value of &#x60;\&quot;QS\&quot;&#x60;. 
    - catalogIdentifier::String
    - componentEntityId::String : The entity that uniquely identifies this component.
    - componentLotContainerId::String : The container representing the component lot for this ingredient. This is only writable if the mixture schema supports component lots in \&quot;inventory\&quot; format.
    - componentLotEntityId::String : The entity representing the component lot for this ingredient. This is only writable if the mixture schema supports component lots in \&quot;inventory\&quot; format.
    - componentLotText::String : Text representing the component lot for this ingredient. This is only writable if the mixture schema supports component lots in \&quot;text\&quot; format.
    - notes::String
    - units::IngredientMeasurementUnits
"""
Base.@kwdef mutable struct IngredientWriteParams <: OpenAPI.APIModel
    amount::Union{Nothing, String} = nothing
    catalogIdentifier::Union{Nothing, String} = nothing
    componentEntityId::Union{Nothing, String} = nothing
    componentLotContainerId::Union{Nothing, String} = nothing
    componentLotEntityId::Union{Nothing, String} = nothing
    componentLotText::Union{Nothing, String} = nothing
    notes::Union{Nothing, String} = nothing
    units = nothing # spec type: Union{ Nothing, IngredientMeasurementUnits }

    function IngredientWriteParams(amount, catalogIdentifier, componentEntityId, componentLotContainerId, componentLotEntityId, componentLotText, notes, units, )
        OpenAPI.validate_property(IngredientWriteParams, Symbol("amount"), amount)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("catalogIdentifier"), catalogIdentifier)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("componentEntityId"), componentEntityId)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("componentLotContainerId"), componentLotContainerId)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("componentLotEntityId"), componentLotEntityId)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("componentLotText"), componentLotText)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("notes"), notes)
        OpenAPI.validate_property(IngredientWriteParams, Symbol("units"), units)
        return new(amount, catalogIdentifier, componentEntityId, componentLotContainerId, componentLotEntityId, componentLotText, notes, units, )
    end
end # type IngredientWriteParams

const _property_types_IngredientWriteParams = Dict{Symbol,String}(Symbol("amount")=>"String", Symbol("catalogIdentifier")=>"String", Symbol("componentEntityId")=>"String", Symbol("componentLotContainerId")=>"String", Symbol("componentLotEntityId")=>"String", Symbol("componentLotText")=>"String", Symbol("notes")=>"String", Symbol("units")=>"IngredientMeasurementUnits", )
OpenAPI.property_type(::Type{ IngredientWriteParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IngredientWriteParams[name]))}

function check_required(o::IngredientWriteParams)
    o.amount === nothing && (return false)
    o.catalogIdentifier === nothing && (return false)
    o.componentEntityId === nothing && (return false)
    o.componentLotContainerId === nothing && (return false)
    o.componentLotEntityId === nothing && (return false)
    o.componentLotText === nothing && (return false)
    o.notes === nothing && (return false)
    o.units === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IngredientWriteParams }, name::Symbol, val)
end
