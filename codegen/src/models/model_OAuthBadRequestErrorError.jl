# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OAuthBadRequestError_error

    OAuthBadRequestErrorError(;
        message=nothing,
        type=nothing,
        userMessage=nothing,
    )

    - message::String
    - type::String
    - userMessage::String
"""
Base.@kwdef mutable struct OAuthBadRequestErrorError <: OpenAPI.APIModel
    message::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    userMessage::Union{Nothing, String} = nothing

    function OAuthBadRequestErrorError(message, type, userMessage, )
        OpenAPI.validate_property(OAuthBadRequestErrorError, Symbol("message"), message)
        OpenAPI.validate_property(OAuthBadRequestErrorError, Symbol("type"), type)
        OpenAPI.validate_property(OAuthBadRequestErrorError, Symbol("userMessage"), userMessage)
        return new(message, type, userMessage, )
    end
end # type OAuthBadRequestErrorError

const _property_types_OAuthBadRequestErrorError = Dict{Symbol,String}(Symbol("message")=>"String", Symbol("type")=>"String", Symbol("userMessage")=>"String", )
OpenAPI.property_type(::Type{ OAuthBadRequestErrorError }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OAuthBadRequestErrorError[name]))}

function check_required(o::OAuthBadRequestErrorError)
    true
end

function OpenAPI.validate_property(::Type{ OAuthBadRequestErrorError }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "OAuthBadRequestErrorError", :enum, val, ["invalid_request", "invalid_grant", "unauthorized_client", "unsupported_grant_type"])
    end
end
