# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Monomer

    Monomer(;
        archiveRecord=nothing,
        attachmentPoints=nothing,
        calculatedMolecularWeight=nothing,
        canonicalSmiles=nothing,
        createdAt=nothing,
        customMolecularWeight=nothing,
        id=nothing,
        modifiedAt=nothing,
        monomerType=nothing,
        name=nothing,
        naturalAnalog=nothing,
        polymerType=nothing,
        symbol=nothing,
        visualColor=nothing,
        visualSymbol=nothing,
    )

    - archiveRecord::ArchiveRecord
    - attachmentPoints::Vector{String} : A list of the capping group present at each location where the monomer can form a bond with other monomers
    - calculatedMolecularWeight::Float64 : The molecular weight of the monomer as calculated by RDKit based on the monomer chemical structure
    - canonicalSmiles::String : The canonicalized chemical structure in SMILES format.
    - createdAt::ZonedDateTime : DateTime the monomer was created.
    - customMolecularWeight::Float64 : Optional molecular weight value that the user can provide to override the calculated molecular weight
    - id::String : ID of the monomer
    - modifiedAt::ZonedDateTime : DateTime the monomer was last modified.
    - monomerType::MonomerType
    - name::String : Name of the monomer
    - naturalAnalog::String : Symbol for the natural equivalent of the monomer. Acceptable natural analog values include IUPAC bases, r, and p.
    - polymerType::MonomerPolymerType
    - symbol::String : User-defined identifier of the monomer, unique on the monomer type.
    - visualColor::String : The hex color code of the monomer visual symbol
    - visualSymbol::MonomerVisualSymbol
"""
Base.@kwdef mutable struct Monomer <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    attachmentPoints::Union{Nothing, Vector{String}} = nothing
    calculatedMolecularWeight::Union{Nothing, Float64} = nothing
    canonicalSmiles::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    customMolecularWeight::Union{Nothing, Float64} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    monomerType = nothing # spec type: Union{ Nothing, MonomerType }
    name::Union{Nothing, String} = nothing
    naturalAnalog::Union{Nothing, String} = nothing
    polymerType = nothing # spec type: Union{ Nothing, MonomerPolymerType }
    symbol::Union{Nothing, String} = nothing
    visualColor::Union{Nothing, String} = nothing
    visualSymbol = nothing # spec type: Union{ Nothing, MonomerVisualSymbol }

    function Monomer(archiveRecord, attachmentPoints, calculatedMolecularWeight, canonicalSmiles, createdAt, customMolecularWeight, id, modifiedAt, monomerType, name, naturalAnalog, polymerType, symbol, visualColor, visualSymbol, )
        OpenAPI.validate_property(Monomer, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Monomer, Symbol("attachmentPoints"), attachmentPoints)
        OpenAPI.validate_property(Monomer, Symbol("calculatedMolecularWeight"), calculatedMolecularWeight)
        OpenAPI.validate_property(Monomer, Symbol("canonicalSmiles"), canonicalSmiles)
        OpenAPI.validate_property(Monomer, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Monomer, Symbol("customMolecularWeight"), customMolecularWeight)
        OpenAPI.validate_property(Monomer, Symbol("id"), id)
        OpenAPI.validate_property(Monomer, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Monomer, Symbol("monomerType"), monomerType)
        OpenAPI.validate_property(Monomer, Symbol("name"), name)
        OpenAPI.validate_property(Monomer, Symbol("naturalAnalog"), naturalAnalog)
        OpenAPI.validate_property(Monomer, Symbol("polymerType"), polymerType)
        OpenAPI.validate_property(Monomer, Symbol("symbol"), symbol)
        OpenAPI.validate_property(Monomer, Symbol("visualColor"), visualColor)
        OpenAPI.validate_property(Monomer, Symbol("visualSymbol"), visualSymbol)
        return new(archiveRecord, attachmentPoints, calculatedMolecularWeight, canonicalSmiles, createdAt, customMolecularWeight, id, modifiedAt, monomerType, name, naturalAnalog, polymerType, symbol, visualColor, visualSymbol, )
    end
end # type Monomer

const _property_types_Monomer = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("attachmentPoints")=>"Vector{String}", Symbol("calculatedMolecularWeight")=>"Float64", Symbol("canonicalSmiles")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("customMolecularWeight")=>"Float64", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("monomerType")=>"MonomerType", Symbol("name")=>"String", Symbol("naturalAnalog")=>"String", Symbol("polymerType")=>"MonomerPolymerType", Symbol("symbol")=>"String", Symbol("visualColor")=>"String", Symbol("visualSymbol")=>"MonomerVisualSymbol", )
OpenAPI.property_type(::Type{ Monomer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Monomer[name]))}

function check_required(o::Monomer)
    true
end

function OpenAPI.validate_property(::Type{ Monomer }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Monomer", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "Monomer", :format, val, "date-time")
    end
end
