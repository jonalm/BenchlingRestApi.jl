# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AlignedNucleotideSequence

    AlignedNucleotideSequence(;
        bases=nothing,
        name=nothing,
        pairwiseIdentity=nothing,
        sequenceId=nothing,
        trimEnd=nothing,
        trimStart=nothing,
    )

    - bases::String
    - name::String
    - pairwiseIdentity::Float32 : Fraction of bases between trimStart and trimEnd that match the template bases. Only present for Template Alignments; Will be empty for Consensus Alignments. 
    - sequenceId::String
    - trimEnd::Int64
    - trimStart::Int64
"""
Base.@kwdef mutable struct AlignedNucleotideSequence <: OpenAPI.APIModel
    bases::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    pairwiseIdentity::Union{Nothing, Float32} = nothing
    sequenceId::Union{Nothing, String} = nothing
    trimEnd::Union{Nothing, Int64} = nothing
    trimStart::Union{Nothing, Int64} = nothing

    function AlignedNucleotideSequence(bases, name, pairwiseIdentity, sequenceId, trimEnd, trimStart, )
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("bases"), bases)
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("name"), name)
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("pairwiseIdentity"), pairwiseIdentity)
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("sequenceId"), sequenceId)
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("trimEnd"), trimEnd)
        OpenAPI.validate_property(AlignedNucleotideSequence, Symbol("trimStart"), trimStart)
        return new(bases, name, pairwiseIdentity, sequenceId, trimEnd, trimStart, )
    end
end # type AlignedNucleotideSequence

const _property_types_AlignedNucleotideSequence = Dict{Symbol,String}(Symbol("bases")=>"String", Symbol("name")=>"String", Symbol("pairwiseIdentity")=>"Float32", Symbol("sequenceId")=>"String", Symbol("trimEnd")=>"Int64", Symbol("trimStart")=>"Int64", )
OpenAPI.property_type(::Type{ AlignedNucleotideSequence }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AlignedNucleotideSequence[name]))}

function check_required(o::AlignedNucleotideSequence)
    true
end

function OpenAPI.validate_property(::Type{ AlignedNucleotideSequence }, name::Symbol, val)
    if name === Symbol("pairwiseIdentity")
        OpenAPI.validate_param(name, "AlignedNucleotideSequence", :format, val, "float")
    end
end
