# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DnaAlignment

    DnaAlignment(;
        apiURL=nothing,
        createdAt=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        referenceSequenceId=nothing,
        webURL=nothing,
        alignedSequences=nothing,
    )

    - apiURL::String : The canonical url of the DNA Alignment in the API.
    - createdAt::ZonedDateTime : DateTime the DNA Alignment was created
    - id::String
    - modifiedAt::ZonedDateTime : DateTime the DNA Alignment was last modified
    - name::String
    - referenceSequenceId::String : The ID of the template or consensus DNA Sequence associated with the DNA Alignment
    - webURL::String : The Benchling web UI url to view the DNA Alignment
    - alignedSequences::Vector{AlignedSequence}
"""
Base.@kwdef mutable struct DnaAlignment <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    referenceSequenceId::Union{Nothing, String} = nothing
    webURL::Union{Nothing, String} = nothing
    alignedSequences::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AlignedSequence} }

    function DnaAlignment(apiURL, createdAt, id, modifiedAt, name, referenceSequenceId, webURL, alignedSequences, )
        OpenAPI.validate_property(DnaAlignment, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(DnaAlignment, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(DnaAlignment, Symbol("id"), id)
        OpenAPI.validate_property(DnaAlignment, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(DnaAlignment, Symbol("name"), name)
        OpenAPI.validate_property(DnaAlignment, Symbol("referenceSequenceId"), referenceSequenceId)
        OpenAPI.validate_property(DnaAlignment, Symbol("webURL"), webURL)
        OpenAPI.validate_property(DnaAlignment, Symbol("alignedSequences"), alignedSequences)
        return new(apiURL, createdAt, id, modifiedAt, name, referenceSequenceId, webURL, alignedSequences, )
    end
end # type DnaAlignment

const _property_types_DnaAlignment = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("referenceSequenceId")=>"String", Symbol("webURL")=>"String", Symbol("alignedSequences")=>"Vector{AlignedSequence}", )
OpenAPI.property_type(::Type{ DnaAlignment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DnaAlignment[name]))}

function check_required(o::DnaAlignment)
    true
end

function OpenAPI.validate_property(::Type{ DnaAlignment }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "DnaAlignment", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "DnaAlignment", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "DnaAlignment", :format, val, "date-time")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "DnaAlignment", :format, val, "uri")
    end
end
