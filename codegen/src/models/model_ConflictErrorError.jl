# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConflictError_error

    ConflictErrorError(;
        message=nothing,
        type=nothing,
        userMessage=nothing,
        conflicts=nothing,
    )

    - message::String
    - type::String
    - userMessage::String
    - conflicts::Vector{Any}
"""
Base.@kwdef mutable struct ConflictErrorError <: OpenAPI.APIModel
    message::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    userMessage::Union{Nothing, String} = nothing
    conflicts::Union{Nothing, Vector{Any}} = nothing

    function ConflictErrorError(message, type, userMessage, conflicts, )
        OpenAPI.validate_property(ConflictErrorError, Symbol("message"), message)
        OpenAPI.validate_property(ConflictErrorError, Symbol("type"), type)
        OpenAPI.validate_property(ConflictErrorError, Symbol("userMessage"), userMessage)
        OpenAPI.validate_property(ConflictErrorError, Symbol("conflicts"), conflicts)
        return new(message, type, userMessage, conflicts, )
    end
end # type ConflictErrorError

const _property_types_ConflictErrorError = Dict{Symbol,String}(Symbol("message")=>"String", Symbol("type")=>"String", Symbol("userMessage")=>"String", Symbol("conflicts")=>"Vector{Any}", )
OpenAPI.property_type(::Type{ ConflictErrorError }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConflictErrorError[name]))}

function check_required(o::ConflictErrorError)
    true
end

function OpenAPI.validate_property(::Type{ ConflictErrorError }, name::Symbol, val)
end
