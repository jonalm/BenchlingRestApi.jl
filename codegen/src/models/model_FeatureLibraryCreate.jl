# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeatureLibraryCreate
Inputs for creating a feature library

    FeatureLibraryCreate(;
        description=nothing,
        name=nothing,
        organizationId=nothing,
    )

    - description::String : The description for the feature library
    - name::String : The name of the feature library
    - organizationId::String : The organization that will own the feature library. The requesting user must be an administrator of the organization. If unspecified and the organization allows personal ownables, then the requesting user will own the feature library 
"""
Base.@kwdef mutable struct FeatureLibraryCreate <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    organizationId::Union{Nothing, String} = nothing

    function FeatureLibraryCreate(description, name, organizationId, )
        OpenAPI.validate_property(FeatureLibraryCreate, Symbol("description"), description)
        OpenAPI.validate_property(FeatureLibraryCreate, Symbol("name"), name)
        OpenAPI.validate_property(FeatureLibraryCreate, Symbol("organizationId"), organizationId)
        return new(description, name, organizationId, )
    end
end # type FeatureLibraryCreate

const _property_types_FeatureLibraryCreate = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("name")=>"String", Symbol("organizationId")=>"String", )
OpenAPI.property_type(::Type{ FeatureLibraryCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeatureLibraryCreate[name]))}

function check_required(o::FeatureLibraryCreate)
    o.description === nothing && (return false)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FeatureLibraryCreate }, name::Symbol, val)
end
