# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InaccessibleResource

    InaccessibleResource(;
        inaccessibleId=nothing,
        resourceType=nothing,
        type=nothing,
    )

    - inaccessibleId::String
    - resourceType::String
    - type::String : The type of this inaccessible item. Example values: \&quot;custom_entity\&quot;, \&quot;container\&quot;, \&quot;plate\&quot;, \&quot;dna_sequence\&quot; 
"""
Base.@kwdef mutable struct InaccessibleResource <: OpenAPI.APIModel
    inaccessibleId::Union{Nothing, String} = nothing
    resourceType::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function InaccessibleResource(inaccessibleId, resourceType, type, )
        OpenAPI.validate_property(InaccessibleResource, Symbol("inaccessibleId"), inaccessibleId)
        OpenAPI.validate_property(InaccessibleResource, Symbol("resourceType"), resourceType)
        OpenAPI.validate_property(InaccessibleResource, Symbol("type"), type)
        return new(inaccessibleId, resourceType, type, )
    end
end # type InaccessibleResource

const _property_types_InaccessibleResource = Dict{Symbol,String}(Symbol("inaccessibleId")=>"String", Symbol("resourceType")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ InaccessibleResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InaccessibleResource[name]))}

function check_required(o::InaccessibleResource)
    true
end

function OpenAPI.validate_property(::Type{ InaccessibleResource }, name::Symbol, val)
    if name === Symbol("resourceType")
        OpenAPI.validate_param(name, "InaccessibleResource", :enum, val, ["inaccessible_resource"])
    end
end
