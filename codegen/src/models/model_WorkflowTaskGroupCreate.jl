# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowTaskGroupCreate

    WorkflowTaskGroupCreate(;
        folderId=nothing,
        name=nothing,
        watcherIds=nothing,
        schemaId=nothing,
    )

    - folderId::String : ID of the folder that contains the workflow task group
    - name::String : The name of the workflow task group
    - watcherIds::Vector{String} : IDs of the users watching the workflow task group
    - schemaId::String : The workflow task schema of tasks in this task group
"""
Base.@kwdef mutable struct WorkflowTaskGroupCreate <: OpenAPI.APIModel
    folderId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    watcherIds::Union{Nothing, Vector{String}} = nothing
    schemaId::Union{Nothing, String} = nothing

    function WorkflowTaskGroupCreate(folderId, name, watcherIds, schemaId, )
        OpenAPI.validate_property(WorkflowTaskGroupCreate, Symbol("folderId"), folderId)
        OpenAPI.validate_property(WorkflowTaskGroupCreate, Symbol("name"), name)
        OpenAPI.validate_property(WorkflowTaskGroupCreate, Symbol("watcherIds"), watcherIds)
        OpenAPI.validate_property(WorkflowTaskGroupCreate, Symbol("schemaId"), schemaId)
        return new(folderId, name, watcherIds, schemaId, )
    end
end # type WorkflowTaskGroupCreate

const _property_types_WorkflowTaskGroupCreate = Dict{Symbol,String}(Symbol("folderId")=>"String", Symbol("name")=>"String", Symbol("watcherIds")=>"Vector{String}", Symbol("schemaId")=>"String", )
OpenAPI.property_type(::Type{ WorkflowTaskGroupCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowTaskGroupCreate[name]))}

function check_required(o::WorkflowTaskGroupCreate)
    o.folderId === nothing && (return false)
    o.schemaId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowTaskGroupCreate }, name::Symbol, val)
end
