# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserValidation

    UserValidation(;
        validationComment=nothing,
        validationStatus=nothing,
    )

    - validationComment::String : A string explaining the reason for the provided validation status.
    - validationStatus::String : Valid values for this enum depend on whether it is used to set a value (e.g., in a POST request), or is a return value for an existing result. Acceptable values for setting a status are &#39;VALID&#39; or &#39;INVALID&#39;. Possible return values are &#39;VALID&#39;, &#39;INVALID&#39;, or &#39;PARTIALLY_VALID&#39; (a result will be partially valid if it has some valid fields and some invalid fields). 
"""
Base.@kwdef mutable struct UserValidation <: OpenAPI.APIModel
    validationComment::Union{Nothing, String} = nothing
    validationStatus::Union{Nothing, String} = nothing

    function UserValidation(validationComment, validationStatus, )
        OpenAPI.validate_property(UserValidation, Symbol("validationComment"), validationComment)
        OpenAPI.validate_property(UserValidation, Symbol("validationStatus"), validationStatus)
        return new(validationComment, validationStatus, )
    end
end # type UserValidation

const _property_types_UserValidation = Dict{Symbol,String}(Symbol("validationComment")=>"String", Symbol("validationStatus")=>"String", )
OpenAPI.property_type(::Type{ UserValidation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserValidation[name]))}

function check_required(o::UserValidation)
    true
end

function OpenAPI.validate_property(::Type{ UserValidation }, name::Symbol, val)
    if name === Symbol("validationStatus")
        OpenAPI.validate_param(name, "UserValidation", :enum, val, ["VALID", "INVALID", "PARTIALLY_VALID"])
    end
end
