# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayRunNotePart_allOf

    AssayRunNotePartAllOf(;
        assayRunId=nothing,
        assayRunSchemaId=nothing,
        type=nothing,
    )

    - assayRunId::String
    - assayRunSchemaId::String
    - type::String
"""
Base.@kwdef mutable struct AssayRunNotePartAllOf <: OpenAPI.APIModel
    assayRunId::Union{Nothing, String} = nothing
    assayRunSchemaId::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function AssayRunNotePartAllOf(assayRunId, assayRunSchemaId, type, )
        OpenAPI.validate_property(AssayRunNotePartAllOf, Symbol("assayRunId"), assayRunId)
        OpenAPI.validate_property(AssayRunNotePartAllOf, Symbol("assayRunSchemaId"), assayRunSchemaId)
        OpenAPI.validate_property(AssayRunNotePartAllOf, Symbol("type"), type)
        return new(assayRunId, assayRunSchemaId, type, )
    end
end # type AssayRunNotePartAllOf

const _property_types_AssayRunNotePartAllOf = Dict{Symbol,String}(Symbol("assayRunId")=>"String", Symbol("assayRunSchemaId")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ AssayRunNotePartAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayRunNotePartAllOf[name]))}

function check_required(o::AssayRunNotePartAllOf)
    true
end

function OpenAPI.validate_property(::Type{ AssayRunNotePartAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "AssayRunNotePartAllOf", :enum, val, ["assay_run"])
    end
end
