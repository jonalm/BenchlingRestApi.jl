# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayRunCreate

    AssayRunCreate(;
        fields=nothing,
        id=nothing,
        projectId=nothing,
        schemaId=nothing,
        validationComment=nothing,
        validationStatus=nothing,
    )

    - fields::AssayRunCreateFields
    - id::String : ID of assay run
    - projectId::String : The project that the assay run should be uploaded to. Only users with read access to the project will be able to read the assay run. Leaving this empty will result in only the creator having read access. 
    - schemaId::String : ID of assay schema that assay run conforms to
    - validationComment::String : Additional information about the validation status
    - validationStatus::AssayRunValidationStatus
"""
Base.@kwdef mutable struct AssayRunCreate <: OpenAPI.APIModel
    fields = nothing # spec type: Union{ Nothing, AssayRunCreateFields }
    id::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    schemaId::Union{Nothing, String} = nothing
    validationComment::Union{Nothing, String} = nothing
    validationStatus = nothing # spec type: Union{ Nothing, AssayRunValidationStatus }

    function AssayRunCreate(fields, id, projectId, schemaId, validationComment, validationStatus, )
        OpenAPI.validate_property(AssayRunCreate, Symbol("fields"), fields)
        OpenAPI.validate_property(AssayRunCreate, Symbol("id"), id)
        OpenAPI.validate_property(AssayRunCreate, Symbol("projectId"), projectId)
        OpenAPI.validate_property(AssayRunCreate, Symbol("schemaId"), schemaId)
        OpenAPI.validate_property(AssayRunCreate, Symbol("validationComment"), validationComment)
        OpenAPI.validate_property(AssayRunCreate, Symbol("validationStatus"), validationStatus)
        return new(fields, id, projectId, schemaId, validationComment, validationStatus, )
    end
end # type AssayRunCreate

const _property_types_AssayRunCreate = Dict{Symbol,String}(Symbol("fields")=>"AssayRunCreateFields", Symbol("id")=>"String", Symbol("projectId")=>"String", Symbol("schemaId")=>"String", Symbol("validationComment")=>"String", Symbol("validationStatus")=>"AssayRunValidationStatus", )
OpenAPI.property_type(::Type{ AssayRunCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayRunCreate[name]))}

function check_required(o::AssayRunCreate)
    o.fields === nothing && (return false)
    o.schemaId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AssayRunCreate }, name::Symbol, val)
end
