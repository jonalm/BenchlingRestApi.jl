# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Request

    Request(;
        apiURL=nothing,
        assignees=nothing,
        createdAt=nothing,
        creator=nothing,
        displayId=nothing,
        fields=nothing,
        id=nothing,
        projectId=nothing,
        requestStatus=nothing,
        requestor=nothing,
        sampleGroups=nothing,
        scheduledOn=nothing,
        schema=nothing,
        tasks=nothing,
        webURL=nothing,
    )

    - apiURL::String : The canonical url of the Request in the API.
    - assignees::Vector{RequestAllOfAssigneesInner} : Array of assignees
    - createdAt::String : Date and time the request was created
    - creator::RequestAllOfCreator
    - displayId::String : User-friendly ID of the request
    - fields::Dict{String, Field}
    - id::String : Unique ID for the request
    - projectId::String : The ID of the project to which the request belongs.
    - requestStatus::RequestStatus
    - requestor::RequestAllOfRequestor
    - sampleGroups::Vector{RequestSampleGroup}
    - scheduledOn::Date : Date the request is scheduled to be executed on, in YYYY-MM-DD format.
    - schema::SchemaProperty5
    - tasks::Vector{RequestTask}
    - webURL::String : URL of the request
"""
Base.@kwdef mutable struct Request <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    assignees::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RequestAllOfAssigneesInner} }
    createdAt::Union{Nothing, String} = nothing
    creator = nothing # spec type: Union{ Nothing, RequestAllOfCreator }
    displayId::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    requestStatus = nothing # spec type: Union{ Nothing, RequestStatus }
    requestor = nothing # spec type: Union{ Nothing, RequestAllOfRequestor }
    sampleGroups::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RequestSampleGroup} }
    scheduledOn::Union{Nothing, Date} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty5 }
    tasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RequestTask} }
    webURL::Union{Nothing, String} = nothing

    function Request(apiURL, assignees, createdAt, creator, displayId, fields, id, projectId, requestStatus, requestor, sampleGroups, scheduledOn, schema, tasks, webURL, )
        OpenAPI.validate_property(Request, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(Request, Symbol("assignees"), assignees)
        OpenAPI.validate_property(Request, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Request, Symbol("creator"), creator)
        OpenAPI.validate_property(Request, Symbol("displayId"), displayId)
        OpenAPI.validate_property(Request, Symbol("fields"), fields)
        OpenAPI.validate_property(Request, Symbol("id"), id)
        OpenAPI.validate_property(Request, Symbol("projectId"), projectId)
        OpenAPI.validate_property(Request, Symbol("requestStatus"), requestStatus)
        OpenAPI.validate_property(Request, Symbol("requestor"), requestor)
        OpenAPI.validate_property(Request, Symbol("sampleGroups"), sampleGroups)
        OpenAPI.validate_property(Request, Symbol("scheduledOn"), scheduledOn)
        OpenAPI.validate_property(Request, Symbol("schema"), schema)
        OpenAPI.validate_property(Request, Symbol("tasks"), tasks)
        OpenAPI.validate_property(Request, Symbol("webURL"), webURL)
        return new(apiURL, assignees, createdAt, creator, displayId, fields, id, projectId, requestStatus, requestor, sampleGroups, scheduledOn, schema, tasks, webURL, )
    end
end # type Request

const _property_types_Request = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("assignees")=>"Vector{RequestAllOfAssigneesInner}", Symbol("createdAt")=>"String", Symbol("creator")=>"RequestAllOfCreator", Symbol("displayId")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("projectId")=>"String", Symbol("requestStatus")=>"RequestStatus", Symbol("requestor")=>"RequestAllOfRequestor", Symbol("sampleGroups")=>"Vector{RequestSampleGroup}", Symbol("scheduledOn")=>"Date", Symbol("schema")=>"SchemaProperty5", Symbol("tasks")=>"Vector{RequestTask}", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ Request }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Request[name]))}

function check_required(o::Request)
    true
end

function OpenAPI.validate_property(::Type{ Request }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "Request", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Request", :format, val, "isoformat")
    end
    if name === Symbol("scheduledOn")
        OpenAPI.validate_param(name, "Request", :format, val, "date")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "Request", :format, val, "uri")
    end
end
