# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BarcodeValidationResult

    BarcodeValidationResult(;
        barcode=nothing,
        isValid=nothing,
        message=nothing,
    )

    - barcode::String : Barcode to validate.
    - isValid::Bool : Whether the barcode is valid.
    - message::String : If barcode is not valid, a message string explaining the error.
"""
Base.@kwdef mutable struct BarcodeValidationResult <: OpenAPI.APIModel
    barcode::Union{Nothing, String} = nothing
    isValid::Union{Nothing, Bool} = nothing
    message::Union{Nothing, String} = nothing

    function BarcodeValidationResult(barcode, isValid, message, )
        OpenAPI.validate_property(BarcodeValidationResult, Symbol("barcode"), barcode)
        OpenAPI.validate_property(BarcodeValidationResult, Symbol("isValid"), isValid)
        OpenAPI.validate_property(BarcodeValidationResult, Symbol("message"), message)
        return new(barcode, isValid, message, )
    end
end # type BarcodeValidationResult

const _property_types_BarcodeValidationResult = Dict{Symbol,String}(Symbol("barcode")=>"String", Symbol("isValid")=>"Bool", Symbol("message")=>"String", )
OpenAPI.property_type(::Type{ BarcodeValidationResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BarcodeValidationResult[name]))}

function check_required(o::BarcodeValidationResult)
    true
end

function OpenAPI.validate_property(::Type{ BarcodeValidationResult }, name::Symbol, val)
end
