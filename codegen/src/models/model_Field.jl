# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Field

    Field(;
        displayValue=nothing,
        isMulti=nothing,
        textValue=nothing,
        type=nothing,
        value=nothing,
    )

    - displayValue::String
    - isMulti::Bool
    - textValue::String
    - type::FieldType
    - value::FieldValue
"""
Base.@kwdef mutable struct Field <: OpenAPI.APIModel
    displayValue::Union{Nothing, String} = nothing
    isMulti::Union{Nothing, Bool} = nothing
    textValue::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, FieldType }
    value = nothing # spec type: Union{ Nothing, FieldValue }

    function Field(displayValue, isMulti, textValue, type, value, )
        OpenAPI.validate_property(Field, Symbol("displayValue"), displayValue)
        OpenAPI.validate_property(Field, Symbol("isMulti"), isMulti)
        OpenAPI.validate_property(Field, Symbol("textValue"), textValue)
        OpenAPI.validate_property(Field, Symbol("type"), type)
        OpenAPI.validate_property(Field, Symbol("value"), value)
        return new(displayValue, isMulti, textValue, type, value, )
    end
end # type Field

const _property_types_Field = Dict{Symbol,String}(Symbol("displayValue")=>"String", Symbol("isMulti")=>"Bool", Symbol("textValue")=>"String", Symbol("type")=>"FieldType", Symbol("value")=>"FieldValue", )
OpenAPI.property_type(::Type{ Field }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Field[name]))}

function check_required(o::Field)
    o.value === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Field }, name::Symbol, val)
end
