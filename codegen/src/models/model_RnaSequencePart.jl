# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RnaSequencePart

    RnaSequencePart(;
        var"end"=nothing,
        sequenceId=nothing,
        start=nothing,
        strand=nothing,
    )

    - var"end"::Int64
    - sequenceId::String
    - start::Int64
    - strand::Int64
"""
Base.@kwdef mutable struct RnaSequencePart <: OpenAPI.APIModel
    var"end"::Union{Nothing, Int64} = nothing
    sequenceId::Union{Nothing, String} = nothing
    start::Union{Nothing, Int64} = nothing
    strand::Union{Nothing, Int64} = nothing

    function RnaSequencePart(var"end", sequenceId, start, strand, )
        OpenAPI.validate_property(RnaSequencePart, Symbol("end"), var"end")
        OpenAPI.validate_property(RnaSequencePart, Symbol("sequenceId"), sequenceId)
        OpenAPI.validate_property(RnaSequencePart, Symbol("start"), start)
        OpenAPI.validate_property(RnaSequencePart, Symbol("strand"), strand)
        return new(var"end", sequenceId, start, strand, )
    end
end # type RnaSequencePart

const _property_types_RnaSequencePart = Dict{Symbol,String}(Symbol("end")=>"Int64", Symbol("sequenceId")=>"String", Symbol("start")=>"Int64", Symbol("strand")=>"Int64", )
OpenAPI.property_type(::Type{ RnaSequencePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RnaSequencePart[name]))}

function check_required(o::RnaSequencePart)
    true
end

function OpenAPI.validate_property(::Type{ RnaSequencePart }, name::Symbol, val)
    if name === Symbol("strand")
        OpenAPI.validate_param(name, "RnaSequencePart", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "RnaSequencePart", :minimum, val, 1, false)
    end
end
