# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntitySchemaAppConfigItem_allOf

    EntitySchemaAppConfigItemAllOf(;
        subtype=nothing,
        type=nothing,
        value=nothing,
    )

    - subtype::SchemaDependencySubtypes
    - type::String
    - value::String
"""
Base.@kwdef mutable struct EntitySchemaAppConfigItemAllOf <: OpenAPI.APIModel
    subtype = nothing # spec type: Union{ Nothing, SchemaDependencySubtypes }
    type::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing

    function EntitySchemaAppConfigItemAllOf(subtype, type, value, )
        OpenAPI.validate_property(EntitySchemaAppConfigItemAllOf, Symbol("subtype"), subtype)
        OpenAPI.validate_property(EntitySchemaAppConfigItemAllOf, Symbol("type"), type)
        OpenAPI.validate_property(EntitySchemaAppConfigItemAllOf, Symbol("value"), value)
        return new(subtype, type, value, )
    end
end # type EntitySchemaAppConfigItemAllOf

const _property_types_EntitySchemaAppConfigItemAllOf = Dict{Symbol,String}(Symbol("subtype")=>"SchemaDependencySubtypes", Symbol("type")=>"String", Symbol("value")=>"String", )
OpenAPI.property_type(::Type{ EntitySchemaAppConfigItemAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntitySchemaAppConfigItemAllOf[name]))}

function check_required(o::EntitySchemaAppConfigItemAllOf)
    true
end

function OpenAPI.validate_property(::Type{ EntitySchemaAppConfigItemAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "EntitySchemaAppConfigItemAllOf", :enum, val, ["entity_schema"])
    end
end
