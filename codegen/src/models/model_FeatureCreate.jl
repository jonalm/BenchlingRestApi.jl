# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FeatureCreate
Inputs for a new feature

    FeatureCreate(;
        color=nothing,
        featureLibraryId=nothing,
        featureType=nothing,
        name=nothing,
        pattern=nothing,
        matchType=nothing,
    )

    - color::String : The color of the annotations generated by the feature. Must be a valid hex string
    - featureLibraryId::String : The id of the feature library the feature belongs to
    - featureType::String : The type of feature, like gene, promoter, etc. Note: This is an arbitrary string, not an enum 
    - name::String : The name of the feature
    - pattern::String : The pattern used for matching during auto-annotation.
    - matchType::String : The match type of the feature. Used to determine how auto-annotate matches are made.
"""
Base.@kwdef mutable struct FeatureCreate <: OpenAPI.APIModel
    color::Union{Nothing, String} = nothing
    featureLibraryId::Union{Nothing, String} = nothing
    featureType::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    pattern::Union{Nothing, String} = nothing
    matchType::Union{Nothing, String} = nothing

    function FeatureCreate(color, featureLibraryId, featureType, name, pattern, matchType, )
        OpenAPI.validate_property(FeatureCreate, Symbol("color"), color)
        OpenAPI.validate_property(FeatureCreate, Symbol("featureLibraryId"), featureLibraryId)
        OpenAPI.validate_property(FeatureCreate, Symbol("featureType"), featureType)
        OpenAPI.validate_property(FeatureCreate, Symbol("name"), name)
        OpenAPI.validate_property(FeatureCreate, Symbol("pattern"), pattern)
        OpenAPI.validate_property(FeatureCreate, Symbol("matchType"), matchType)
        return new(color, featureLibraryId, featureType, name, pattern, matchType, )
    end
end # type FeatureCreate

const _property_types_FeatureCreate = Dict{Symbol,String}(Symbol("color")=>"String", Symbol("featureLibraryId")=>"String", Symbol("featureType")=>"String", Symbol("name")=>"String", Symbol("pattern")=>"String", Symbol("matchType")=>"String", )
OpenAPI.property_type(::Type{ FeatureCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FeatureCreate[name]))}

function check_required(o::FeatureCreate)
    o.featureLibraryId === nothing && (return false)
    o.featureType === nothing && (return false)
    o.name === nothing && (return false)
    o.pattern === nothing && (return false)
    o.matchType === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FeatureCreate }, name::Symbol, val)
    if name === Symbol("matchType")
        OpenAPI.validate_param(name, "FeatureCreate", :enum, val, ["nucleotide", "protein"])
    end
end
