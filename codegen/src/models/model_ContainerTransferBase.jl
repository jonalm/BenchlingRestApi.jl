# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainerTransferBase

    ContainerTransferBase(;
        restrictedSamplePartyIds=nothing,
        restrictionStatus=nothing,
        sampleOwnerIds=nothing,
        sourceBatchId=nothing,
        sourceContainerId=nothing,
        sourceEntityId=nothing,
        transferQuantity=nothing,
        transferVolume=nothing,
    )

    - restrictedSamplePartyIds::Vector{String} : IDs of users or teams to be set as restricted sample parties for the destination container. If not specified, restricted sample parties from the source container, if present, will be added to those of the destination container. This only applies to stand-alone containers. 
    - restrictionStatus::SampleRestrictionStatus
    - sampleOwnerIds::Vector{String} : IDs of users or teams to be set as sample owners for the destination container. If not specified, restricted sample parties from the source container, if present, will be added to those of the destination container. This only applies to stand-alone containers. 
    - sourceBatchId::String : ID of the batch that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - sourceContainerId::String : ID of the container that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - sourceEntityId::String : ID of the entity that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - transferQuantity::ContainerTransferBaseTransferQuantity
    - transferVolume::ContainerTransferBaseTransferVolume
"""
Base.@kwdef mutable struct ContainerTransferBase <: OpenAPI.APIModel
    restrictedSamplePartyIds::Union{Nothing, Vector{String}} = nothing
    restrictionStatus = nothing # spec type: Union{ Nothing, SampleRestrictionStatus }
    sampleOwnerIds::Union{Nothing, Vector{String}} = nothing
    sourceBatchId::Union{Nothing, String} = nothing
    sourceContainerId::Union{Nothing, String} = nothing
    sourceEntityId::Union{Nothing, String} = nothing
    transferQuantity = nothing # spec type: Union{ Nothing, ContainerTransferBaseTransferQuantity }
    transferVolume = nothing # spec type: Union{ Nothing, ContainerTransferBaseTransferVolume }

    function ContainerTransferBase(restrictedSamplePartyIds, restrictionStatus, sampleOwnerIds, sourceBatchId, sourceContainerId, sourceEntityId, transferQuantity, transferVolume, )
        OpenAPI.validate_property(ContainerTransferBase, Symbol("restrictedSamplePartyIds"), restrictedSamplePartyIds)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("restrictionStatus"), restrictionStatus)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("sampleOwnerIds"), sampleOwnerIds)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("sourceBatchId"), sourceBatchId)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("sourceContainerId"), sourceContainerId)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("sourceEntityId"), sourceEntityId)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("transferQuantity"), transferQuantity)
        OpenAPI.validate_property(ContainerTransferBase, Symbol("transferVolume"), transferVolume)
        return new(restrictedSamplePartyIds, restrictionStatus, sampleOwnerIds, sourceBatchId, sourceContainerId, sourceEntityId, transferQuantity, transferVolume, )
    end
end # type ContainerTransferBase

const _property_types_ContainerTransferBase = Dict{Symbol,String}(Symbol("restrictedSamplePartyIds")=>"Vector{String}", Symbol("restrictionStatus")=>"SampleRestrictionStatus", Symbol("sampleOwnerIds")=>"Vector{String}", Symbol("sourceBatchId")=>"String", Symbol("sourceContainerId")=>"String", Symbol("sourceEntityId")=>"String", Symbol("transferQuantity")=>"ContainerTransferBaseTransferQuantity", Symbol("transferVolume")=>"ContainerTransferBaseTransferVolume", )
OpenAPI.property_type(::Type{ ContainerTransferBase }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainerTransferBase[name]))}

function check_required(o::ContainerTransferBase)
    true
end

function OpenAPI.validate_property(::Type{ ContainerTransferBase }, name::Symbol, val)
end
