# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Batch

    Batch(;
        archiveRecord=nothing,
        createdAt=nothing,
        creator=nothing,
        defaultConcentration=nothing,
        entity=nothing,
        fields=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        schema=nothing,
        webURL=nothing,
    )

    - archiveRecord::ArchiveRecord
    - createdAt::ZonedDateTime : DateTime at which the the result was created
    - creator::UserSummary
    - defaultConcentration::Measurement
    - entity::BatchEntity
    - fields::Dict{String, Field}
    - id::String
    - modifiedAt::ZonedDateTime
    - name::String
    - schema::SchemaProperty2
    - webURL::String
"""
Base.@kwdef mutable struct Batch <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    defaultConcentration = nothing # spec type: Union{ Nothing, Measurement }
    entity = nothing # spec type: Union{ Nothing, BatchEntity }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty2 }
    webURL::Union{Nothing, String} = nothing

    function Batch(archiveRecord, createdAt, creator, defaultConcentration, entity, fields, id, modifiedAt, name, schema, webURL, )
        OpenAPI.validate_property(Batch, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Batch, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Batch, Symbol("creator"), creator)
        OpenAPI.validate_property(Batch, Symbol("defaultConcentration"), defaultConcentration)
        OpenAPI.validate_property(Batch, Symbol("entity"), entity)
        OpenAPI.validate_property(Batch, Symbol("fields"), fields)
        OpenAPI.validate_property(Batch, Symbol("id"), id)
        OpenAPI.validate_property(Batch, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Batch, Symbol("name"), name)
        OpenAPI.validate_property(Batch, Symbol("schema"), schema)
        OpenAPI.validate_property(Batch, Symbol("webURL"), webURL)
        return new(archiveRecord, createdAt, creator, defaultConcentration, entity, fields, id, modifiedAt, name, schema, webURL, )
    end
end # type Batch

const _property_types_Batch = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"UserSummary", Symbol("defaultConcentration")=>"Measurement", Symbol("entity")=>"BatchEntity", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("schema")=>"SchemaProperty2", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ Batch }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Batch[name]))}

function check_required(o::Batch)
    true
end

function OpenAPI.validate_property(::Type{ Batch }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Batch", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "Batch", :format, val, "date-time")
    end
end
