# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DnaConsensusAlignmentCreate

    DnaConsensusAlignmentCreate(;
        algorithm=nothing,
        files=nothing,
        name=nothing,
        newSequence=nothing,
        sequenceId=nothing,
    )

    - algorithm::String
    - files::Vector{DnaAlignmentBaseFilesInner}
    - name::String
    - newSequence::DnaConsensusAlignmentCreateAllOfNewSequence
    - sequenceId::String
"""
Base.@kwdef mutable struct DnaConsensusAlignmentCreate <: OpenAPI.APIModel
    algorithm::Union{Nothing, String} = nothing
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DnaAlignmentBaseFilesInner} }
    name::Union{Nothing, String} = nothing
    newSequence = nothing # spec type: Union{ Nothing, DnaConsensusAlignmentCreateAllOfNewSequence }
    sequenceId::Union{Nothing, String} = nothing

    function DnaConsensusAlignmentCreate(algorithm, files, name, newSequence, sequenceId, )
        OpenAPI.validate_property(DnaConsensusAlignmentCreate, Symbol("algorithm"), algorithm)
        OpenAPI.validate_property(DnaConsensusAlignmentCreate, Symbol("files"), files)
        OpenAPI.validate_property(DnaConsensusAlignmentCreate, Symbol("name"), name)
        OpenAPI.validate_property(DnaConsensusAlignmentCreate, Symbol("newSequence"), newSequence)
        OpenAPI.validate_property(DnaConsensusAlignmentCreate, Symbol("sequenceId"), sequenceId)
        return new(algorithm, files, name, newSequence, sequenceId, )
    end
end # type DnaConsensusAlignmentCreate

const _property_types_DnaConsensusAlignmentCreate = Dict{Symbol,String}(Symbol("algorithm")=>"String", Symbol("files")=>"Vector{DnaAlignmentBaseFilesInner}", Symbol("name")=>"String", Symbol("newSequence")=>"DnaConsensusAlignmentCreateAllOfNewSequence", Symbol("sequenceId")=>"String", )
OpenAPI.property_type(::Type{ DnaConsensusAlignmentCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DnaConsensusAlignmentCreate[name]))}

function check_required(o::DnaConsensusAlignmentCreate)
    o.algorithm === nothing && (return false)
    o.files === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DnaConsensusAlignmentCreate }, name::Symbol, val)
    if name === Symbol("algorithm")
        OpenAPI.validate_param(name, "DnaConsensusAlignmentCreate", :enum, val, ["mafft", "clustalo"])
    end
end
