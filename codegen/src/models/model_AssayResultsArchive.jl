# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayResultsArchive

    AssayResultsArchive(;
        assayResultIds=nothing,
        reason=nothing,
    )

    - assayResultIds::Vector{String}
    - reason::String : The reason for archiving the provided results. Accepted reasons may differ based on tenant configuration
"""
Base.@kwdef mutable struct AssayResultsArchive <: OpenAPI.APIModel
    assayResultIds::Union{Nothing, Vector{String}} = nothing
    reason::Union{Nothing, String} = nothing

    function AssayResultsArchive(assayResultIds, reason, )
        OpenAPI.validate_property(AssayResultsArchive, Symbol("assayResultIds"), assayResultIds)
        OpenAPI.validate_property(AssayResultsArchive, Symbol("reason"), reason)
        return new(assayResultIds, reason, )
    end
end # type AssayResultsArchive

const _property_types_AssayResultsArchive = Dict{Symbol,String}(Symbol("assayResultIds")=>"Vector{String}", Symbol("reason")=>"String", )
OpenAPI.property_type(::Type{ AssayResultsArchive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayResultsArchive[name]))}

function check_required(o::AssayResultsArchive)
    o.assayResultIds === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ AssayResultsArchive }, name::Symbol, val)
    if name === Symbol("reason")
        OpenAPI.validate_param(name, "AssayResultsArchive", :enum, val, ["Made in error", "Archived", "Other"])
    end
end
