# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Plate

    Plate(;
        archiveRecord=nothing,
        barcode=nothing,
        createdAt=nothing,
        creator=nothing,
        fields=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        parentStorageId=nothing,
        projectId=nothing,
        schema=nothing,
        type=nothing,
        webURL=nothing,
        wells=nothing,
    )

    - archiveRecord::ArchiveRecord
    - barcode::String : Barcode of the plate
    - createdAt::ZonedDateTime : DateTime the container was created
    - creator::UserSummary
    - fields::Dict{String, Field}
    - id::String : ID of the plate
    - modifiedAt::ZonedDateTime : DateTime the plate was last modified
    - name::String : Name of the plate, defaults to barcode if name is not provided.
    - parentStorageId::String : ID of containing parent inventory (e.g. loc_k2lNspzS).
    - projectId::String : ID of the project if set
    - schema::SchemaProperty3
    - type::String
    - webURL::String
    - wells::Dict{String, WellOrInaccessibleResource} : Well contents of the plate, keyed by position string (eg. \&quot;A1\&quot;).
"""
Base.@kwdef mutable struct Plate <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    barcode::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    parentStorageId::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty3 }
    type::Union{Nothing, String} = nothing
    webURL::Union{Nothing, String} = nothing
    wells::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, WellOrInaccessibleResource} }

    function Plate(archiveRecord, barcode, createdAt, creator, fields, id, modifiedAt, name, parentStorageId, projectId, schema, type, webURL, wells, )
        OpenAPI.validate_property(Plate, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(Plate, Symbol("barcode"), barcode)
        OpenAPI.validate_property(Plate, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(Plate, Symbol("creator"), creator)
        OpenAPI.validate_property(Plate, Symbol("fields"), fields)
        OpenAPI.validate_property(Plate, Symbol("id"), id)
        OpenAPI.validate_property(Plate, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Plate, Symbol("name"), name)
        OpenAPI.validate_property(Plate, Symbol("parentStorageId"), parentStorageId)
        OpenAPI.validate_property(Plate, Symbol("projectId"), projectId)
        OpenAPI.validate_property(Plate, Symbol("schema"), schema)
        OpenAPI.validate_property(Plate, Symbol("type"), type)
        OpenAPI.validate_property(Plate, Symbol("webURL"), webURL)
        OpenAPI.validate_property(Plate, Symbol("wells"), wells)
        return new(archiveRecord, barcode, createdAt, creator, fields, id, modifiedAt, name, parentStorageId, projectId, schema, type, webURL, wells, )
    end
end # type Plate

const _property_types_Plate = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("barcode")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"UserSummary", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("parentStorageId")=>"String", Symbol("projectId")=>"String", Symbol("schema")=>"SchemaProperty3", Symbol("type")=>"String", Symbol("webURL")=>"String", Symbol("wells")=>"Dict{String, WellOrInaccessibleResource}", )
OpenAPI.property_type(::Type{ Plate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Plate[name]))}

function check_required(o::Plate)
    true
end

function OpenAPI.validate_property(::Type{ Plate }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "Plate", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "Plate", :format, val, "date-time")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Plate", :enum, val, ["matrix_plate", "well_plate"])
    end
end
