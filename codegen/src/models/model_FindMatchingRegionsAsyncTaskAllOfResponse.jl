# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FindMatchingRegionsAsyncTask_allOf_response

    FindMatchingRegionsAsyncTaskAllOfResponse(;
        aaSequenceMatches=nothing,
    )

    - aaSequenceMatches::Vector{FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches}
"""
Base.@kwdef mutable struct FindMatchingRegionsAsyncTaskAllOfResponse <: OpenAPI.APIModel
    aaSequenceMatches::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches} }

    function FindMatchingRegionsAsyncTaskAllOfResponse(aaSequenceMatches, )
        OpenAPI.validate_property(FindMatchingRegionsAsyncTaskAllOfResponse, Symbol("aaSequenceMatches"), aaSequenceMatches)
        return new(aaSequenceMatches, )
    end
end # type FindMatchingRegionsAsyncTaskAllOfResponse

const _property_types_FindMatchingRegionsAsyncTaskAllOfResponse = Dict{Symbol,String}(Symbol("aaSequenceMatches")=>"Vector{FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches}", )
OpenAPI.property_type(::Type{ FindMatchingRegionsAsyncTaskAllOfResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FindMatchingRegionsAsyncTaskAllOfResponse[name]))}

function check_required(o::FindMatchingRegionsAsyncTaskAllOfResponse)
    true
end

function OpenAPI.validate_property(::Type{ FindMatchingRegionsAsyncTaskAllOfResponse }, name::Symbol, val)
end
