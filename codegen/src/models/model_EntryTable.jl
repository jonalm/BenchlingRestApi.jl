# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntryTable
Actual tabular data with rows and columns of text on the note. 

    EntryTable(;
        columnLabels=nothing,
        name=nothing,
        rows=nothing,
    )

    - columnLabels::Vector{String} : Array of strings, with one item per column. Defaults to null, if the user is using the default, but is set if the user has given a custom name to the column. 
    - name::String : Name of the table - defaults to e.g. Table1 but can be renamed. 
    - rows::Vector{EntryTableRow} : Array of row objects.
"""
Base.@kwdef mutable struct EntryTable <: OpenAPI.APIModel
    columnLabels::Union{Nothing, Vector{String}} = nothing
    name::Union{Nothing, String} = nothing
    rows::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryTableRow} }

    function EntryTable(columnLabels, name, rows, )
        OpenAPI.validate_property(EntryTable, Symbol("columnLabels"), columnLabels)
        OpenAPI.validate_property(EntryTable, Symbol("name"), name)
        OpenAPI.validate_property(EntryTable, Symbol("rows"), rows)
        return new(columnLabels, name, rows, )
    end
end # type EntryTable

const _property_types_EntryTable = Dict{Symbol,String}(Symbol("columnLabels")=>"Vector{String}", Symbol("name")=>"String", Symbol("rows")=>"Vector{EntryTableRow}", )
OpenAPI.property_type(::Type{ EntryTable }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntryTable[name]))}

function check_required(o::EntryTable)
    true
end

function OpenAPI.validate_property(::Type{ EntryTable }, name::Symbol, val)
end
