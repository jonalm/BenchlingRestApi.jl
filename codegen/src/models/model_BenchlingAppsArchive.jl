# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BenchlingAppsArchive

    BenchlingAppsArchive(;
        appIds=nothing,
        reason=nothing,
    )

    - appIds::Vector{String} : Array of app IDs
    - reason::String : Reason that apps are being archived. Actual reason enum varies by tenant.
"""
Base.@kwdef mutable struct BenchlingAppsArchive <: OpenAPI.APIModel
    appIds::Union{Nothing, Vector{String}} = nothing
    reason::Union{Nothing, String} = nothing

    function BenchlingAppsArchive(appIds, reason, )
        OpenAPI.validate_property(BenchlingAppsArchive, Symbol("appIds"), appIds)
        OpenAPI.validate_property(BenchlingAppsArchive, Symbol("reason"), reason)
        return new(appIds, reason, )
    end
end # type BenchlingAppsArchive

const _property_types_BenchlingAppsArchive = Dict{Symbol,String}(Symbol("appIds")=>"Vector{String}", Symbol("reason")=>"String", )
OpenAPI.property_type(::Type{ BenchlingAppsArchive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BenchlingAppsArchive[name]))}

function check_required(o::BenchlingAppsArchive)
    o.appIds === nothing && (return false)
    o.reason === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BenchlingAppsArchive }, name::Symbol, val)
    if name === Symbol("reason")
        OpenAPI.validate_param(name, "BenchlingAppsArchive", :enum, val, ["Made in error", "Retired", "Other"])
    end
end
