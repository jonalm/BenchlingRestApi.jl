# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FindMatchingRegionsAsyncTask_allOf_response_aaSequenceMatches

    FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches(;
        matchingAASequenceIds=nothing,
        targetAASequenceId=nothing,
    )

    - matchingAASequenceIds::Vector{String}
    - targetAASequenceId::String
"""
Base.@kwdef mutable struct FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches <: OpenAPI.APIModel
    matchingAASequenceIds::Union{Nothing, Vector{String}} = nothing
    targetAASequenceId::Union{Nothing, String} = nothing

    function FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches(matchingAASequenceIds, targetAASequenceId, )
        OpenAPI.validate_property(FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches, Symbol("matchingAASequenceIds"), matchingAASequenceIds)
        OpenAPI.validate_property(FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches, Symbol("targetAASequenceId"), targetAASequenceId)
        return new(matchingAASequenceIds, targetAASequenceId, )
    end
end # type FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches

const _property_types_FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches = Dict{Symbol,String}(Symbol("matchingAASequenceIds")=>"Vector{String}", Symbol("targetAASequenceId")=>"String", )
OpenAPI.property_type(::Type{ FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches[name]))}

function check_required(o::FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches)
    true
end

function OpenAPI.validate_property(::Type{ FindMatchingRegionsAsyncTaskAllOfResponseAaSequenceMatches }, name::Symbol, val)
end
