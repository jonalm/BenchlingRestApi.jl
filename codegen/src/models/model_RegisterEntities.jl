# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RegisterEntities

    RegisterEntities(;
        entityIds=nothing,
        namingStrategy=nothing,
    )

    - entityIds::Vector{String} : Array of entity IDs
    - namingStrategy::NamingStrategy
"""
Base.@kwdef mutable struct RegisterEntities <: OpenAPI.APIModel
    entityIds::Union{Nothing, Vector{String}} = nothing
    namingStrategy = nothing # spec type: Union{ Nothing, NamingStrategy }

    function RegisterEntities(entityIds, namingStrategy, )
        OpenAPI.validate_property(RegisterEntities, Symbol("entityIds"), entityIds)
        OpenAPI.validate_property(RegisterEntities, Symbol("namingStrategy"), namingStrategy)
        return new(entityIds, namingStrategy, )
    end
end # type RegisterEntities

const _property_types_RegisterEntities = Dict{Symbol,String}(Symbol("entityIds")=>"Vector{String}", Symbol("namingStrategy")=>"NamingStrategy", )
OpenAPI.property_type(::Type{ RegisterEntities }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RegisterEntities[name]))}

function check_required(o::RegisterEntities)
    o.entityIds === nothing && (return false)
    o.namingStrategy === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RegisterEntities }, name::Symbol, val)
    if name === Symbol("entityIds")
        OpenAPI.validate_param(name, "RegisterEntities", :maxItems, val, 2500)
    end
end
