# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LocationsArchive

    LocationsArchive(;
        locationIds=nothing,
        reason=nothing,
        shouldRemoveBarcodes=nothing,
    )

    - locationIds::Vector{String} : Array of location IDs
    - reason::String : Reason that locations are being archived. 
    - shouldRemoveBarcodes::Bool : Remove barcodes. Removing barcodes from archived inventory that contain items will also remove barcodes from the contained items. 
"""
Base.@kwdef mutable struct LocationsArchive <: OpenAPI.APIModel
    locationIds::Union{Nothing, Vector{String}} = nothing
    reason::Union{Nothing, String} = nothing
    shouldRemoveBarcodes::Union{Nothing, Bool} = nothing

    function LocationsArchive(locationIds, reason, shouldRemoveBarcodes, )
        OpenAPI.validate_property(LocationsArchive, Symbol("locationIds"), locationIds)
        OpenAPI.validate_property(LocationsArchive, Symbol("reason"), reason)
        OpenAPI.validate_property(LocationsArchive, Symbol("shouldRemoveBarcodes"), shouldRemoveBarcodes)
        return new(locationIds, reason, shouldRemoveBarcodes, )
    end
end # type LocationsArchive

const _property_types_LocationsArchive = Dict{Symbol,String}(Symbol("locationIds")=>"Vector{String}", Symbol("reason")=>"String", Symbol("shouldRemoveBarcodes")=>"Bool", )
OpenAPI.property_type(::Type{ LocationsArchive }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LocationsArchive[name]))}

function check_required(o::LocationsArchive)
    o.locationIds === nothing && (return false)
    o.reason === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ LocationsArchive }, name::Symbol, val)
    if name === Symbol("reason")
        OpenAPI.validate_param(name, "LocationsArchive", :enum, val, ["Made in error", "Retired", "Other"])
    end
end
