# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainerTransfer

    ContainerTransfer(;
        restrictedSamplePartyIds=nothing,
        restrictionStatus=nothing,
        sampleOwnerIds=nothing,
        sourceBatchId=nothing,
        sourceContainerId=nothing,
        sourceEntityId=nothing,
        transferQuantity=nothing,
        transferVolume=nothing,
        destinationContents=nothing,
        destinationQuantity=nothing,
        destinationVolume=nothing,
    )

    - restrictedSamplePartyIds::Vector{String} : IDs of users or teams to be set as restricted sample parties for the destination container. If not specified, restricted sample parties from the source container, if present, will be added to those of the destination container. This only applies to stand-alone containers. 
    - restrictionStatus::SampleRestrictionStatus
    - sampleOwnerIds::Vector{String} : IDs of users or teams to be set as sample owners for the destination container. If not specified, restricted sample parties from the source container, if present, will be added to those of the destination container. This only applies to stand-alone containers. 
    - sourceBatchId::String : ID of the batch that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - sourceContainerId::String : ID of the container that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - sourceEntityId::String : ID of the entity that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
    - transferQuantity::ContainerTransferBaseTransferQuantity
    - transferVolume::ContainerTransferBaseTransferVolume
    - destinationContents::Vector{ContainerTransferDestinationContentsItem} : This represents what the contents of the destination container should look like post-transfer. 
    - destinationQuantity::ContainerTransferAllOfDestinationQuantity
    - destinationVolume::ContainerTransferAllOfDestinationVolume
"""
Base.@kwdef mutable struct ContainerTransfer <: OpenAPI.APIModel
    restrictedSamplePartyIds::Union{Nothing, Vector{String}} = nothing
    restrictionStatus = nothing # spec type: Union{ Nothing, SampleRestrictionStatus }
    sampleOwnerIds::Union{Nothing, Vector{String}} = nothing
    sourceBatchId::Union{Nothing, String} = nothing
    sourceContainerId::Union{Nothing, String} = nothing
    sourceEntityId::Union{Nothing, String} = nothing
    transferQuantity = nothing # spec type: Union{ Nothing, ContainerTransferBaseTransferQuantity }
    transferVolume = nothing # spec type: Union{ Nothing, ContainerTransferBaseTransferVolume }
    destinationContents::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ContainerTransferDestinationContentsItem} }
    destinationQuantity = nothing # spec type: Union{ Nothing, ContainerTransferAllOfDestinationQuantity }
    destinationVolume = nothing # spec type: Union{ Nothing, ContainerTransferAllOfDestinationVolume }

    function ContainerTransfer(restrictedSamplePartyIds, restrictionStatus, sampleOwnerIds, sourceBatchId, sourceContainerId, sourceEntityId, transferQuantity, transferVolume, destinationContents, destinationQuantity, destinationVolume, )
        OpenAPI.validate_property(ContainerTransfer, Symbol("restrictedSamplePartyIds"), restrictedSamplePartyIds)
        OpenAPI.validate_property(ContainerTransfer, Symbol("restrictionStatus"), restrictionStatus)
        OpenAPI.validate_property(ContainerTransfer, Symbol("sampleOwnerIds"), sampleOwnerIds)
        OpenAPI.validate_property(ContainerTransfer, Symbol("sourceBatchId"), sourceBatchId)
        OpenAPI.validate_property(ContainerTransfer, Symbol("sourceContainerId"), sourceContainerId)
        OpenAPI.validate_property(ContainerTransfer, Symbol("sourceEntityId"), sourceEntityId)
        OpenAPI.validate_property(ContainerTransfer, Symbol("transferQuantity"), transferQuantity)
        OpenAPI.validate_property(ContainerTransfer, Symbol("transferVolume"), transferVolume)
        OpenAPI.validate_property(ContainerTransfer, Symbol("destinationContents"), destinationContents)
        OpenAPI.validate_property(ContainerTransfer, Symbol("destinationQuantity"), destinationQuantity)
        OpenAPI.validate_property(ContainerTransfer, Symbol("destinationVolume"), destinationVolume)
        return new(restrictedSamplePartyIds, restrictionStatus, sampleOwnerIds, sourceBatchId, sourceContainerId, sourceEntityId, transferQuantity, transferVolume, destinationContents, destinationQuantity, destinationVolume, )
    end
end # type ContainerTransfer

const _property_types_ContainerTransfer = Dict{Symbol,String}(Symbol("restrictedSamplePartyIds")=>"Vector{String}", Symbol("restrictionStatus")=>"SampleRestrictionStatus", Symbol("sampleOwnerIds")=>"Vector{String}", Symbol("sourceBatchId")=>"String", Symbol("sourceContainerId")=>"String", Symbol("sourceEntityId")=>"String", Symbol("transferQuantity")=>"ContainerTransferBaseTransferQuantity", Symbol("transferVolume")=>"ContainerTransferBaseTransferVolume", Symbol("destinationContents")=>"Vector{ContainerTransferDestinationContentsItem}", Symbol("destinationQuantity")=>"ContainerTransferAllOfDestinationQuantity", Symbol("destinationVolume")=>"ContainerTransferAllOfDestinationVolume", )
OpenAPI.property_type(::Type{ ContainerTransfer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainerTransfer[name]))}

function check_required(o::ContainerTransfer)
    o.destinationContents === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ContainerTransfer }, name::Symbol, val)
end
