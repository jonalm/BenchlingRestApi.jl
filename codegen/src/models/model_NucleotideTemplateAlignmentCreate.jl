# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NucleotideTemplateAlignmentCreate

    NucleotideTemplateAlignmentCreate(;
        algorithm=nothing,
        files=nothing,
        name=nothing,
        templateSequenceId=nothing,
    )

    - algorithm::String
    - files::Vector{NucleotideAlignmentBaseFilesInner}
    - name::String
    - templateSequenceId::String
"""
Base.@kwdef mutable struct NucleotideTemplateAlignmentCreate <: OpenAPI.APIModel
    algorithm::Union{Nothing, String} = nothing
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NucleotideAlignmentBaseFilesInner} }
    name::Union{Nothing, String} = nothing
    templateSequenceId::Union{Nothing, String} = nothing

    function NucleotideTemplateAlignmentCreate(algorithm, files, name, templateSequenceId, )
        OpenAPI.validate_property(NucleotideTemplateAlignmentCreate, Symbol("algorithm"), algorithm)
        OpenAPI.validate_property(NucleotideTemplateAlignmentCreate, Symbol("files"), files)
        OpenAPI.validate_property(NucleotideTemplateAlignmentCreate, Symbol("name"), name)
        OpenAPI.validate_property(NucleotideTemplateAlignmentCreate, Symbol("templateSequenceId"), templateSequenceId)
        return new(algorithm, files, name, templateSequenceId, )
    end
end # type NucleotideTemplateAlignmentCreate

const _property_types_NucleotideTemplateAlignmentCreate = Dict{Symbol,String}(Symbol("algorithm")=>"String", Symbol("files")=>"Vector{NucleotideAlignmentBaseFilesInner}", Symbol("name")=>"String", Symbol("templateSequenceId")=>"String", )
OpenAPI.property_type(::Type{ NucleotideTemplateAlignmentCreate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NucleotideTemplateAlignmentCreate[name]))}

function check_required(o::NucleotideTemplateAlignmentCreate)
    o.algorithm === nothing && (return false)
    o.files === nothing && (return false)
    o.templateSequenceId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NucleotideTemplateAlignmentCreate }, name::Symbol, val)
    if name === Symbol("algorithm")
        OpenAPI.validate_param(name, "NucleotideTemplateAlignmentCreate", :enum, val, ["mafft", "clustalo"])
    end
    if name === Symbol("name")
        OpenAPI.validate_param(name, "NucleotideTemplateAlignmentCreate", :maxLength, val, 255)
    end
end
