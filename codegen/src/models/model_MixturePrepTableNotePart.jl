# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MixturePrepTableNotePart

    MixturePrepTableNotePart(;
        indentation=0,
        type=nothing,
        apiId=nothing,
        columns=nothing,
        mixtureSchemaId=nothing,
    )

    - indentation::Int64 : All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
    - type::String
    - apiId::String
    - columns::Vector{StructuredTableColumnInfo}
    - mixtureSchemaId::String
"""
Base.@kwdef mutable struct MixturePrepTableNotePart <: OpenAPI.APIModel
    indentation::Union{Nothing, Int64} = 0
    type::Union{Nothing, String} = nothing
    apiId::Union{Nothing, String} = nothing
    columns::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StructuredTableColumnInfo} }
    mixtureSchemaId::Union{Nothing, String} = nothing

    function MixturePrepTableNotePart(indentation, type, apiId, columns, mixtureSchemaId, )
        OpenAPI.validate_property(MixturePrepTableNotePart, Symbol("indentation"), indentation)
        OpenAPI.validate_property(MixturePrepTableNotePart, Symbol("type"), type)
        OpenAPI.validate_property(MixturePrepTableNotePart, Symbol("apiId"), apiId)
        OpenAPI.validate_property(MixturePrepTableNotePart, Symbol("columns"), columns)
        OpenAPI.validate_property(MixturePrepTableNotePart, Symbol("mixtureSchemaId"), mixtureSchemaId)
        return new(indentation, type, apiId, columns, mixtureSchemaId, )
    end
end # type MixturePrepTableNotePart

const _property_types_MixturePrepTableNotePart = Dict{Symbol,String}(Symbol("indentation")=>"Int64", Symbol("type")=>"String", Symbol("apiId")=>"String", Symbol("columns")=>"Vector{StructuredTableColumnInfo}", Symbol("mixtureSchemaId")=>"String", )
OpenAPI.property_type(::Type{ MixturePrepTableNotePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MixturePrepTableNotePart[name]))}

function check_required(o::MixturePrepTableNotePart)
    true
end

function OpenAPI.validate_property(::Type{ MixturePrepTableNotePart }, name::Symbol, val)
    if name === Symbol("indentation")
        OpenAPI.validate_param(name, "MixturePrepTableNotePart", :minimum, val, 0, false)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "MixturePrepTableNotePart", :enum, val, ["mixture_prep_table"])
    end
end
