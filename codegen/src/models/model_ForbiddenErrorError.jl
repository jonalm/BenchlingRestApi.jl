# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ForbiddenError_error

    ForbiddenErrorError(;
        invalidId=nothing,
        message=nothing,
        type=nothing,
        userMessage=nothing,
    )

    - invalidId::String
    - message::String
    - type::String
    - userMessage::String
"""
Base.@kwdef mutable struct ForbiddenErrorError <: OpenAPI.APIModel
    invalidId::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    userMessage::Union{Nothing, String} = nothing

    function ForbiddenErrorError(invalidId, message, type, userMessage, )
        OpenAPI.validate_property(ForbiddenErrorError, Symbol("invalidId"), invalidId)
        OpenAPI.validate_property(ForbiddenErrorError, Symbol("message"), message)
        OpenAPI.validate_property(ForbiddenErrorError, Symbol("type"), type)
        OpenAPI.validate_property(ForbiddenErrorError, Symbol("userMessage"), userMessage)
        return new(invalidId, message, type, userMessage, )
    end
end # type ForbiddenErrorError

const _property_types_ForbiddenErrorError = Dict{Symbol,String}(Symbol("invalidId")=>"String", Symbol("message")=>"String", Symbol("type")=>"String", Symbol("userMessage")=>"String", )
OpenAPI.property_type(::Type{ ForbiddenErrorError }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ForbiddenErrorError[name]))}

function check_required(o::ForbiddenErrorError)
    true
end

function OpenAPI.validate_property(::Type{ ForbiddenErrorError }, name::Symbol, val)
end
