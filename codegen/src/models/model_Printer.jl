# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Printer

    Printer(;
        address=nothing,
        description=nothing,
        id=nothing,
        name=nothing,
        port=nothing,
        registryId=nothing,
    )

    - address::String : Web address of the printer (either IP address or URL).
    - description::String : Short description of the printer.
    - id::String : ID of the printer.
    - name::String : Name of the printer.
    - port::Int64 : Port to reach the printer at.
    - registryId::String : ID of the registry associated with this printer.
"""
Base.@kwdef mutable struct Printer <: OpenAPI.APIModel
    address::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    port::Union{Nothing, Int64} = nothing
    registryId::Union{Nothing, String} = nothing

    function Printer(address, description, id, name, port, registryId, )
        OpenAPI.validate_property(Printer, Symbol("address"), address)
        OpenAPI.validate_property(Printer, Symbol("description"), description)
        OpenAPI.validate_property(Printer, Symbol("id"), id)
        OpenAPI.validate_property(Printer, Symbol("name"), name)
        OpenAPI.validate_property(Printer, Symbol("port"), port)
        OpenAPI.validate_property(Printer, Symbol("registryId"), registryId)
        return new(address, description, id, name, port, registryId, )
    end
end # type Printer

const _property_types_Printer = Dict{Symbol,String}(Symbol("address")=>"String", Symbol("description")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("port")=>"Int64", Symbol("registryId")=>"String", )
OpenAPI.property_type(::Type{ Printer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Printer[name]))}

function check_required(o::Printer)
    true
end

function OpenAPI.validate_property(::Type{ Printer }, name::Symbol, val)
end
