# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayResult

    AssayResult(;
        archiveRecord=nothing,
        createdAt=nothing,
        creator=nothing,
        entryId=nothing,
        fieldValidation=nothing,
        fields=nothing,
        id=nothing,
        isReviewed=nothing,
        modifiedAt=nothing,
        projectId=nothing,
        schema=nothing,
        validationComment=nothing,
        validationStatus=nothing,
    )

    - archiveRecord::AssayResultArchiveRecord
    - createdAt::ZonedDateTime : DateTime at which the the result was created
    - creator::AssayResultCreator
    - entryId::String : ID of the entry that this result is attached to
    - fieldValidation::Dict{String, UserValidation} : Object mapping field names to a UserValidation Resource object for that field. To **set** validation for a result, you *must* use this object. 
    - fields::Dict{String, Field}
    - id::String : ID of the result
    - isReviewed::Bool : Whether or not this result is attached to an accepted entry
    - modifiedAt::ZonedDateTime : DateTime at which the the result was last modified
    - projectId::String : ID of the project to insert the result into
    - schema::SchemaProperty
    - validationComment::String
    - validationStatus::String
"""
Base.@kwdef mutable struct AssayResult <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, AssayResultArchiveRecord }
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    creator = nothing # spec type: Union{ Nothing, AssayResultCreator }
    entryId::Union{Nothing, String} = nothing
    fieldValidation::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, UserValidation} }
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    isReviewed::Union{Nothing, Bool} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    projectId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty }
    validationComment::Union{Nothing, String} = nothing
    validationStatus::Union{Nothing, String} = nothing

    function AssayResult(archiveRecord, createdAt, creator, entryId, fieldValidation, fields, id, isReviewed, modifiedAt, projectId, schema, validationComment, validationStatus, )
        OpenAPI.validate_property(AssayResult, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(AssayResult, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(AssayResult, Symbol("creator"), creator)
        OpenAPI.validate_property(AssayResult, Symbol("entryId"), entryId)
        OpenAPI.validate_property(AssayResult, Symbol("fieldValidation"), fieldValidation)
        OpenAPI.validate_property(AssayResult, Symbol("fields"), fields)
        OpenAPI.validate_property(AssayResult, Symbol("id"), id)
        OpenAPI.validate_property(AssayResult, Symbol("isReviewed"), isReviewed)
        OpenAPI.validate_property(AssayResult, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(AssayResult, Symbol("projectId"), projectId)
        OpenAPI.validate_property(AssayResult, Symbol("schema"), schema)
        OpenAPI.validate_property(AssayResult, Symbol("validationComment"), validationComment)
        OpenAPI.validate_property(AssayResult, Symbol("validationStatus"), validationStatus)
        return new(archiveRecord, createdAt, creator, entryId, fieldValidation, fields, id, isReviewed, modifiedAt, projectId, schema, validationComment, validationStatus, )
    end
end # type AssayResult

const _property_types_AssayResult = Dict{Symbol,String}(Symbol("archiveRecord")=>"AssayResultArchiveRecord", Symbol("createdAt")=>"ZonedDateTime", Symbol("creator")=>"AssayResultCreator", Symbol("entryId")=>"String", Symbol("fieldValidation")=>"Dict{String, UserValidation}", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("isReviewed")=>"Bool", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("projectId")=>"String", Symbol("schema")=>"SchemaProperty", Symbol("validationComment")=>"String", Symbol("validationStatus")=>"String", )
OpenAPI.property_type(::Type{ AssayResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayResult[name]))}

function check_required(o::AssayResult)
    true
end

function OpenAPI.validate_property(::Type{ AssayResult }, name::Symbol, val)
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "AssayResult", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "AssayResult", :format, val, "date-time")
    end
end
