# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PrintLabels

    PrintLabels(;
        containerIds=nothing,
        labelTemplateId=nothing,
        printerId=nothing,
    )

    - containerIds::Vector{String} : List of IDs of containers that will have labels printed (one label will be printed per container). 
    - labelTemplateId::String : ID of label template to use (same template will be used for all labels printed). 
    - printerId::String : ID of printer to use (same printer will be used for all labels printed). 
"""
Base.@kwdef mutable struct PrintLabels <: OpenAPI.APIModel
    containerIds::Union{Nothing, Vector{String}} = nothing
    labelTemplateId::Union{Nothing, String} = nothing
    printerId::Union{Nothing, String} = nothing

    function PrintLabels(containerIds, labelTemplateId, printerId, )
        OpenAPI.validate_property(PrintLabels, Symbol("containerIds"), containerIds)
        OpenAPI.validate_property(PrintLabels, Symbol("labelTemplateId"), labelTemplateId)
        OpenAPI.validate_property(PrintLabels, Symbol("printerId"), printerId)
        return new(containerIds, labelTemplateId, printerId, )
    end
end # type PrintLabels

const _property_types_PrintLabels = Dict{Symbol,String}(Symbol("containerIds")=>"Vector{String}", Symbol("labelTemplateId")=>"String", Symbol("printerId")=>"String", )
OpenAPI.property_type(::Type{ PrintLabels }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrintLabels[name]))}

function check_required(o::PrintLabels)
    o.containerIds === nothing && (return false)
    o.labelTemplateId === nothing && (return false)
    o.printerId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PrintLabels }, name::Symbol, val)
end
