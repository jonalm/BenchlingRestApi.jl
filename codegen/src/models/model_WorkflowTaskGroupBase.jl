# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowTaskGroupBase

    WorkflowTaskGroupBase(;
        displayId=nothing,
        id=nothing,
        name=nothing,
        creationOrigin=nothing,
        creator=nothing,
        folder=nothing,
        outputs=nothing,
        responsibleTeam=nothing,
        watchers=nothing,
        webURL=nothing,
        workflowTaskSchema=nothing,
        workflowTasks=nothing,
    )

    - displayId::String : User-friendly ID of the workflow task group
    - id::String : The ID of the workflow task group
    - name::String : The name of the workflow task group
    - creationOrigin::CreationOrigin
    - creator::UserSummary
    - folder::Folder
    - outputs::Vector{WorkflowOutputSummary} : The outputs of the workflow task group
    - responsibleTeam::TeamSummary
    - watchers::Vector{UserSummary} : The users watching the workflow task group
    - webURL::String : URL of the workflow task group
    - workflowTaskSchema::WorkflowTaskSchemaSummary
    - workflowTasks::Vector{WorkflowTaskSummary} : The input tasks to the workflow task group
"""
Base.@kwdef mutable struct WorkflowTaskGroupBase <: OpenAPI.APIModel
    displayId::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    creationOrigin = nothing # spec type: Union{ Nothing, CreationOrigin }
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    folder = nothing # spec type: Union{ Nothing, Folder }
    outputs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WorkflowOutputSummary} }
    responsibleTeam = nothing # spec type: Union{ Nothing, TeamSummary }
    watchers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserSummary} }
    webURL::Union{Nothing, String} = nothing
    workflowTaskSchema = nothing # spec type: Union{ Nothing, WorkflowTaskSchemaSummary }
    workflowTasks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WorkflowTaskSummary} }

    function WorkflowTaskGroupBase(displayId, id, name, creationOrigin, creator, folder, outputs, responsibleTeam, watchers, webURL, workflowTaskSchema, workflowTasks, )
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("displayId"), displayId)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("id"), id)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("name"), name)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("creationOrigin"), creationOrigin)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("creator"), creator)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("folder"), folder)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("outputs"), outputs)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("responsibleTeam"), responsibleTeam)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("watchers"), watchers)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("webURL"), webURL)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("workflowTaskSchema"), workflowTaskSchema)
        OpenAPI.validate_property(WorkflowTaskGroupBase, Symbol("workflowTasks"), workflowTasks)
        return new(displayId, id, name, creationOrigin, creator, folder, outputs, responsibleTeam, watchers, webURL, workflowTaskSchema, workflowTasks, )
    end
end # type WorkflowTaskGroupBase

const _property_types_WorkflowTaskGroupBase = Dict{Symbol,String}(Symbol("displayId")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("creationOrigin")=>"CreationOrigin", Symbol("creator")=>"UserSummary", Symbol("folder")=>"Folder", Symbol("outputs")=>"Vector{WorkflowOutputSummary}", Symbol("responsibleTeam")=>"TeamSummary", Symbol("watchers")=>"Vector{UserSummary}", Symbol("webURL")=>"String", Symbol("workflowTaskSchema")=>"WorkflowTaskSchemaSummary", Symbol("workflowTasks")=>"Vector{WorkflowTaskSummary}", )
OpenAPI.property_type(::Type{ WorkflowTaskGroupBase }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowTaskGroupBase[name]))}

function check_required(o::WorkflowTaskGroupBase)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowTaskGroupBase }, name::Symbol, val)
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "WorkflowTaskGroupBase", :format, val, "uri")
    end
end
