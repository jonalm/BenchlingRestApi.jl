# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PlateSchema_allOf

    PlateSchemaAllOf(;
        containerSchema=nothing,
        height=nothing,
        plateType=nothing,
        type=nothing,
        width=nothing,
    )

    - containerSchema::BoxSchemaAllOfContainerSchema
    - height::Float64
    - plateType::String
    - type::String
    - width::Float64
"""
Base.@kwdef mutable struct PlateSchemaAllOf <: OpenAPI.APIModel
    containerSchema = nothing # spec type: Union{ Nothing, BoxSchemaAllOfContainerSchema }
    height::Union{Nothing, Float64} = nothing
    plateType::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    width::Union{Nothing, Float64} = nothing

    function PlateSchemaAllOf(containerSchema, height, plateType, type, width, )
        OpenAPI.validate_property(PlateSchemaAllOf, Symbol("containerSchema"), containerSchema)
        OpenAPI.validate_property(PlateSchemaAllOf, Symbol("height"), height)
        OpenAPI.validate_property(PlateSchemaAllOf, Symbol("plateType"), plateType)
        OpenAPI.validate_property(PlateSchemaAllOf, Symbol("type"), type)
        OpenAPI.validate_property(PlateSchemaAllOf, Symbol("width"), width)
        return new(containerSchema, height, plateType, type, width, )
    end
end # type PlateSchemaAllOf

const _property_types_PlateSchemaAllOf = Dict{Symbol,String}(Symbol("containerSchema")=>"BoxSchemaAllOfContainerSchema", Symbol("height")=>"Float64", Symbol("plateType")=>"String", Symbol("type")=>"String", Symbol("width")=>"Float64", )
OpenAPI.property_type(::Type{ PlateSchemaAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PlateSchemaAllOf[name]))}

function check_required(o::PlateSchemaAllOf)
    true
end

function OpenAPI.validate_property(::Type{ PlateSchemaAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "PlateSchemaAllOf", :enum, val, ["plate"])
    end
end
