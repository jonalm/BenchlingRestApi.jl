# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayRun

    AssayRun(;
        apiURL=nothing,
        archiveRecord=nothing,
        createdAt=nothing,
        creator=nothing,
        entryId=nothing,
        fields=nothing,
        id=nothing,
        isReviewed=nothing,
        projectId=nothing,
        schema=nothing,
        validationComment=nothing,
        validationStatus=nothing,
    )

    - apiURL::String : The canonical url of the Run in the API.
    - archiveRecord::ArchiveRecord
    - createdAt::String
    - creator::UserSummary
    - entryId::String
    - fields::Dict{String, Field}
    - id::String
    - isReviewed::Bool
    - projectId::String
    - schema::SchemaProperty1
    - validationComment::String
    - validationStatus::AssayRunValidationStatus
"""
Base.@kwdef mutable struct AssayRun <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    createdAt::Union{Nothing, String} = nothing
    creator = nothing # spec type: Union{ Nothing, UserSummary }
    entryId::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    id::Union{Nothing, String} = nothing
    isReviewed::Union{Nothing, Bool} = nothing
    projectId::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, SchemaProperty1 }
    validationComment::Union{Nothing, String} = nothing
    validationStatus = nothing # spec type: Union{ Nothing, AssayRunValidationStatus }

    function AssayRun(apiURL, archiveRecord, createdAt, creator, entryId, fields, id, isReviewed, projectId, schema, validationComment, validationStatus, )
        OpenAPI.validate_property(AssayRun, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(AssayRun, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(AssayRun, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(AssayRun, Symbol("creator"), creator)
        OpenAPI.validate_property(AssayRun, Symbol("entryId"), entryId)
        OpenAPI.validate_property(AssayRun, Symbol("fields"), fields)
        OpenAPI.validate_property(AssayRun, Symbol("id"), id)
        OpenAPI.validate_property(AssayRun, Symbol("isReviewed"), isReviewed)
        OpenAPI.validate_property(AssayRun, Symbol("projectId"), projectId)
        OpenAPI.validate_property(AssayRun, Symbol("schema"), schema)
        OpenAPI.validate_property(AssayRun, Symbol("validationComment"), validationComment)
        OpenAPI.validate_property(AssayRun, Symbol("validationStatus"), validationStatus)
        return new(apiURL, archiveRecord, createdAt, creator, entryId, fields, id, isReviewed, projectId, schema, validationComment, validationStatus, )
    end
end # type AssayRun

const _property_types_AssayRun = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("archiveRecord")=>"ArchiveRecord", Symbol("createdAt")=>"String", Symbol("creator")=>"UserSummary", Symbol("entryId")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("id")=>"String", Symbol("isReviewed")=>"Bool", Symbol("projectId")=>"String", Symbol("schema")=>"SchemaProperty1", Symbol("validationComment")=>"String", Symbol("validationStatus")=>"AssayRunValidationStatus", )
OpenAPI.property_type(::Type{ AssayRun }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayRun[name]))}

function check_required(o::AssayRun)
    true
end

function OpenAPI.validate_property(::Type{ AssayRun }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "AssayRun", :format, val, "uri")
    end
end
