# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FindMatchingRegionsDnaAsyncTask_allOf_response_dnaSequenceMatches

    FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches(;
        matchingDnaSequenceIds=nothing,
        targetDnaSequenceId=nothing,
    )

    - matchingDnaSequenceIds::Vector{String}
    - targetDnaSequenceId::String
"""
Base.@kwdef mutable struct FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches <: OpenAPI.APIModel
    matchingDnaSequenceIds::Union{Nothing, Vector{String}} = nothing
    targetDnaSequenceId::Union{Nothing, String} = nothing

    function FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches(matchingDnaSequenceIds, targetDnaSequenceId, )
        OpenAPI.validate_property(FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches, Symbol("matchingDnaSequenceIds"), matchingDnaSequenceIds)
        OpenAPI.validate_property(FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches, Symbol("targetDnaSequenceId"), targetDnaSequenceId)
        return new(matchingDnaSequenceIds, targetDnaSequenceId, )
    end
end # type FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches

const _property_types_FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches = Dict{Symbol,String}(Symbol("matchingDnaSequenceIds")=>"Vector{String}", Symbol("targetDnaSequenceId")=>"String", )
OpenAPI.property_type(::Type{ FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches[name]))}

function check_required(o::FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches)
    true
end

function OpenAPI.validate_property(::Type{ FindMatchingRegionsDnaAsyncTaskAllOfResponseDnaSequenceMatches }, name::Symbol, val)
end
