# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TableNotePart_allOf

    TableNotePartAllOf(;
        links=nothing,
        table=nothing,
        text=nothing,
        type=nothing,
    )

    - links::Vector{EntryLink} : Array of links referenced in the caption via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
    - table::TableNotePartAllOfTable
    - text::String : The caption of the table.
    - type::String
"""
Base.@kwdef mutable struct TableNotePartAllOf <: OpenAPI.APIModel
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryLink} }
    table = nothing # spec type: Union{ Nothing, TableNotePartAllOfTable }
    text::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function TableNotePartAllOf(links, table, text, type, )
        OpenAPI.validate_property(TableNotePartAllOf, Symbol("links"), links)
        OpenAPI.validate_property(TableNotePartAllOf, Symbol("table"), table)
        OpenAPI.validate_property(TableNotePartAllOf, Symbol("text"), text)
        OpenAPI.validate_property(TableNotePartAllOf, Symbol("type"), type)
        return new(links, table, text, type, )
    end
end # type TableNotePartAllOf

const _property_types_TableNotePartAllOf = Dict{Symbol,String}(Symbol("links")=>"Vector{EntryLink}", Symbol("table")=>"TableNotePartAllOfTable", Symbol("text")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ TableNotePartAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TableNotePartAllOf[name]))}

function check_required(o::TableNotePartAllOf)
    true
end

function OpenAPI.validate_property(::Type{ TableNotePartAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "TableNotePartAllOf", :enum, val, ["table"])
    end
end
