# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowOutputSchema

    WorkflowOutputSchema(;
        archiveRecord=nothing,
        fieldDefinitions=nothing,
        name=nothing,
        prefix=nothing,
        type=nothing,
    )

    - archiveRecord::ArchiveRecord
    - fieldDefinitions::Vector{SchemaFieldDefinitionsInner}
    - name::String
    - prefix::String
    - type::String
"""
Base.@kwdef mutable struct WorkflowOutputSchema <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    fieldDefinitions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SchemaFieldDefinitionsInner} }
    name::Union{Nothing, String} = nothing
    prefix::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function WorkflowOutputSchema(archiveRecord, fieldDefinitions, name, prefix, type, )
        OpenAPI.validate_property(WorkflowOutputSchema, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(WorkflowOutputSchema, Symbol("fieldDefinitions"), fieldDefinitions)
        OpenAPI.validate_property(WorkflowOutputSchema, Symbol("name"), name)
        OpenAPI.validate_property(WorkflowOutputSchema, Symbol("prefix"), prefix)
        OpenAPI.validate_property(WorkflowOutputSchema, Symbol("type"), type)
        return new(archiveRecord, fieldDefinitions, name, prefix, type, )
    end
end # type WorkflowOutputSchema

const _property_types_WorkflowOutputSchema = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("fieldDefinitions")=>"Vector{SchemaFieldDefinitionsInner}", Symbol("name")=>"String", Symbol("prefix")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ WorkflowOutputSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowOutputSchema[name]))}

function check_required(o::WorkflowOutputSchema)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowOutputSchema }, name::Symbol, val)
end
