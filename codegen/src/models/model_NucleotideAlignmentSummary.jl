# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NucleotideAlignmentSummary

    NucleotideAlignmentSummary(;
        apiURL=nothing,
        createdAt=nothing,
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        referenceSequenceId=nothing,
        webURL=nothing,
    )

    - apiURL::String : The canonical url of the Alignment in the API.
    - createdAt::ZonedDateTime : DateTime the Alignment was created
    - id::String
    - modifiedAt::ZonedDateTime : DateTime the Alignment was last modified
    - name::String
    - referenceSequenceId::String : The ID of the template or consensus Sequence associated with the Alignment
    - webURL::String : The Benchling web UI url to view the Alignment
"""
Base.@kwdef mutable struct NucleotideAlignmentSummary <: OpenAPI.APIModel
    apiURL::Union{Nothing, String} = nothing
    createdAt::Union{Nothing, ZonedDateTime} = nothing
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    referenceSequenceId::Union{Nothing, String} = nothing
    webURL::Union{Nothing, String} = nothing

    function NucleotideAlignmentSummary(apiURL, createdAt, id, modifiedAt, name, referenceSequenceId, webURL, )
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("apiURL"), apiURL)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("createdAt"), createdAt)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("id"), id)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("name"), name)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("referenceSequenceId"), referenceSequenceId)
        OpenAPI.validate_property(NucleotideAlignmentSummary, Symbol("webURL"), webURL)
        return new(apiURL, createdAt, id, modifiedAt, name, referenceSequenceId, webURL, )
    end
end # type NucleotideAlignmentSummary

const _property_types_NucleotideAlignmentSummary = Dict{Symbol,String}(Symbol("apiURL")=>"String", Symbol("createdAt")=>"ZonedDateTime", Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("referenceSequenceId")=>"String", Symbol("webURL")=>"String", )
OpenAPI.property_type(::Type{ NucleotideAlignmentSummary }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NucleotideAlignmentSummary[name]))}

function check_required(o::NucleotideAlignmentSummary)
    true
end

function OpenAPI.validate_property(::Type{ NucleotideAlignmentSummary }, name::Symbol, val)
    if name === Symbol("apiURL")
        OpenAPI.validate_param(name, "NucleotideAlignmentSummary", :format, val, "uri")
    end
    if name === Symbol("createdAt")
        OpenAPI.validate_param(name, "NucleotideAlignmentSummary", :format, val, "date-time")
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "NucleotideAlignmentSummary", :format, val, "date-time")
    end
    if name === Symbol("webURL")
        OpenAPI.validate_param(name, "NucleotideAlignmentSummary", :format, val, "uri")
    end
end
