# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CheckboxNotePart_allOf

    CheckboxNotePartAllOf(;
        checked=nothing,
        links=nothing,
        text=nothing,
        type=nothing,
    )

    - checked::Bool : Indicates whether the checkbox is checked or not. 
    - links::Vector{EntryLink} : Array of links referenced in text via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
    - text::String : The textual contents of the note.
    - type::String
"""
Base.@kwdef mutable struct CheckboxNotePartAllOf <: OpenAPI.APIModel
    checked::Union{Nothing, Bool} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EntryLink} }
    text::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function CheckboxNotePartAllOf(checked, links, text, type, )
        OpenAPI.validate_property(CheckboxNotePartAllOf, Symbol("checked"), checked)
        OpenAPI.validate_property(CheckboxNotePartAllOf, Symbol("links"), links)
        OpenAPI.validate_property(CheckboxNotePartAllOf, Symbol("text"), text)
        OpenAPI.validate_property(CheckboxNotePartAllOf, Symbol("type"), type)
        return new(checked, links, text, type, )
    end
end # type CheckboxNotePartAllOf

const _property_types_CheckboxNotePartAllOf = Dict{Symbol,String}(Symbol("checked")=>"Bool", Symbol("links")=>"Vector{EntryLink}", Symbol("text")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ CheckboxNotePartAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CheckboxNotePartAllOf[name]))}

function check_required(o::CheckboxNotePartAllOf)
    true
end

function OpenAPI.validate_property(::Type{ CheckboxNotePartAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "CheckboxNotePartAllOf", :enum, val, ["list_checkbox"])
    end
end
