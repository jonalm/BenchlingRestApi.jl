# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Registry

    Registry(;
        id=nothing,
        modifiedAt=nothing,
        name=nothing,
        owner=nothing,
    )

    - id::String
    - modifiedAt::ZonedDateTime : DateTime the Registry was last modified
    - name::String
    - owner::Organization
"""
Base.@kwdef mutable struct Registry <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    name::Union{Nothing, String} = nothing
    owner = nothing # spec type: Union{ Nothing, Organization }

    function Registry(id, modifiedAt, name, owner, )
        OpenAPI.validate_property(Registry, Symbol("id"), id)
        OpenAPI.validate_property(Registry, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(Registry, Symbol("name"), name)
        OpenAPI.validate_property(Registry, Symbol("owner"), owner)
        return new(id, modifiedAt, name, owner, )
    end
end # type Registry

const _property_types_Registry = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("name")=>"String", Symbol("owner")=>"Organization", )
OpenAPI.property_type(::Type{ Registry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Registry[name]))}

function check_required(o::Registry)
    true
end

function OpenAPI.validate_property(::Type{ Registry }, name::Symbol, val)
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "Registry", :format, val, "date-time")
    end
end
