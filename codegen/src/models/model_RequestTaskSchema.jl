# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RequestTaskSchema

    RequestTaskSchema(;
        archiveRecord=nothing,
        fieldDefinitions=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        modifiedAt=nothing,
        organization=nothing,
        systemName=nothing,
    )

    - archiveRecord::ArchiveRecord
    - fieldDefinitions::Vector{SchemaFieldDefinitionsInner}
    - id::String
    - name::String
    - type::String
    - modifiedAt::ZonedDateTime : DateTime the Request Task Schema was last modified
    - organization::RequestSchemaAllOfOrganization
    - systemName::String
"""
Base.@kwdef mutable struct RequestTaskSchema <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    fieldDefinitions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SchemaFieldDefinitionsInner} }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing
    organization = nothing # spec type: Union{ Nothing, RequestSchemaAllOfOrganization }
    systemName::Union{Nothing, String} = nothing

    function RequestTaskSchema(archiveRecord, fieldDefinitions, id, name, type, modifiedAt, organization, systemName, )
        OpenAPI.validate_property(RequestTaskSchema, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("fieldDefinitions"), fieldDefinitions)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("id"), id)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("name"), name)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("type"), type)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("modifiedAt"), modifiedAt)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("organization"), organization)
        OpenAPI.validate_property(RequestTaskSchema, Symbol("systemName"), systemName)
        return new(archiveRecord, fieldDefinitions, id, name, type, modifiedAt, organization, systemName, )
    end
end # type RequestTaskSchema

const _property_types_RequestTaskSchema = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("fieldDefinitions")=>"Vector{SchemaFieldDefinitionsInner}", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("modifiedAt")=>"ZonedDateTime", Symbol("organization")=>"RequestSchemaAllOfOrganization", Symbol("systemName")=>"String", )
OpenAPI.property_type(::Type{ RequestTaskSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RequestTaskSchema[name]))}

function check_required(o::RequestTaskSchema)
    true
end

function OpenAPI.validate_property(::Type{ RequestTaskSchema }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RequestTaskSchema", :enum, val, ["request_task"])
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "RequestTaskSchema", :format, val, "date-time")
    end
end
