# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WorkflowTaskSchemaBase_allOf

    WorkflowTaskSchemaBaseAllOf(;
        canSetAssigneeOnTaskCreation=nothing,
        defaultCreationFolderId=nothing,
        defaultEntryExecutionFolderId=nothing,
        defaultResponsibleTeam=nothing,
        entryTemplateId=nothing,
        prefix=nothing,
        statusLifecycle=nothing,
        taskGroupPrefix=nothing,
        workflowOutputSchema=nothing,
    )

    - canSetAssigneeOnTaskCreation::Bool : Whether or not tasks of this schema can be created with a non-null assignee.
    - defaultCreationFolderId::String : ID of the default folder for creating workflow task groups
    - defaultEntryExecutionFolderId::String : ID of the default folder for workflow task execution entries
    - defaultResponsibleTeam::TeamSummary
    - entryTemplateId::String : The ID of the template of the entries tasks of this schema will be executed into.
    - prefix::String : The prefix for the displayId of tasks of this schema.
    - statusLifecycle::WorkflowTaskStatusLifecycle
    - taskGroupPrefix::String : The prefix for the displayId of task groups containing tasks of this schema
    - workflowOutputSchema::WorkflowOutputSchema
"""
Base.@kwdef mutable struct WorkflowTaskSchemaBaseAllOf <: OpenAPI.APIModel
    canSetAssigneeOnTaskCreation::Union{Nothing, Bool} = nothing
    defaultCreationFolderId::Union{Nothing, String} = nothing
    defaultEntryExecutionFolderId::Union{Nothing, String} = nothing
    defaultResponsibleTeam = nothing # spec type: Union{ Nothing, TeamSummary }
    entryTemplateId::Union{Nothing, String} = nothing
    prefix::Union{Nothing, String} = nothing
    statusLifecycle = nothing # spec type: Union{ Nothing, WorkflowTaskStatusLifecycle }
    taskGroupPrefix::Union{Nothing, String} = nothing
    workflowOutputSchema = nothing # spec type: Union{ Nothing, WorkflowOutputSchema }

    function WorkflowTaskSchemaBaseAllOf(canSetAssigneeOnTaskCreation, defaultCreationFolderId, defaultEntryExecutionFolderId, defaultResponsibleTeam, entryTemplateId, prefix, statusLifecycle, taskGroupPrefix, workflowOutputSchema, )
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("canSetAssigneeOnTaskCreation"), canSetAssigneeOnTaskCreation)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("defaultCreationFolderId"), defaultCreationFolderId)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("defaultEntryExecutionFolderId"), defaultEntryExecutionFolderId)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("defaultResponsibleTeam"), defaultResponsibleTeam)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("entryTemplateId"), entryTemplateId)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("prefix"), prefix)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("statusLifecycle"), statusLifecycle)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("taskGroupPrefix"), taskGroupPrefix)
        OpenAPI.validate_property(WorkflowTaskSchemaBaseAllOf, Symbol("workflowOutputSchema"), workflowOutputSchema)
        return new(canSetAssigneeOnTaskCreation, defaultCreationFolderId, defaultEntryExecutionFolderId, defaultResponsibleTeam, entryTemplateId, prefix, statusLifecycle, taskGroupPrefix, workflowOutputSchema, )
    end
end # type WorkflowTaskSchemaBaseAllOf

const _property_types_WorkflowTaskSchemaBaseAllOf = Dict{Symbol,String}(Symbol("canSetAssigneeOnTaskCreation")=>"Bool", Symbol("defaultCreationFolderId")=>"String", Symbol("defaultEntryExecutionFolderId")=>"String", Symbol("defaultResponsibleTeam")=>"TeamSummary", Symbol("entryTemplateId")=>"String", Symbol("prefix")=>"String", Symbol("statusLifecycle")=>"WorkflowTaskStatusLifecycle", Symbol("taskGroupPrefix")=>"String", Symbol("workflowOutputSchema")=>"WorkflowOutputSchema", )
OpenAPI.property_type(::Type{ WorkflowTaskSchemaBaseAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowTaskSchemaBaseAllOf[name]))}

function check_required(o::WorkflowTaskSchemaBaseAllOf)
    true
end

function OpenAPI.validate_property(::Type{ WorkflowTaskSchemaBaseAllOf }, name::Symbol, val)
end
