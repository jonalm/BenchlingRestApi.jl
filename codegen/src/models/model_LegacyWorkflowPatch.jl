# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LegacyWorkflowPatch

    LegacyWorkflowPatch(;
        description=nothing,
        name=nothing,
        projectId=nothing,
    )

    - description::String : Description of the legacy workflow
    - name::String : Name of the legacy workflow
    - projectId::String : ID of the project that contains the legacy workflow
"""
Base.@kwdef mutable struct LegacyWorkflowPatch <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    projectId::Union{Nothing, String} = nothing

    function LegacyWorkflowPatch(description, name, projectId, )
        OpenAPI.validate_property(LegacyWorkflowPatch, Symbol("description"), description)
        OpenAPI.validate_property(LegacyWorkflowPatch, Symbol("name"), name)
        OpenAPI.validate_property(LegacyWorkflowPatch, Symbol("projectId"), projectId)
        return new(description, name, projectId, )
    end
end # type LegacyWorkflowPatch

const _property_types_LegacyWorkflowPatch = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("name")=>"String", Symbol("projectId")=>"String", )
OpenAPI.property_type(::Type{ LegacyWorkflowPatch }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LegacyWorkflowPatch[name]))}

function check_required(o::LegacyWorkflowPatch)
    true
end

function OpenAPI.validate_property(::Type{ LegacyWorkflowPatch }, name::Symbol, val)
end
