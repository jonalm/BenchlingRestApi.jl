# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ForbiddenRestrictedSampleError_error_allOf

    ForbiddenRestrictedSampleErrorErrorAllOf(;
        invalidIds=nothing,
        type=nothing,
    )

    - invalidIds::Vector{String}
    - type::String
"""
Base.@kwdef mutable struct ForbiddenRestrictedSampleErrorErrorAllOf <: OpenAPI.APIModel
    invalidIds::Union{Nothing, Vector{String}} = nothing
    type::Union{Nothing, String} = nothing

    function ForbiddenRestrictedSampleErrorErrorAllOf(invalidIds, type, )
        OpenAPI.validate_property(ForbiddenRestrictedSampleErrorErrorAllOf, Symbol("invalidIds"), invalidIds)
        OpenAPI.validate_property(ForbiddenRestrictedSampleErrorErrorAllOf, Symbol("type"), type)
        return new(invalidIds, type, )
    end
end # type ForbiddenRestrictedSampleErrorErrorAllOf

const _property_types_ForbiddenRestrictedSampleErrorErrorAllOf = Dict{Symbol,String}(Symbol("invalidIds")=>"Vector{String}", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ ForbiddenRestrictedSampleErrorErrorAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ForbiddenRestrictedSampleErrorErrorAllOf[name]))}

function check_required(o::ForbiddenRestrictedSampleErrorErrorAllOf)
    true
end

function OpenAPI.validate_property(::Type{ ForbiddenRestrictedSampleErrorErrorAllOf }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ForbiddenRestrictedSampleErrorErrorAllOf", :enum, val, ["invalid_request_error"])
    end
end
