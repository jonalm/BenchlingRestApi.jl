# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AaAnnotation

    AaAnnotation(;
        color=nothing,
        var"end"=nothing,
        id=nothing,
        name=nothing,
        start=nothing,
        type=nothing,
    )

    - color::String
    - var"end"::Int64
    - id::String
    - name::String
    - start::Int64
    - type::String
"""
Base.@kwdef mutable struct AaAnnotation <: OpenAPI.APIModel
    color::Union{Nothing, String} = nothing
    var"end"::Union{Nothing, Int64} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    start::Union{Nothing, Int64} = nothing
    type::Union{Nothing, String} = nothing

    function AaAnnotation(color, var"end", id, name, start, type, )
        OpenAPI.validate_property(AaAnnotation, Symbol("color"), color)
        OpenAPI.validate_property(AaAnnotation, Symbol("end"), var"end")
        OpenAPI.validate_property(AaAnnotation, Symbol("id"), id)
        OpenAPI.validate_property(AaAnnotation, Symbol("name"), name)
        OpenAPI.validate_property(AaAnnotation, Symbol("start"), start)
        OpenAPI.validate_property(AaAnnotation, Symbol("type"), type)
        return new(color, var"end", id, name, start, type, )
    end
end # type AaAnnotation

const _property_types_AaAnnotation = Dict{Symbol,String}(Symbol("color")=>"String", Symbol("end")=>"Int64", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("start")=>"Int64", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ AaAnnotation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AaAnnotation[name]))}

function check_required(o::AaAnnotation)
    true
end

function OpenAPI.validate_property(::Type{ AaAnnotation }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "AaAnnotation", :maxLength, val, 255)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "AaAnnotation", :maxLength, val, 255)
    end
end
