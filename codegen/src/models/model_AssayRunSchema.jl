# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AssayRunSchema

    AssayRunSchema(;
        archiveRecord=nothing,
        fieldDefinitions=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        derivedFrom=nothing,
        organization=nothing,
        systemName=nothing,
        automationInputFileConfigs=nothing,
        automationOutputFileConfigs=nothing,
        modifiedAt=nothing,
    )

    - archiveRecord::ArchiveRecord
    - fieldDefinitions::Vector{SchemaFieldDefinitionsInner}
    - id::String
    - name::String
    - type::String
    - derivedFrom::String
    - organization::BaseAssaySchemaAllOfOrganization
    - systemName::String
    - automationInputFileConfigs::Vector{AssayRunSchemaAllOfAutomationInputFileConfigs}
    - automationOutputFileConfigs::Vector{AssayRunSchemaAllOfAutomationInputFileConfigs}
    - modifiedAt::ZonedDateTime : DateTime the Assay Run Schema was last modified
"""
Base.@kwdef mutable struct AssayRunSchema <: OpenAPI.APIModel
    archiveRecord = nothing # spec type: Union{ Nothing, ArchiveRecord }
    fieldDefinitions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SchemaFieldDefinitionsInner} }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    derivedFrom::Union{Nothing, String} = nothing
    organization = nothing # spec type: Union{ Nothing, BaseAssaySchemaAllOfOrganization }
    systemName::Union{Nothing, String} = nothing
    automationInputFileConfigs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AssayRunSchemaAllOfAutomationInputFileConfigs} }
    automationOutputFileConfigs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AssayRunSchemaAllOfAutomationInputFileConfigs} }
    modifiedAt::Union{Nothing, ZonedDateTime} = nothing

    function AssayRunSchema(archiveRecord, fieldDefinitions, id, name, type, derivedFrom, organization, systemName, automationInputFileConfigs, automationOutputFileConfigs, modifiedAt, )
        OpenAPI.validate_property(AssayRunSchema, Symbol("archiveRecord"), archiveRecord)
        OpenAPI.validate_property(AssayRunSchema, Symbol("fieldDefinitions"), fieldDefinitions)
        OpenAPI.validate_property(AssayRunSchema, Symbol("id"), id)
        OpenAPI.validate_property(AssayRunSchema, Symbol("name"), name)
        OpenAPI.validate_property(AssayRunSchema, Symbol("type"), type)
        OpenAPI.validate_property(AssayRunSchema, Symbol("derivedFrom"), derivedFrom)
        OpenAPI.validate_property(AssayRunSchema, Symbol("organization"), organization)
        OpenAPI.validate_property(AssayRunSchema, Symbol("systemName"), systemName)
        OpenAPI.validate_property(AssayRunSchema, Symbol("automationInputFileConfigs"), automationInputFileConfigs)
        OpenAPI.validate_property(AssayRunSchema, Symbol("automationOutputFileConfigs"), automationOutputFileConfigs)
        OpenAPI.validate_property(AssayRunSchema, Symbol("modifiedAt"), modifiedAt)
        return new(archiveRecord, fieldDefinitions, id, name, type, derivedFrom, organization, systemName, automationInputFileConfigs, automationOutputFileConfigs, modifiedAt, )
    end
end # type AssayRunSchema

const _property_types_AssayRunSchema = Dict{Symbol,String}(Symbol("archiveRecord")=>"ArchiveRecord", Symbol("fieldDefinitions")=>"Vector{SchemaFieldDefinitionsInner}", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("derivedFrom")=>"String", Symbol("organization")=>"BaseAssaySchemaAllOfOrganization", Symbol("systemName")=>"String", Symbol("automationInputFileConfigs")=>"Vector{AssayRunSchemaAllOfAutomationInputFileConfigs}", Symbol("automationOutputFileConfigs")=>"Vector{AssayRunSchemaAllOfAutomationInputFileConfigs}", Symbol("modifiedAt")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ AssayRunSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AssayRunSchema[name]))}

function check_required(o::AssayRunSchema)
    true
end

function OpenAPI.validate_property(::Type{ AssayRunSchema }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "AssayRunSchema", :enum, val, ["assay_run"])
    end
    if name === Symbol("modifiedAt")
        OpenAPI.validate_param(name, "AssayRunSchema", :format, val, "date-time")
    end
end
