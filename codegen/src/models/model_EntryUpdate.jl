# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EntryUpdate

    EntryUpdate(;
        authorIds=nothing,
        fields=nothing,
        folderId=nothing,
        name=nothing,
        schemaId=nothing,
    )

    - authorIds::String : IDs of users to set as the entry&#39;s authors.
    - fields::Dict{String, Field}
    - folderId::String : ID of the folder that will contain the entry
    - name::String : New name of the entry
    - schemaId::String : ID of the schema for the entry
"""
Base.@kwdef mutable struct EntryUpdate <: OpenAPI.APIModel
    authorIds::Union{Nothing, String} = nothing
    fields::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Field} }
    folderId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    schemaId::Union{Nothing, String} = nothing

    function EntryUpdate(authorIds, fields, folderId, name, schemaId, )
        OpenAPI.validate_property(EntryUpdate, Symbol("authorIds"), authorIds)
        OpenAPI.validate_property(EntryUpdate, Symbol("fields"), fields)
        OpenAPI.validate_property(EntryUpdate, Symbol("folderId"), folderId)
        OpenAPI.validate_property(EntryUpdate, Symbol("name"), name)
        OpenAPI.validate_property(EntryUpdate, Symbol("schemaId"), schemaId)
        return new(authorIds, fields, folderId, name, schemaId, )
    end
end # type EntryUpdate

const _property_types_EntryUpdate = Dict{Symbol,String}(Symbol("authorIds")=>"String", Symbol("fields")=>"Dict{String, Field}", Symbol("folderId")=>"String", Symbol("name")=>"String", Symbol("schemaId")=>"String", )
OpenAPI.property_type(::Type{ EntryUpdate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EntryUpdate[name]))}

function check_required(o::EntryUpdate)
    true
end

function OpenAPI.validate_property(::Type{ EntryUpdate }, name::Symbol, val)
end
