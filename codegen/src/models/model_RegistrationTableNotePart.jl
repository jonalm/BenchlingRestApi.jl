# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RegistrationTableNotePart

    RegistrationTableNotePart(;
        indentation=0,
        type=nothing,
        apiId=nothing,
        columns=nothing,
        entitySchemaId=nothing,
    )

    - indentation::Int64 : All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
    - type::String
    - apiId::String
    - columns::Vector{StructuredTableColumnInfo}
    - entitySchemaId::String
"""
Base.@kwdef mutable struct RegistrationTableNotePart <: OpenAPI.APIModel
    indentation::Union{Nothing, Int64} = 0
    type::Union{Nothing, String} = nothing
    apiId::Union{Nothing, String} = nothing
    columns::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StructuredTableColumnInfo} }
    entitySchemaId::Union{Nothing, String} = nothing

    function RegistrationTableNotePart(indentation, type, apiId, columns, entitySchemaId, )
        OpenAPI.validate_property(RegistrationTableNotePart, Symbol("indentation"), indentation)
        OpenAPI.validate_property(RegistrationTableNotePart, Symbol("type"), type)
        OpenAPI.validate_property(RegistrationTableNotePart, Symbol("apiId"), apiId)
        OpenAPI.validate_property(RegistrationTableNotePart, Symbol("columns"), columns)
        OpenAPI.validate_property(RegistrationTableNotePart, Symbol("entitySchemaId"), entitySchemaId)
        return new(indentation, type, apiId, columns, entitySchemaId, )
    end
end # type RegistrationTableNotePart

const _property_types_RegistrationTableNotePart = Dict{Symbol,String}(Symbol("indentation")=>"Int64", Symbol("type")=>"String", Symbol("apiId")=>"String", Symbol("columns")=>"Vector{StructuredTableColumnInfo}", Symbol("entitySchemaId")=>"String", )
OpenAPI.property_type(::Type{ RegistrationTableNotePart }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RegistrationTableNotePart[name]))}

function check_required(o::RegistrationTableNotePart)
    true
end

function OpenAPI.validate_property(::Type{ RegistrationTableNotePart }, name::Symbol, val)
    if name === Symbol("indentation")
        OpenAPI.validate_param(name, "RegistrationTableNotePart", :minimum, val, 0, false)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RegistrationTableNotePart", :enum, val, ["registration_table"])
    end
end
