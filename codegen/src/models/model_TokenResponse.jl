# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TokenResponse

    TokenResponse(;
        access_token=nothing,
        expires_in=nothing,
        token_type=nothing,
    )

    - access_token::String
    - expires_in::Int64 : Number of seconds that token is valid for
    - token_type::String
"""
Base.@kwdef mutable struct TokenResponse <: OpenAPI.APIModel
    access_token::Union{Nothing, String} = nothing
    expires_in::Union{Nothing, Int64} = nothing
    token_type::Union{Nothing, String} = nothing

    function TokenResponse(access_token, expires_in, token_type, )
        OpenAPI.validate_property(TokenResponse, Symbol("access_token"), access_token)
        OpenAPI.validate_property(TokenResponse, Symbol("expires_in"), expires_in)
        OpenAPI.validate_property(TokenResponse, Symbol("token_type"), token_type)
        return new(access_token, expires_in, token_type, )
    end
end # type TokenResponse

const _property_types_TokenResponse = Dict{Symbol,String}(Symbol("access_token")=>"String", Symbol("expires_in")=>"Int64", Symbol("token_type")=>"String", )
OpenAPI.property_type(::Type{ TokenResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TokenResponse[name]))}

function check_required(o::TokenResponse)
    true
end

function OpenAPI.validate_property(::Type{ TokenResponse }, name::Symbol, val)
    if name === Symbol("token_type")
        OpenAPI.validate_param(name, "TokenResponse", :enum, val, ["Bearer"])
    end
end
