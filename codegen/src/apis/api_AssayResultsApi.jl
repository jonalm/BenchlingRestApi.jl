# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AssayResultsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AssayResultsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AssayResultsApi }) = "/api/v2"

const _returntypes_abort_assay_results_transaction_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultTransactionCreateResponse,
)

function _oacinternal_abort_assay_results_transaction(_api::AssayResultsApi, transaction_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_abort_assay_results_transaction_AssayResultsApi, "/result-transactions/{transaction_id}:abort", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "transaction_id", transaction_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Abort a transaction

Aborting a transaction will discard all uploaded results.

Params:
- transaction_id::String (required)

Return: AssayResultTransactionCreateResponse, OpenAPI.Clients.ApiResponse
"""
function abort_assay_results_transaction(_api::AssayResultsApi, transaction_id::String; _mediaType=nothing)
    _ctx = _oacinternal_abort_assay_results_transaction(_api, transaction_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function abort_assay_results_transaction(_api::AssayResultsApi, response_stream::Channel, transaction_id::String; _mediaType=nothing)
    _ctx = _oacinternal_abort_assay_results_transaction(_api, transaction_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_archive_assay_results_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultIdsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_assay_results(_api::AssayResultsApi; assay_results_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_assay_results_AssayResultsApi, "/assay-results:archive", ["basicApiKeyAuth", "oAuth", ], assay_results_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive 1 or more results.

**Only results that have not been added to a Notebook Entry can be Archived.** Once results are attached to a notebook entry, they are tracked in the history of that notebook entry, and cannot be archived. 

Params:
- assay_results_archive::AssayResultsArchive

Return: AssayResultIdsResponse, OpenAPI.Clients.ApiResponse
"""
function archive_assay_results(_api::AssayResultsApi; assay_results_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_assay_results(_api; assay_results_archive=assay_results_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_assay_results(_api::AssayResultsApi, response_stream::Channel; assay_results_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_assay_results(_api; assay_results_archive=assay_results_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_assay_results_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultsBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_assay_results(_api::AssayResultsApi, assay_result_ids::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_assay_results_AssayResultsApi, "/assay-results:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "assayResultIds", assay_result_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets multiple results specified by a list of IDs.

Up to 200 IDs can be specified at once.

Params:
- assay_result_ids::String (required)

Return: AssayResultsBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_assay_results(_api::AssayResultsApi, assay_result_ids::String; _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_assay_results(_api, assay_result_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_assay_results(_api::AssayResultsApi, response_stream::Channel, assay_result_ids::String; _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_assay_results(_api, assay_result_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_commit_assay_results_transaction_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultTransactionCreateResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_commit_assay_results_transaction(_api::AssayResultsApi, transaction_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_commit_assay_results_transaction_AssayResultsApi, "/result-transactions/{transaction_id}:commit", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "transaction_id", transaction_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Commit a transaction

Committing a transaction will cause all results that have been uploaded to be saved and visible to others.

Params:
- transaction_id::String (required)

Return: AssayResultTransactionCreateResponse, OpenAPI.Clients.ApiResponse
"""
function commit_assay_results_transaction(_api::AssayResultsApi, transaction_id::String; _mediaType=nothing)
    _ctx = _oacinternal_commit_assay_results_transaction(_api, transaction_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function commit_assay_results_transaction(_api::AssayResultsApi, response_stream::Channel, transaction_id::String; _mediaType=nothing)
    _ctx = _oacinternal_commit_assay_results_transaction(_api, transaction_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_assay_results_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultsCreateResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_assay_results(_api::AssayResultsApi; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_assay_results_AssayResultsApi, "/assay-results", ["basicApiKeyAuth", "oAuth", ], assay_results_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create 1 or more results.

Create 1 or more results.

Params:
- assay_results_bulk_create_request::AssayResultsBulkCreateRequest

Return: AssayResultsCreateResponse, OpenAPI.Clients.ApiResponse
"""
function create_assay_results(_api::AssayResultsApi; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results(_api; assay_results_bulk_create_request=assay_results_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_assay_results(_api::AssayResultsApi, response_stream::Channel; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results(_api; assay_results_bulk_create_request=assay_results_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_assay_results_in_transaction_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultsCreateResponse,
)

function _oacinternal_create_assay_results_in_transaction(_api::AssayResultsApi, transaction_id::String; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_assay_results_in_transaction_AssayResultsApi, "/result-transactions/{transaction_id}/results", ["basicApiKeyAuth", "oAuth", ], assay_results_bulk_create_request)
    OpenAPI.Clients.set_param(_ctx.path, "transaction_id", transaction_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create results in a transaction

Create results in a transaction

Params:
- transaction_id::String (required)
- assay_results_bulk_create_request::AssayResultsBulkCreateRequest

Return: AssayResultsCreateResponse, OpenAPI.Clients.ApiResponse
"""
function create_assay_results_in_transaction(_api::AssayResultsApi, transaction_id::String; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results_in_transaction(_api, transaction_id; assay_results_bulk_create_request=assay_results_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_assay_results_in_transaction(_api::AssayResultsApi, response_stream::Channel, transaction_id::String; assay_results_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results_in_transaction(_api, transaction_id; assay_results_bulk_create_request=assay_results_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_assay_results_transaction_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultTransactionCreateResponse,
)

function _oacinternal_create_assay_results_transaction(_api::AssayResultsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_assay_results_transaction_AssayResultsApi, "/result-transactions", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create a transaction

Transactions allow results to be upload in multiple requests. This endpoint lets you create a transaction. You can then upload results to the transaction, abort the transaction, or commit the transaction. 

Params:

Return: AssayResultTransactionCreateResponse, OpenAPI.Clients.ApiResponse
"""
function create_assay_results_transaction(_api::AssayResultsApi; _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results_transaction(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_assay_results_transaction(_api::AssayResultsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_create_assay_results_transaction(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_assay_result_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResult,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_assay_result(_api::AssayResultsApi, assay_result_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_assay_result_AssayResultsApi, "/assay-results/{assay_result_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assay_result_id", assay_result_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a result

Get a result

Params:
- assay_result_id::String (required)

Return: AssayResult, OpenAPI.Clients.ApiResponse
"""
function get_assay_result(_api::AssayResultsApi, assay_result_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assay_result(_api, assay_result_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_assay_result(_api::AssayResultsApi, response_stream::Channel, assay_result_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assay_result(_api, assay_result_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_assay_results_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultsPaginatedList,
)

function _oacinternal_list_assay_results(_api::AssayResultsApi; schema_id=nothing, created_at_lt=nothing, created_at_gt=nothing, created_at_lte=nothing, created_at_gte=nothing, min_created_time=nothing, max_created_time=nothing, sort=nothing, next_token=nothing, page_size=nothing, entity_ids=nothing, storage_ids=nothing, assay_run_ids=nothing, automation_output_processor_id=nothing, ids=nothing, modified_at_lt=nothing, modified_at_gt=nothing, modified_at_lte=nothing, modified_at_gte=nothing, archive_reason=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_assay_results", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_assay_results", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_assay_results_AssayResultsApi, "/assay-results", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "createdAt.lt", created_at_lt)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "createdAt.gt", created_at_gt)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "createdAt.lte", created_at_lte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "createdAt.gte", created_at_gte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "minCreatedTime", min_created_time)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "maxCreatedTime", max_created_time)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "entityIds", entity_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "storageIds", storage_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "assayRunIds", assay_run_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "automationOutputProcessorId", automation_output_processor_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt.lt", modified_at_lt)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt.gt", modified_at_gt)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt.lte", modified_at_lte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt.gte", modified_at_gte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List results

List results

Params:
- schema_id::String
- created_at_lt::String
- created_at_gt::String
- created_at_lte::String
- created_at_gte::String
- min_created_time::Int64
- max_created_time::Int64
- sort::String
- next_token::String
- page_size::Int64
- entity_ids::String
- storage_ids::String
- assay_run_ids::String
- automation_output_processor_id::String
- ids::String
- modified_at_lt::String
- modified_at_gt::String
- modified_at_lte::String
- modified_at_gte::String
- archive_reason::String

Return: AssayResultsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_assay_results(_api::AssayResultsApi; schema_id=nothing, created_at_lt=nothing, created_at_gt=nothing, created_at_lte=nothing, created_at_gte=nothing, min_created_time=nothing, max_created_time=nothing, sort=nothing, next_token=nothing, page_size=nothing, entity_ids=nothing, storage_ids=nothing, assay_run_ids=nothing, automation_output_processor_id=nothing, ids=nothing, modified_at_lt=nothing, modified_at_gt=nothing, modified_at_lte=nothing, modified_at_gte=nothing, archive_reason=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assay_results(_api; schema_id=schema_id, created_at_lt=created_at_lt, created_at_gt=created_at_gt, created_at_lte=created_at_lte, created_at_gte=created_at_gte, min_created_time=min_created_time, max_created_time=max_created_time, sort=sort, next_token=next_token, page_size=page_size, entity_ids=entity_ids, storage_ids=storage_ids, assay_run_ids=assay_run_ids, automation_output_processor_id=automation_output_processor_id, ids=ids, modified_at_lt=modified_at_lt, modified_at_gt=modified_at_gt, modified_at_lte=modified_at_lte, modified_at_gte=modified_at_gte, archive_reason=archive_reason, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_assay_results(_api::AssayResultsApi, response_stream::Channel; schema_id=nothing, created_at_lt=nothing, created_at_gt=nothing, created_at_lte=nothing, created_at_gte=nothing, min_created_time=nothing, max_created_time=nothing, sort=nothing, next_token=nothing, page_size=nothing, entity_ids=nothing, storage_ids=nothing, assay_run_ids=nothing, automation_output_processor_id=nothing, ids=nothing, modified_at_lt=nothing, modified_at_gt=nothing, modified_at_lte=nothing, modified_at_gte=nothing, archive_reason=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assay_results(_api; schema_id=schema_id, created_at_lt=created_at_lt, created_at_gt=created_at_gt, created_at_lte=created_at_lte, created_at_gte=created_at_gte, min_created_time=min_created_time, max_created_time=max_created_time, sort=sort, next_token=next_token, page_size=page_size, entity_ids=entity_ids, storage_ids=storage_ids, assay_run_ids=assay_run_ids, automation_output_processor_id=automation_output_processor_id, ids=ids, modified_at_lt=modified_at_lt, modified_at_gt=modified_at_gt, modified_at_lte=modified_at_lte, modified_at_gte=modified_at_gte, archive_reason=archive_reason, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_assay_results_AssayResultsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssayResultIdsResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_assay_results(_api::AssayResultsApi; assay_result_ids_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_assay_results_AssayResultsApi, "/assay-results:unarchive", ["basicApiKeyAuth", "oAuth", ], assay_result_ids_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive 1 or more results.

Unarchive 1 or more results.

Params:
- assay_result_ids_request::AssayResultIdsRequest

Return: AssayResultIdsResponse, OpenAPI.Clients.ApiResponse
"""
function unarchive_assay_results(_api::AssayResultsApi; assay_result_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_assay_results(_api; assay_result_ids_request=assay_result_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_assay_results(_api::AssayResultsApi, response_stream::Channel; assay_result_ids_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_assay_results(_api; assay_result_ids_request=assay_result_ids_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export abort_assay_results_transaction
export archive_assay_results
export bulk_get_assay_results
export commit_assay_results_transaction
export create_assay_results
export create_assay_results_in_transaction
export create_assay_results_transaction
export get_assay_result
export list_assay_results
export unarchive_assay_results
