# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct RegistryApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `RegistryApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ RegistryApi }) = "/api/v2"

const _returntypes_bulk_get_registered_entities_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RegisteredEntitiesList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_bulk_get_registered_entities(_api::RegistryApi, registry_id::String, entity_registry_ids::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_registered_entities_RegistryApi, "/registries/{registry_id}/registered-entities:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entityRegistryIds", entity_registry_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get registered entities

Bulk get registered entities

Params:
- registry_id::String (required)
- entity_registry_ids::String (required)

Return: RegisteredEntitiesList, OpenAPI.Clients.ApiResponse
"""
function bulk_get_registered_entities(_api::RegistryApi, registry_id::String, entity_registry_ids::String; _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_registered_entities(_api, registry_id, entity_registry_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_registered_entities(_api::RegistryApi, response_stream::Channel, registry_id::String, entity_registry_ids::String; _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_registered_entities(_api, registry_id, entity_registry_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Registry,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_registry_RegistryApi, "/registries/{registry_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get registry

Get registry

Params:
- registry_id::String (required)

Return: Registry, OpenAPI.Clients.ApiResponse
"""
function get_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_batch_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchSchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_batch_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_batch_schemas_by_registry_RegistryApi, "/registries/{registry_id}/batch-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List batch schemas by registry

List batch schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: BatchSchemasList, OpenAPI.Clients.ApiResponse
"""
function list_batch_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_batch_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_batch_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_batch_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_box_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxSchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_box_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_box_schemas_by_registry_RegistryApi, "/registries/{registry_id}/box-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List box schemas by registry

List box schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: BoxSchemasList, OpenAPI.Clients.ApiResponse
"""
function list_box_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_box_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_box_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_box_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_container_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ContainerSchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_container_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_container_schemas_by_registry_RegistryApi, "/registries/{registry_id}/container-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List container schemas by registry

List container schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: ContainerSchemasList, OpenAPI.Clients.ApiResponse
"""
function list_container_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_container_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_container_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_container_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_dropdowns_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DropdownsRegistryList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_dropdowns_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_dropdowns_by_registry_RegistryApi, "/registries/{registry_id}/dropdowns", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List dropdowns for a given registry

List dropdowns by registry

Params:
- registry_id::String (required)

Return: DropdownsRegistryList, OpenAPI.Clients.ApiResponse
"""
function list_dropdowns_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_dropdowns_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_dropdowns_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_dropdowns_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_entity_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeprecatedEntitySchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_entity_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_entity_schemas_by_registry_RegistryApi, "/registries/{registry_id}/entity-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List entity schemas by registry

List entity schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: DeprecatedEntitySchemasList, OpenAPI.Clients.ApiResponse
"""
function list_entity_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_entity_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_entity_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_entity_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_location_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocationSchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_location_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_location_schemas_by_registry_RegistryApi, "/registries/{registry_id}/location-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List location schemas by registry

List location schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: LocationSchemasList, OpenAPI.Clients.ApiResponse
"""
function list_location_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_location_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_location_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_location_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_plate_schemas_by_registry_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlateSchemasList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_plate_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_plate_schemas_by_registry_RegistryApi, "/registries/{registry_id}/plate-schemas", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List plate schemas by registry

List plate schemas by registry. Deprecated - use Schemas endpoints instead.

Params:
- registry_id::String (required)

Return: PlateSchemasList, OpenAPI.Clients.ApiResponse
"""
function list_plate_schemas_by_registry(_api::RegistryApi, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_plate_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_plate_schemas_by_registry(_api::RegistryApi, response_stream::Channel, registry_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_plate_schemas_by_registry(_api, registry_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_registries_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RegistriesList,
)

function _oacinternal_list_registries(_api::RegistryApi; name=nothing, modified_at=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_registries_RegistryApi, "/registries", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List registries

List registries

Params:
- name::String
- modified_at::String

Return: RegistriesList, OpenAPI.Clients.ApiResponse
"""
function list_registries(_api::RegistryApi; name=nothing, modified_at=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_registries(_api; name=name, modified_at=modified_at, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_registries(_api::RegistryApi, response_stream::Channel; name=nothing, modified_at=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_registries(_api; name=name, modified_at=modified_at, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_register_entities_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_register_entities(_api::RegistryApi, registry_id::String; register_entities_param=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_register_entities_RegistryApi, "/registries/{registry_id}:bulk-register-entities", ["basicApiKeyAuth", "oAuth", ], register_entities_param)
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Register entities

Attempts to move entities into the registry. Limit of 2500 entities per request. This endpoint will first check that the entities are all valid to be moved into the registry, given the namingStrategy. If any entities fail validation, no files will be moved and errors describing invalid entities is returned. If all entities pass validation, the entities are moved into the registry. 

Params:
- registry_id::String (required)
- register_entities_param::RegisterEntities

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function register_entities(_api::RegistryApi, registry_id::String; register_entities_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_register_entities(_api, registry_id; register_entities_param=register_entities_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function register_entities(_api::RegistryApi, response_stream::Channel, registry_id::String; register_entities_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_register_entities(_api, registry_id; register_entities_param=register_entities_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unregister_entities_RegistryApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unregister_entities(_api::RegistryApi, registry_id::String; unregister_entities_param=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unregister_entities_RegistryApi, "/registries/{registry_id}:unregister-entities", ["basicApiKeyAuth", "oAuth", ], unregister_entities_param)
    OpenAPI.Clients.set_param(_ctx.path, "registry_id", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unregister entities

Unregisters entities and moves them to a folder

Params:
- registry_id::String (required)
- unregister_entities_param::UnregisterEntities

Return: Any, OpenAPI.Clients.ApiResponse
"""
function unregister_entities(_api::RegistryApi, registry_id::String; unregister_entities_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unregister_entities(_api, registry_id; unregister_entities_param=unregister_entities_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unregister_entities(_api::RegistryApi, response_stream::Channel, registry_id::String; unregister_entities_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unregister_entities(_api, registry_id; unregister_entities_param=unregister_entities_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export bulk_get_registered_entities
export get_registry
export list_batch_schemas_by_registry
export list_box_schemas_by_registry
export list_container_schemas_by_registry
export list_dropdowns_by_registry
export list_entity_schemas_by_registry
export list_location_schemas_by_registry
export list_plate_schemas_by_registry
export list_registries
export register_entities
export unregister_entities
