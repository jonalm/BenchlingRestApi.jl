# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FeatureLibrariesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FeatureLibrariesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FeatureLibrariesApi }) = "/api/v2"

const _returntypes_bulk_create_features_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_features(_api::FeatureLibrariesApi; features_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_features_FeatureLibrariesApi, "/features:bulk-create", ["basicApiKeyAuth", "oAuth", ], features_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk create Features

Bulk create Features

Params:
- features_bulk_create_request::FeaturesBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_features(_api::FeatureLibrariesApi; features_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_features(_api; features_bulk_create_request=features_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_features(_api::FeatureLibrariesApi, response_stream::Channel; features_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_features(_api; features_bulk_create_request=features_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_feature_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Feature,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_feature(_api::FeatureLibrariesApi; feature_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_feature_FeatureLibrariesApi, "/features", ["basicApiKeyAuth", "oAuth", ], feature_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a Feature

Create a Feature

Params:
- feature_create::FeatureCreate

Return: Feature, OpenAPI.Clients.ApiResponse
"""
function create_feature(_api::FeatureLibrariesApi; feature_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_feature(_api; feature_create=feature_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_feature(_api::FeatureLibrariesApi, response_stream::Channel; feature_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_feature(_api; feature_create=feature_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_feature_library_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => FeatureLibrary,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_feature_library(_api::FeatureLibrariesApi; feature_library_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_feature_library_FeatureLibrariesApi, "/feature-libraries", ["basicApiKeyAuth", "oAuth", ], feature_library_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a Feature Library

Create a Feature Library

Params:
- feature_library_create::FeatureLibraryCreate

Return: FeatureLibrary, OpenAPI.Clients.ApiResponse
"""
function create_feature_library(_api::FeatureLibrariesApi; feature_library_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_feature_library(_api; feature_library_create=feature_library_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_feature_library(_api::FeatureLibrariesApi, response_stream::Channel; feature_library_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_feature_library(_api; feature_library_create=feature_library_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feature_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Feature,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_feature(_api::FeatureLibrariesApi, feature_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feature_FeatureLibrariesApi, "/features/{feature_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "feature_id", feature_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a feature by ID

Get a feature by ID

Params:
- feature_id::String (required)
- returning::String

Return: Feature, OpenAPI.Clients.ApiResponse
"""
function get_feature(_api::FeatureLibrariesApi, feature_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feature(_api, feature_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feature(_api::FeatureLibrariesApi, response_stream::Channel, feature_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feature(_api, feature_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_feature_library_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FeatureLibrary,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_feature_library(_api::FeatureLibrariesApi, feature_library_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_feature_library_FeatureLibrariesApi, "/feature-libraries/{feature_library_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "feature_library_id", feature_library_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a feature library by ID

Get a feature library by ID

Params:
- feature_library_id::String (required)
- returning::String

Return: FeatureLibrary, OpenAPI.Clients.ApiResponse
"""
function get_feature_library(_api::FeatureLibrariesApi, feature_library_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feature_library(_api, feature_library_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_feature_library(_api::FeatureLibrariesApi, response_stream::Channel, feature_library_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_feature_library(_api, feature_library_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_feature_libraries_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FeatureLibrariesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_feature_libraries(_api::FeatureLibrariesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_feature_libraries", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_feature_libraries", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_feature_libraries_FeatureLibrariesApi, "/feature-libraries", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Feature Libraries

List Feature Libraries

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- name_includes::String
- ids::String
- names_any_of::String
- returning::String

Return: FeatureLibrariesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_feature_libraries(_api::FeatureLibrariesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_feature_libraries(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, ids=ids, names_any_of=names_any_of, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_feature_libraries(_api::FeatureLibrariesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_feature_libraries(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, ids=ids, names_any_of=names_any_of, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_features_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FeaturesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_features(_api::FeatureLibrariesApi; page_size=nothing, next_token=nothing, name=nothing, ids=nothing, names_any_of_case_sensitive=nothing, feature_library_id=nothing, feature_type=nothing, match_type=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_features", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_features", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_features_FeatureLibrariesApi, "/features", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "featureLibraryId", feature_library_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "featureType", feature_type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "matchType", match_type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Features

List Features

Params:
- page_size::Int64
- next_token::String
- name::String
- ids::String
- names_any_of_case_sensitive::String
- feature_library_id::String
- feature_type::String
- match_type::String
- returning::String

Return: FeaturesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_features(_api::FeatureLibrariesApi; page_size=nothing, next_token=nothing, name=nothing, ids=nothing, names_any_of_case_sensitive=nothing, feature_library_id=nothing, feature_type=nothing, match_type=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_features(_api; page_size=page_size, next_token=next_token, name=name, ids=ids, names_any_of_case_sensitive=names_any_of_case_sensitive, feature_library_id=feature_library_id, feature_type=feature_type, match_type=match_type, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_features(_api::FeatureLibrariesApi, response_stream::Channel; page_size=nothing, next_token=nothing, name=nothing, ids=nothing, names_any_of_case_sensitive=nothing, feature_library_id=nothing, feature_type=nothing, match_type=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_features(_api; page_size=page_size, next_token=next_token, name=name, ids=ids, names_any_of_case_sensitive=names_any_of_case_sensitive, feature_library_id=feature_library_id, feature_type=feature_type, match_type=match_type, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_feature_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Feature,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_feature(_api::FeatureLibrariesApi, feature_id::String; feature_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_feature_FeatureLibrariesApi, "/features/{feature_id}", ["basicApiKeyAuth", "oAuth", ], feature_update)
    OpenAPI.Clients.set_param(_ctx.path, "feature_id", feature_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a feature

Update a feature

Params:
- feature_id::String (required)
- feature_update::FeatureUpdate

Return: Feature, OpenAPI.Clients.ApiResponse
"""
function update_feature(_api::FeatureLibrariesApi, feature_id::String; feature_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_feature(_api, feature_id; feature_update=feature_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_feature(_api::FeatureLibrariesApi, response_stream::Channel, feature_id::String; feature_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_feature(_api, feature_id; feature_update=feature_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_feature_library_FeatureLibrariesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FeatureLibrary,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_feature_library(_api::FeatureLibrariesApi, feature_library_id::String; feature_library_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_feature_library_FeatureLibrariesApi, "/feature-libraries/{feature_library_id}", ["basicApiKeyAuth", "oAuth", ], feature_library_update)
    OpenAPI.Clients.set_param(_ctx.path, "feature_library_id", feature_library_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a feature library

Update a feature library. Note: Features cannot be updated from this endpoint. Use the /features* endpoints to add or modify features. 

Params:
- feature_library_id::String (required)
- feature_library_update::FeatureLibraryUpdate

Return: FeatureLibrary, OpenAPI.Clients.ApiResponse
"""
function update_feature_library(_api::FeatureLibrariesApi, feature_library_id::String; feature_library_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_feature_library(_api, feature_library_id; feature_library_update=feature_library_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_feature_library(_api::FeatureLibrariesApi, response_stream::Channel, feature_library_id::String; feature_library_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_feature_library(_api, feature_library_id; feature_library_update=feature_library_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export bulk_create_features
export create_feature
export create_feature_library
export get_feature
export get_feature_library
export list_feature_libraries
export list_features
export update_feature
export update_feature_library
