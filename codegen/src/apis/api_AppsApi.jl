# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AppsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AppsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AppsApi }) = "/api/v2"

const _returntypes_archive_benchling_apps_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BenchlingAppsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_benchling_apps(_api::AppsApi; benchling_apps_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_benchling_apps_AppsApi, "/apps:archive", ["basicApiKeyAuth", "oAuth", ], benchling_apps_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive apps

Archive apps

Params:
- benchling_apps_archive::BenchlingAppsArchive

Return: BenchlingAppsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_benchling_apps(_api::AppsApi; benchling_apps_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_benchling_apps(_api; benchling_apps_archive=benchling_apps_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_benchling_apps(_api::AppsApi, response_stream::Channel; benchling_apps_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_benchling_apps(_api; benchling_apps_archive=benchling_apps_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_create_app_configuration_items_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_app_configuration_items(_api::AppsApi; app_config_items_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_app_configuration_items_AppsApi, "/app-configuration-items:bulk-create", ["basicApiKeyAuth", "oAuth", ], app_config_items_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Create app configuration items. Limit of 1000 App Config Items per request.

Bulk Create app configuration items

Params:
- app_config_items_bulk_create_request::AppConfigItemsBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_app_configuration_items(_api::AppsApi; app_config_items_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_app_configuration_items(_api; app_config_items_bulk_create_request=app_config_items_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_app_configuration_items(_api::AppsApi, response_stream::Channel; app_config_items_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_app_configuration_items(_api; app_config_items_bulk_create_request=app_config_items_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_update_app_configuration_items_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_update_app_configuration_items(_api::AppsApi; app_config_items_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_update_app_configuration_items_AppsApi, "/app-configuration-items:bulk-update", ["basicApiKeyAuth", "oAuth", ], app_config_items_bulk_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Update app configuration items. Limit of 1000 App Config Items per request.

Bulk Update app configuration items

Params:
- app_config_items_bulk_update_request::AppConfigItemsBulkUpdateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_update_app_configuration_items(_api::AppsApi; app_config_items_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_app_configuration_items(_api; app_config_items_bulk_update_request=app_config_items_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_update_app_configuration_items(_api::AppsApi, response_stream::Channel; app_config_items_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_app_configuration_items(_api; app_config_items_bulk_update_request=app_config_items_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_app_configuration_item_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => AppConfigItem,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_app_configuration_item(_api::AppsApi; app_config_item_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_app_configuration_item_AppsApi, "/app-configuration-items", ["basicApiKeyAuth", "oAuth", ], app_config_item_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create app configuration item

Create app configuration item

Params:
- app_config_item_create::AppConfigItemCreate

Return: AppConfigItem, OpenAPI.Clients.ApiResponse
"""
function create_app_configuration_item(_api::AppsApi; app_config_item_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_app_configuration_item(_api; app_config_item_create=app_config_item_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_app_configuration_item(_api::AppsApi, response_stream::Channel; app_config_item_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_app_configuration_item(_api; app_config_item_create=app_config_item_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_benchling_app_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => BenchlingApp,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("409", "x"=>".") * "\$") => ConflictError,
)

function _oacinternal_create_benchling_app(_api::AppsApi; benchling_app_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_benchling_app_AppsApi, "/apps", ["basicApiKeyAuth", "oAuth", ], benchling_app_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an app

Create an app

Params:
- benchling_app_create::BenchlingAppCreate

Return: BenchlingApp, OpenAPI.Clients.ApiResponse
"""
function create_benchling_app(_api::AppsApi; benchling_app_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_benchling_app(_api; benchling_app_create=benchling_app_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_benchling_app(_api::AppsApi, response_stream::Channel; benchling_app_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_benchling_app(_api; benchling_app_create=benchling_app_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_app_configuration_item_by_id_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AppConfigItem,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_app_configuration_item_by_id(_api::AppsApi, item_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_app_configuration_item_by_id_AppsApi, "/app-configuration-items/{item_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "item_id", item_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get app configuration item

Get app configuration item

Params:
- item_id::String (required)

Return: AppConfigItem, OpenAPI.Clients.ApiResponse
"""
function get_app_configuration_item_by_id(_api::AppsApi, item_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_app_configuration_item_by_id(_api, item_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_app_configuration_item_by_id(_api::AppsApi, response_stream::Channel, item_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_app_configuration_item_by_id(_api, item_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_benchling_app_by_i_d_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BenchlingApp,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_benchling_app_by_i_d(_api::AppsApi, app_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_benchling_app_by_i_d_AppsApi, "/apps/{app_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "app_id", app_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an app by ID

Get an app by ID

Params:
- app_id::String (required)

Return: BenchlingApp, OpenAPI.Clients.ApiResponse
"""
function get_benchling_app_by_i_d(_api::AppsApi, app_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_benchling_app_by_i_d(_api, app_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_benchling_app_by_i_d(_api::AppsApi, response_stream::Channel, app_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_benchling_app_by_i_d(_api, app_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_app_configuration_items_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AppConfigurationPaginatedList,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_list_app_configuration_items(_api::AppsApi; next_token=nothing, page_size=nothing, modified_at=nothing, app_id=nothing, ids=nothing, sort=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_app_configuration_items", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_app_configuration_items", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_app_configuration_items_AppsApi, "/app-configuration-items", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "appId", app_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get app configuration items

Get app configuration items

Params:
- next_token::String
- page_size::Int64
- modified_at::String
- app_id::String
- ids::String
- sort::String

Return: AppConfigurationPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_app_configuration_items(_api::AppsApi; next_token=nothing, page_size=nothing, modified_at=nothing, app_id=nothing, ids=nothing, sort=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_app_configuration_items(_api; next_token=next_token, page_size=page_size, modified_at=modified_at, app_id=app_id, ids=ids, sort=sort, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_app_configuration_items(_api::AppsApi, response_stream::Channel; next_token=nothing, page_size=nothing, modified_at=nothing, app_id=nothing, ids=nothing, sort=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_app_configuration_items(_api; next_token=next_token, page_size=page_size, modified_at=modified_at, app_id=app_id, ids=ids, sort=sort, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_benchling_apps_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BenchlingAppsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
)

function _oacinternal_list_benchling_apps(_api::AppsApi; page_size=nothing, next_token=nothing, sort=nothing, ids=nothing, modified_at=nothing, name=nothing, name_includes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, member_of=nothing, admin_of=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_benchling_apps", :maximum, page_size, 100, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_benchling_apps_AppsApi, "/apps", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "memberOf", member_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "adminOf", admin_of)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List apps

List apps

Params:
- page_size::Int64
- next_token::String
- sort::String
- ids::String
- modified_at::String
- name::String
- name_includes::String
- names_any_of::String
- names_any_of_case_sensitive::String
- creator_ids::String
- member_of::String
- admin_of::String

Return: BenchlingAppsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_benchling_apps(_api::AppsApi; page_size=nothing, next_token=nothing, sort=nothing, ids=nothing, modified_at=nothing, name=nothing, name_includes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, member_of=nothing, admin_of=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_benchling_apps(_api; page_size=page_size, next_token=next_token, sort=sort, ids=ids, modified_at=modified_at, name=name, name_includes=name_includes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, member_of=member_of, admin_of=admin_of, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_benchling_apps(_api::AppsApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, ids=nothing, modified_at=nothing, name=nothing, name_includes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, member_of=nothing, admin_of=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_benchling_apps(_api; page_size=page_size, next_token=next_token, sort=sort, ids=ids, modified_at=modified_at, name=name, name_includes=name_includes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, member_of=member_of, admin_of=admin_of, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_benchling_app_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BenchlingApp,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_patch_benchling_app(_api::AppsApi, app_id::String; benchling_app_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_benchling_app_AppsApi, "/apps/{app_id}", ["basicApiKeyAuth", "oAuth", ], benchling_app_update)
    OpenAPI.Clients.set_param(_ctx.path, "app_id", app_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an app

Update an app

Params:
- app_id::String (required)
- benchling_app_update::BenchlingAppUpdate

Return: BenchlingApp, OpenAPI.Clients.ApiResponse
"""
function patch_benchling_app(_api::AppsApi, app_id::String; benchling_app_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_benchling_app(_api, app_id; benchling_app_update=benchling_app_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_benchling_app(_api::AppsApi, response_stream::Channel, app_id::String; benchling_app_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_benchling_app(_api, app_id; benchling_app_update=benchling_app_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_benchling_apps_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BenchlingAppsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_benchling_apps(_api::AppsApi; benchling_apps_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_benchling_apps_AppsApi, "/apps:unarchive", ["basicApiKeyAuth", "oAuth", ], benchling_apps_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive apps

Unarchive apps

Params:
- benchling_apps_unarchive::BenchlingAppsUnarchive

Return: BenchlingAppsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_benchling_apps(_api::AppsApi; benchling_apps_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_benchling_apps(_api; benchling_apps_unarchive=benchling_apps_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_benchling_apps(_api::AppsApi, response_stream::Channel; benchling_apps_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_benchling_apps(_api; benchling_apps_unarchive=benchling_apps_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_app_configuration_item_AppsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AppConfigItem,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_app_configuration_item(_api::AppsApi, item_id::String; app_config_item_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_app_configuration_item_AppsApi, "/app-configuration-items/{item_id}", ["basicApiKeyAuth", "oAuth", ], app_config_item_update)
    OpenAPI.Clients.set_param(_ctx.path, "item_id", item_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update app configuration item

Update app configuration item

Params:
- item_id::String (required)
- app_config_item_update::AppConfigItemUpdate

Return: AppConfigItem, OpenAPI.Clients.ApiResponse
"""
function update_app_configuration_item(_api::AppsApi, item_id::String; app_config_item_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_app_configuration_item(_api, item_id; app_config_item_update=app_config_item_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_app_configuration_item(_api::AppsApi, response_stream::Channel, item_id::String; app_config_item_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_app_configuration_item(_api, item_id; app_config_item_update=app_config_item_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_benchling_apps
export bulk_create_app_configuration_items
export bulk_update_app_configuration_items
export create_app_configuration_item
export create_benchling_app
export get_app_configuration_item_by_id
export get_benchling_app_by_i_d
export list_app_configuration_items
export list_benchling_apps
export patch_benchling_app
export unarchive_benchling_apps
export update_app_configuration_item
