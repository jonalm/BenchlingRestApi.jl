# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct MoleculesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `MoleculesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ MoleculesApi }) = "/api/v2"

const _returntypes_archive_molecules_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MoleculesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_molecules(_api::MoleculesApi; molecules_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_molecules_MoleculesApi, "/molecules:archive", ["basicApiKeyAuth", "oAuth", ], molecules_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive Molecules

Archive Molecules

Params:
- molecules_archive::MoleculesArchive

Return: MoleculesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_molecules(_api::MoleculesApi; molecules_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_molecules(_api; molecules_archive=molecules_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_molecules(_api::MoleculesApi, response_stream::Channel; molecules_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_molecules(_api; molecules_archive=molecules_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_create_molecules_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_molecules(_api::MoleculesApi; molecules_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_molecules_MoleculesApi, "/molecules:bulk-create", ["basicApiKeyAuth", "oAuth", ], molecules_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Create Molecules

Bulk Create Molecules

Params:
- molecules_bulk_create_request::MoleculesBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_molecules(_api::MoleculesApi; molecules_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_molecules(_api; molecules_bulk_create_request=molecules_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_molecules(_api::MoleculesApi, response_stream::Channel; molecules_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_molecules(_api; molecules_bulk_create_request=molecules_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_update_molecules_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_update_molecules(_api::MoleculesApi; molecules_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_update_molecules_MoleculesApi, "/molecules:bulk-update", ["basicApiKeyAuth", "oAuth", ], molecules_bulk_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Update Molecules

Bulk Update Molecules

Params:
- molecules_bulk_update_request::MoleculesBulkUpdateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_update_molecules(_api::MoleculesApi; molecules_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_molecules(_api; molecules_bulk_update_request=molecules_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_update_molecules(_api::MoleculesApi, response_stream::Channel; molecules_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_molecules(_api; molecules_bulk_update_request=molecules_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_molecule_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Molecule,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("503", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_molecule(_api::MoleculesApi; molecule_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_molecule_MoleculesApi, "/molecules", ["basicApiKeyAuth", "oAuth", ], molecule_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a Molecule

Create a Molecule

Params:
- molecule_create::MoleculeCreate

Return: Molecule, OpenAPI.Clients.ApiResponse
"""
function create_molecule(_api::MoleculesApi; molecule_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_molecule(_api; molecule_create=molecule_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_molecule(_api::MoleculesApi, response_stream::Channel; molecule_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_molecule(_api; molecule_create=molecule_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_molecule_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Molecule,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_molecule(_api::MoleculesApi, molecule_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_molecule_MoleculesApi, "/molecules/{molecule_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "molecule_id", molecule_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a Molecule

Get a Molecule

Params:
- molecule_id::String (required)

Return: Molecule, OpenAPI.Clients.ApiResponse
"""
function get_molecule(_api::MoleculesApi, molecule_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_molecule(_api, molecule_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_molecule(_api::MoleculesApi, response_stream::Channel, molecule_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_molecule(_api, molecule_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_molecules_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MoleculesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_molecules(_api::MoleculesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, author_ids_any_of=nothing, chemical_substructure_mol=nothing, chemical_substructure_smiles=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_molecules", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_molecules", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_molecules_MoleculesApi, "/molecules", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "folderId", folder_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentionedIn", mentioned_in)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "projectId", project_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "registryId", registry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentions", mentions)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entityRegistryIds.anyOf", entity_registry_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "authorIds.anyOf", author_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "chemicalSubstructure.mol", chemical_substructure_mol)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "chemicalSubstructure.smiles", chemical_substructure_smiles)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Molecules

List molecules

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- name_includes::String
- folder_id::String
- mentioned_in::Vector{String}
- project_id::String
- registry_id::String
- schema_id::String
- schema_fields::Dict{String, Any}
- archive_reason::String
- mentions::Vector{String}
- ids::String
- entity_registry_ids_any_of::String
- names_any_of::String
- author_ids_any_of::String
- chemical_substructure_mol::String
- chemical_substructure_smiles::String

Return: MoleculesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_molecules(_api::MoleculesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, author_ids_any_of=nothing, chemical_substructure_mol=nothing, chemical_substructure_smiles=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_molecules(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, author_ids_any_of=author_ids_any_of, chemical_substructure_mol=chemical_substructure_mol, chemical_substructure_smiles=chemical_substructure_smiles, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_molecules(_api::MoleculesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, author_ids_any_of=nothing, chemical_substructure_mol=nothing, chemical_substructure_smiles=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_molecules(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, author_ids_any_of=author_ids_any_of, chemical_substructure_mol=chemical_substructure_mol, chemical_substructure_smiles=chemical_substructure_smiles, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_molecules_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MoleculesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_molecules(_api::MoleculesApi; molecules_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_molecules_MoleculesApi, "/molecules:unarchive", ["basicApiKeyAuth", "oAuth", ], molecules_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive Molecules

Unarchive Molecules

Params:
- molecules_unarchive::MoleculesUnarchive

Return: MoleculesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_molecules(_api::MoleculesApi; molecules_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_molecules(_api; molecules_unarchive=molecules_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_molecules(_api::MoleculesApi, response_stream::Channel; molecules_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_molecules(_api; molecules_unarchive=molecules_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_molecule_MoleculesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Molecule,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_update_molecule(_api::MoleculesApi, molecule_id::String; molecule_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_molecule_MoleculesApi, "/molecules/{molecule_id}", ["basicApiKeyAuth", "oAuth", ], molecule_update)
    OpenAPI.Clients.set_param(_ctx.path, "molecule_id", molecule_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a Molecule

Update a Molecule

Params:
- molecule_id::String (required)
- molecule_update::MoleculeUpdate

Return: Molecule, OpenAPI.Clients.ApiResponse
"""
function update_molecule(_api::MoleculesApi, molecule_id::String; molecule_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_molecule(_api, molecule_id; molecule_update=molecule_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_molecule(_api::MoleculesApi, response_stream::Channel, molecule_id::String; molecule_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_molecule(_api, molecule_id; molecule_update=molecule_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_molecules
export bulk_create_molecules
export bulk_update_molecules
export create_molecule
export get_molecule
export list_molecules
export unarchive_molecules
export update_molecule
