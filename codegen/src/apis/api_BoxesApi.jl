# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct BoxesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `BoxesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ BoxesApi }) = "/api/v2"

const _returntypes_archive_boxes_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxesArchivalChange,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenRestrictedSampleError,
)

function _oacinternal_archive_boxes(_api::BoxesApi; boxes_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_boxes_BoxesApi, "/boxes:archive", ["basicApiKeyAuth", "oAuth", ], boxes_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive boxes

Archive boxes and any containers of the boxes

Params:
- boxes_archive::BoxesArchive

Return: BoxesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_boxes(_api::BoxesApi; boxes_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_boxes(_api; boxes_archive=boxes_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_boxes(_api::BoxesApi, response_stream::Channel; boxes_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_boxes(_api; boxes_archive=boxes_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_boxes_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxesBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_boxes(_api::BoxesApi; box_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_boxes_BoxesApi, "/boxes:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "boxIds", box_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""BulkGet boxes

BulkGet boxes

Params:
- box_ids::String
- barcodes::String

Return: BoxesBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_boxes(_api::BoxesApi; box_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_boxes(_api; box_ids=box_ids, barcodes=barcodes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_boxes(_api::BoxesApi, response_stream::Channel; box_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_boxes(_api; box_ids=box_ids, barcodes=barcodes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_box_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Box,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_box(_api::BoxesApi; box_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_box_BoxesApi, "/boxes", ["basicApiKeyAuth", "oAuth", ], box_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a box

Create a box

Params:
- box_create::BoxCreate

Return: Box, OpenAPI.Clients.ApiResponse
"""
function create_box(_api::BoxesApi; box_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_box(_api; box_create=box_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_box(_api::BoxesApi, response_stream::Channel; box_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_box(_api; box_create=box_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_box_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Box,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_box(_api::BoxesApi, box_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_box_BoxesApi, "/boxes/{box_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "box_id", box_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a box

Get a box

Params:
- box_id::String (required)

Return: Box, OpenAPI.Clients.ApiResponse
"""
function get_box(_api::BoxesApi, box_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_box(_api, box_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_box(_api::BoxesApi, response_stream::Channel, box_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_box(_api, box_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_box_contents_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxContentsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_list_box_contents(_api::BoxesApi, box_id::String; page_size=nothing, next_token=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_box_contents", :maximum, page_size, 100, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_box_contents_BoxesApi, "/boxes/{box_id}/contents", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "box_id", box_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List a box's contents

List a box's contents

Params:
- box_id::String (required)
- page_size::Int64
- next_token::String
- returning::String

Return: BoxContentsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_box_contents(_api::BoxesApi, box_id::String; page_size=nothing, next_token=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_box_contents(_api, box_id; page_size=page_size, next_token=next_token, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_box_contents(_api::BoxesApi, response_stream::Channel, box_id::String; page_size=nothing, next_token=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_box_contents(_api, box_id; page_size=page_size, next_token=next_token, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_boxes_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_boxes(_api::BoxesApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, empty_positions=nothing, empty_positions_gte=nothing, empty_positions_gt=nothing, empty_positions_lte=nothing, empty_positions_lt=nothing, empty_containers=nothing, empty_containers_gte=nothing, empty_containers_gt=nothing, empty_containers_lte=nothing, empty_containers_lt=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_boxes", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_boxes", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_boxes_BoxesApi, "/boxes", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "emptyPositions", empty_positions)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyPositions.gte", empty_positions_gte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyPositions.gt", empty_positions_gt)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyPositions.lte", empty_positions_lte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyPositions.lt", empty_positions_lt)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyContainers", empty_containers)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyContainers.gte", empty_containers_gte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyContainers.gt", empty_containers_gt)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyContainers.lte", empty_containers_lte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "emptyContainers.lt", empty_containers_lt)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "ancestorStorageId", ancestor_storage_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "storageContentsId", storage_contents_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "storageContentsIds", storage_contents_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List boxes

List boxes

Params:
- page_size::Int64
- next_token::String
- sort::String
- schema_id::String
- schema_fields::Dict{String, Any}
- modified_at::String
- name::String
- name_includes::String
- empty_positions::Int64
- empty_positions_gte::Int64
- empty_positions_gt::Int64
- empty_positions_lte::Int64
- empty_positions_lt::Int64
- empty_containers::Int64
- empty_containers_gte::Int64
- empty_containers_gt::Int64
- empty_containers_lte::Int64
- empty_containers_lt::Int64
- ancestor_storage_id::String
- storage_contents_id::String
- storage_contents_ids::String
- archive_reason::String
- ids::String
- barcodes::String
- names_any_of::String
- names_any_of_case_sensitive::String
- creator_ids::String

Return: BoxesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_boxes(_api::BoxesApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, empty_positions=nothing, empty_positions_gte=nothing, empty_positions_gt=nothing, empty_positions_lte=nothing, empty_positions_lt=nothing, empty_containers=nothing, empty_containers_gte=nothing, empty_containers_gt=nothing, empty_containers_lte=nothing, empty_containers_lt=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_boxes(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, empty_positions=empty_positions, empty_positions_gte=empty_positions_gte, empty_positions_gt=empty_positions_gt, empty_positions_lte=empty_positions_lte, empty_positions_lt=empty_positions_lt, empty_containers=empty_containers, empty_containers_gte=empty_containers_gte, empty_containers_gt=empty_containers_gt, empty_containers_lte=empty_containers_lte, empty_containers_lt=empty_containers_lt, ancestor_storage_id=ancestor_storage_id, storage_contents_id=storage_contents_id, storage_contents_ids=storage_contents_ids, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_boxes(_api::BoxesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, empty_positions=nothing, empty_positions_gte=nothing, empty_positions_gt=nothing, empty_positions_lte=nothing, empty_positions_lt=nothing, empty_containers=nothing, empty_containers_gte=nothing, empty_containers_gt=nothing, empty_containers_lte=nothing, empty_containers_lt=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_boxes(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, empty_positions=empty_positions, empty_positions_gte=empty_positions_gte, empty_positions_gt=empty_positions_gt, empty_positions_lte=empty_positions_lte, empty_positions_lt=empty_positions_lt, empty_containers=empty_containers, empty_containers_gte=empty_containers_gte, empty_containers_gt=empty_containers_gt, empty_containers_lte=empty_containers_lte, empty_containers_lt=empty_containers_lt, ancestor_storage_id=ancestor_storage_id, storage_contents_id=storage_contents_id, storage_contents_ids=storage_contents_ids, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_boxes_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BoxesArchivalChange,
)

function _oacinternal_unarchive_boxes(_api::BoxesApi; boxes_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_boxes_BoxesApi, "/boxes:unarchive", ["basicApiKeyAuth", "oAuth", ], boxes_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive boxes

Unarchive boxes and the containers that were archived along with them

Params:
- boxes_unarchive::BoxesUnarchive

Return: BoxesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_boxes(_api::BoxesApi; boxes_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_boxes(_api; boxes_unarchive=boxes_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_boxes(_api::BoxesApi, response_stream::Channel; boxes_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_boxes(_api; boxes_unarchive=boxes_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_box_BoxesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Box,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_box(_api::BoxesApi, box_id::String; box_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_box_BoxesApi, "/boxes/{box_id}", ["basicApiKeyAuth", "oAuth", ], box_update)
    OpenAPI.Clients.set_param(_ctx.path, "box_id", box_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a box

Update a box

Params:
- box_id::String (required)
- box_update::BoxUpdate

Return: Box, OpenAPI.Clients.ApiResponse
"""
function update_box(_api::BoxesApi, box_id::String; box_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_box(_api, box_id; box_update=box_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_box(_api::BoxesApi, response_stream::Channel, box_id::String; box_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_box(_api, box_id; box_update=box_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_boxes
export bulk_get_boxes
export create_box
export get_box
export list_box_contents
export list_boxes
export unarchive_boxes
export update_box
