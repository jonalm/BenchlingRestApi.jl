# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DNAAlignmentsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DNAAlignmentsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DNAAlignmentsApi }) = "/api/v2"

const _returntypes_create_dna_consensus_alignment_DNAAlignmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
)

function _oacinternal_create_dna_consensus_alignment(_api::DNAAlignmentsApi; dna_consensus_alignment_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_dna_consensus_alignment_DNAAlignmentsApi, "/dna-alignments:create-consensus-alignment", ["basicApiKeyAuth", "oAuth", ], dna_consensus_alignment_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a consensus DNA alignment

Create a consensus DNA alignment

Params:
- dna_consensus_alignment_create::DnaConsensusAlignmentCreate

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function create_dna_consensus_alignment(_api::DNAAlignmentsApi; dna_consensus_alignment_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dna_consensus_alignment(_api; dna_consensus_alignment_create=dna_consensus_alignment_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_dna_consensus_alignment(_api::DNAAlignmentsApi, response_stream::Channel; dna_consensus_alignment_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dna_consensus_alignment(_api; dna_consensus_alignment_create=dna_consensus_alignment_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_dna_template_alignment_DNAAlignmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
)

function _oacinternal_create_dna_template_alignment(_api::DNAAlignmentsApi; dna_template_alignment_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_dna_template_alignment_DNAAlignmentsApi, "/dna-alignments:create-template-alignment", ["basicApiKeyAuth", "oAuth", ], dna_template_alignment_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a template DNA alignment

Create a template DNA alignment

Params:
- dna_template_alignment_create::DnaTemplateAlignmentCreate

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function create_dna_template_alignment(_api::DNAAlignmentsApi; dna_template_alignment_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dna_template_alignment(_api; dna_template_alignment_create=dna_template_alignment_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_dna_template_alignment(_api::DNAAlignmentsApi, response_stream::Channel; dna_template_alignment_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dna_template_alignment(_api; dna_template_alignment_create=dna_template_alignment_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_d_n_a_alignment_DNAAlignmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_delete_d_n_a_alignment(_api::DNAAlignmentsApi, dna_alignment_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_d_n_a_alignment_DNAAlignmentsApi, "/dna-alignments/{dna_alignment_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "dna_alignment_id", dna_alignment_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a DNA Alignment

Delete a DNA Alignment

Params:
- dna_alignment_id::String (required)

Return: Any, OpenAPI.Clients.ApiResponse
"""
function delete_d_n_a_alignment(_api::DNAAlignmentsApi, dna_alignment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_d_n_a_alignment(_api, dna_alignment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_d_n_a_alignment(_api::DNAAlignmentsApi, response_stream::Channel, dna_alignment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_d_n_a_alignment(_api, dna_alignment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_d_n_a_alignment_DNAAlignmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DnaAlignment,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_d_n_a_alignment(_api::DNAAlignmentsApi, dna_alignment_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_d_n_a_alignment_DNAAlignmentsApi, "/dna-alignments/{dna_alignment_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "dna_alignment_id", dna_alignment_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a DNA Alignment

Get a DNA Alignment

Params:
- dna_alignment_id::String (required)

Return: DnaAlignment, OpenAPI.Clients.ApiResponse
"""
function get_d_n_a_alignment(_api::DNAAlignmentsApi, dna_alignment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_d_n_a_alignment(_api, dna_alignment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_d_n_a_alignment(_api::DNAAlignmentsApi, response_stream::Channel, dna_alignment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_d_n_a_alignment(_api, dna_alignment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_d_n_a_alignments_DNAAlignmentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DnaAlignmentsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_d_n_a_alignments(_api::DNAAlignmentsApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, sequence_ids=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_d_n_a_alignments", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_d_n_a_alignments", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_d_n_a_alignments_DNAAlignmentsApi, "/dna-alignments", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sequenceIds", sequence_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List DNA Alignments

List DNA Alignments

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- name_includes::String
- ids::String
- names_any_of::String
- names_any_of_case_sensitive::String
- sequence_ids::String

Return: DnaAlignmentsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_d_n_a_alignments(_api::DNAAlignmentsApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, sequence_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_d_n_a_alignments(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, ids=ids, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, sequence_ids=sequence_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_d_n_a_alignments(_api::DNAAlignmentsApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ids=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, sequence_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_d_n_a_alignments(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, ids=ids, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, sequence_ids=sequence_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_dna_consensus_alignment
export create_dna_template_alignment
export delete_d_n_a_alignment
export get_d_n_a_alignment
export list_d_n_a_alignments
