# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PlatesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PlatesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PlatesApi }) = "/api/v2"

const _returntypes_archive_plates_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlatesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenRestrictedSampleError,
)

function _oacinternal_archive_plates(_api::PlatesApi; plates_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_plates_PlatesApi, "/plates:archive", ["basicApiKeyAuth", "oAuth", ], plates_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive plates

Archive plates and any containers of the plates

Params:
- plates_archive::PlatesArchive

Return: PlatesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_plates(_api::PlatesApi; plates_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_plates(_api; plates_archive=plates_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_plates(_api::PlatesApi, response_stream::Channel; plates_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_plates(_api; plates_archive=plates_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_plates_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlatesBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_bulk_get_plates(_api::PlatesApi; plate_ids=nothing, barcodes=nothing, returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_plates_PlatesApi, "/plates:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "plateIds", plate_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""BulkGet plates

BulkGet plates

Params:
- plate_ids::String
- barcodes::String
- returning::String

Return: PlatesBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_plates(_api::PlatesApi; plate_ids=nothing, barcodes=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_plates(_api; plate_ids=plate_ids, barcodes=barcodes, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_plates(_api::PlatesApi, response_stream::Channel; plate_ids=nothing, barcodes=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_plates(_api; plate_ids=plate_ids, barcodes=barcodes, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_plate_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Plate,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_plate(_api::PlatesApi; returning=nothing, plate_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_plate_PlatesApi, "/plates", ["basicApiKeyAuth", "oAuth", ], plate_create)
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a plate

Create a plate

Params:
- returning::String
- plate_create::PlateCreate

Return: Plate, OpenAPI.Clients.ApiResponse
"""
function create_plate(_api::PlatesApi; returning=nothing, plate_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_plate(_api; returning=returning, plate_create=plate_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_plate(_api::PlatesApi, response_stream::Channel; returning=nothing, plate_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_plate(_api; returning=returning, plate_create=plate_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_plate_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Plate,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_plate(_api::PlatesApi, plate_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_plate_PlatesApi, "/plates/{plate_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "plate_id", plate_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a plate

Get a plate

Params:
- plate_id::String (required)
- returning::String

Return: Plate, OpenAPI.Clients.ApiResponse
"""
function get_plate(_api::PlatesApi, plate_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_plate(_api, plate_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_plate(_api::PlatesApi, response_stream::Channel, plate_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_plate(_api, plate_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_plates_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlatesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_plates(_api::PlatesApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, returning=nothing, creator_ids=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_plates", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_plates", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_plates_PlatesApi, "/plates", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ancestorStorageId", ancestor_storage_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "storageContentsId", storage_contents_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "storageContentsIds", storage_contents_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List plates

List plates

Params:
- page_size::Int64
- next_token::String
- sort::String
- schema_id::String
- schema_fields::Dict{String, Any}
- modified_at::String
- name::String
- name_includes::String
- ancestor_storage_id::String
- storage_contents_id::String
- storage_contents_ids::String
- archive_reason::String
- ids::String
- barcodes::String
- names_any_of::String
- names_any_of_case_sensitive::String
- returning::String
- creator_ids::String

Return: PlatesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_plates(_api::PlatesApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, returning=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_plates(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, ancestor_storage_id=ancestor_storage_id, storage_contents_id=storage_contents_id, storage_contents_ids=storage_contents_ids, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, returning=returning, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_plates(_api::PlatesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, storage_contents_id=nothing, storage_contents_ids=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, returning=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_plates(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, ancestor_storage_id=ancestor_storage_id, storage_contents_id=storage_contents_id, storage_contents_ids=storage_contents_ids, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, returning=returning, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_plates_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlatesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_plates(_api::PlatesApi; plates_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_plates_PlatesApi, "/plates:unarchive", ["basicApiKeyAuth", "oAuth", ], plates_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive plates

Unarchive plates and the containers that were archived along with them

Params:
- plates_unarchive::PlatesUnarchive

Return: PlatesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_plates(_api::PlatesApi; plates_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_plates(_api; plates_unarchive=plates_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_plates(_api::PlatesApi, response_stream::Channel; plates_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_plates(_api; plates_unarchive=plates_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_plate_PlatesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Plate,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_plate(_api::PlatesApi, plate_id::String; returning=nothing, plate_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_plate_PlatesApi, "/plates/{plate_id}", ["basicApiKeyAuth", "oAuth", ], plate_update)
    OpenAPI.Clients.set_param(_ctx.path, "plate_id", plate_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a plate

Update a plate

Params:
- plate_id::String (required)
- returning::String
- plate_update::PlateUpdate

Return: Plate, OpenAPI.Clients.ApiResponse
"""
function update_plate(_api::PlatesApi, plate_id::String; returning=nothing, plate_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_plate(_api, plate_id; returning=returning, plate_update=plate_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_plate(_api::PlatesApi, response_stream::Channel, plate_id::String; returning=nothing, plate_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_plate(_api, plate_id; returning=returning, plate_update=plate_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_plates
export bulk_get_plates
export create_plate
export get_plate
export list_plates
export unarchive_plates
export update_plate
