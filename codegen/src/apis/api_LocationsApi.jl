# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct LocationsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `LocationsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ LocationsApi }) = "/api/v2"

const _returntypes_archive_locations_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocationsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenRestrictedSampleError,
)

function _oacinternal_archive_locations(_api::LocationsApi; locations_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_locations_LocationsApi, "/locations:archive", ["basicApiKeyAuth", "oAuth", ], locations_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive locations

Archive locations

Params:
- locations_archive::LocationsArchive

Return: LocationsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_locations(_api::LocationsApi; locations_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_locations(_api; locations_archive=locations_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_locations(_api::LocationsApi, response_stream::Channel; locations_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_locations(_api; locations_archive=locations_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_locations_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocationsBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_bulk_get_locations(_api::LocationsApi; location_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_locations_LocationsApi, "/locations:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "locationIds", location_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""BulkGet locations

BulkGet locations

Params:
- location_ids::String
- barcodes::String

Return: LocationsBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_locations(_api::LocationsApi; location_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_locations(_api; location_ids=location_ids, barcodes=barcodes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_locations(_api::LocationsApi, response_stream::Channel; location_ids=nothing, barcodes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_locations(_api; location_ids=location_ids, barcodes=barcodes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_location_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Location,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_location(_api::LocationsApi; location_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_location_LocationsApi, "/locations", ["basicApiKeyAuth", "oAuth", ], location_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a location

Create a location

Params:
- location_create::LocationCreate

Return: Location, OpenAPI.Clients.ApiResponse
"""
function create_location(_api::LocationsApi; location_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_location(_api; location_create=location_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_location(_api::LocationsApi, response_stream::Channel; location_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_location(_api; location_create=location_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_location_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Location,
    Regex("^" * replace("400", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_location(_api::LocationsApi, location_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_location_LocationsApi, "/locations/{location_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "location_id", location_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a location by ID

Get a location by ID

Params:
- location_id::String (required)

Return: Location, OpenAPI.Clients.ApiResponse
"""
function get_location(_api::LocationsApi, location_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_location(_api, location_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_location(_api::LocationsApi, response_stream::Channel, location_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_location(_api, location_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_locations_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocationsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_locations(_api::LocationsApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_locations", :maximum, page_size, 100, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_locations_LocationsApi, "/locations", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ancestorStorageId", ancestor_storage_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "barcodes", barcodes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List locations

List locations

Params:
- page_size::Int64
- next_token::String
- sort::String
- schema_id::String
- schema_fields::Dict{String, Any}
- modified_at::String
- name::String
- name_includes::String
- ancestor_storage_id::String
- archive_reason::String
- ids::String
- barcodes::String
- names_any_of::String
- names_any_of_case_sensitive::String
- creator_ids::String

Return: LocationsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_locations(_api::LocationsApi; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_locations(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, ancestor_storage_id=ancestor_storage_id, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_locations(_api::LocationsApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, schema_id=nothing, schema_fields=nothing, modified_at=nothing, name=nothing, name_includes=nothing, ancestor_storage_id=nothing, archive_reason=nothing, ids=nothing, barcodes=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_locations(_api; page_size=page_size, next_token=next_token, sort=sort, schema_id=schema_id, schema_fields=schema_fields, modified_at=modified_at, name=name, name_includes=name_includes, ancestor_storage_id=ancestor_storage_id, archive_reason=archive_reason, ids=ids, barcodes=barcodes, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_locations_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocationsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_locations(_api::LocationsApi; locations_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_locations_LocationsApi, "/locations:unarchive", ["basicApiKeyAuth", "oAuth", ], locations_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive locations

Unarchive locations

Params:
- locations_unarchive::LocationsUnarchive

Return: LocationsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_locations(_api::LocationsApi; locations_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_locations(_api; locations_unarchive=locations_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_locations(_api::LocationsApi, response_stream::Channel; locations_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_locations(_api; locations_unarchive=locations_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_location_LocationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Location,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_location(_api::LocationsApi, location_id::String; location_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_location_LocationsApi, "/locations/{location_id}", ["basicApiKeyAuth", "oAuth", ], location_update)
    OpenAPI.Clients.set_param(_ctx.path, "location_id", location_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a location

Update a location

Params:
- location_id::String (required)
- location_update::LocationUpdate

Return: Location, OpenAPI.Clients.ApiResponse
"""
function update_location(_api::LocationsApi, location_id::String; location_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_location(_api, location_id; location_update=location_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_location(_api::LocationsApi, response_stream::Channel, location_id::String; location_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_location(_api, location_id; location_update=location_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_locations
export bulk_get_locations
export create_location
export get_location
export list_locations
export unarchive_locations
export update_location
