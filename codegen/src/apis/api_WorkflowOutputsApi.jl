# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct WorkflowOutputsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `WorkflowOutputsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ WorkflowOutputsApi }) = "/api/v2"

const _returntypes_archive_workflow_outputs_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkflowOutputsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_workflow_outputs_WorkflowOutputsApi, "/workflow-outputs:archive", ["basicApiKeyAuth", "oAuth", ], workflow_outputs_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive one or more workflow outputs

Archive one or more workflow outputs

Params:
- workflow_outputs_archive::WorkflowOutputsArchive

Return: WorkflowOutputsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_workflow_outputs(_api; workflow_outputs_archive=workflow_outputs_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_workflow_outputs(_api::WorkflowOutputsApi, response_stream::Channel; workflow_outputs_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_workflow_outputs(_api; workflow_outputs_archive=workflow_outputs_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_create_workflow_outputs_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_workflow_outputs_WorkflowOutputsApi, "/workflow-outputs:bulk-create", ["basicApiKeyAuth", "oAuth", ], workflow_outputs_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk create new workflow outputs

Bulk create new workflow outputs

Params:
- workflow_outputs_bulk_create_request::WorkflowOutputsBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_workflow_outputs(_api; workflow_outputs_bulk_create_request=workflow_outputs_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_workflow_outputs(_api::WorkflowOutputsApi, response_stream::Channel; workflow_outputs_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_workflow_outputs(_api; workflow_outputs_bulk_create_request=workflow_outputs_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_update_workflow_outputs_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_update_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_update_workflow_outputs_WorkflowOutputsApi, "/workflow-outputs:bulk-update", ["basicApiKeyAuth", "oAuth", ], workflow_outputs_bulk_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk update workflow outputs

Bulk update workflow outputs

Params:
- workflow_outputs_bulk_update_request::WorkflowOutputsBulkUpdateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_update_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_workflow_outputs(_api; workflow_outputs_bulk_update_request=workflow_outputs_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_update_workflow_outputs(_api::WorkflowOutputsApi, response_stream::Channel; workflow_outputs_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_workflow_outputs(_api; workflow_outputs_bulk_update_request=workflow_outputs_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_workflow_output_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => WorkflowOutput,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_workflow_output(_api::WorkflowOutputsApi; workflow_output_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_workflow_output_WorkflowOutputsApi, "/workflow-outputs", ["basicApiKeyAuth", "oAuth", ], workflow_output_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new workflow output

Create a new workflow output

Params:
- workflow_output_create::WorkflowOutputCreate

Return: WorkflowOutput, OpenAPI.Clients.ApiResponse
"""
function create_workflow_output(_api::WorkflowOutputsApi; workflow_output_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_workflow_output(_api; workflow_output_create=workflow_output_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_workflow_output(_api::WorkflowOutputsApi, response_stream::Channel; workflow_output_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_workflow_output(_api; workflow_output_create=workflow_output_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_workflow_output_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkflowOutput,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_workflow_output(_api::WorkflowOutputsApi, workflow_output_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_workflow_output_WorkflowOutputsApi, "/workflow-outputs/{workflow_output_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "workflow_output_id", workflow_output_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a workflow output

Get a workflow output

Params:
- workflow_output_id::String (required)

Return: WorkflowOutput, OpenAPI.Clients.ApiResponse
"""
function get_workflow_output(_api::WorkflowOutputsApi, workflow_output_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_workflow_output(_api, workflow_output_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_workflow_output(_api::WorkflowOutputsApi, response_stream::Channel, workflow_output_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_workflow_output(_api, workflow_output_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_workflow_outputs_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkflowOutputsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_workflow_outputs(_api::WorkflowOutputsApi; ids=nothing, workflow_task_group_ids=nothing, workflow_task_ids=nothing, schema_id=nothing, watcher_ids=nothing, responsible_team_ids=nothing, creation_origin_ids=nothing, linked_item_ids_any_of=nothing, linked_item_ids_all_of=nothing, linked_item_ids_none_of=nothing, schema_fields=nothing, name=nothing, name_includes=nothing, creator_ids=nothing, modified_at=nothing, next_token=nothing, page_size=nothing, display_ids=nothing, archive_reason=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_workflow_outputs", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_workflow_outputs", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_workflow_outputs_WorkflowOutputsApi, "/workflow-outputs", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "workflowTaskGroupIds", workflow_task_group_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "workflowTaskIds", workflow_task_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "watcherIds", watcher_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "responsibleTeamIds", responsible_team_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creationOriginIds", creation_origin_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "linkedItemIds.anyOf", linked_item_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "linkedItemIds.allOf", linked_item_ids_all_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "linkedItemIds.noneOf", linked_item_ids_none_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "displayIds", display_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List workflow outputs

List workflow outputs

Params:
- ids::String
- workflow_task_group_ids::String
- workflow_task_ids::String
- schema_id::String
- watcher_ids::String
- responsible_team_ids::String
- creation_origin_ids::String
- linked_item_ids_any_of::String
- linked_item_ids_all_of::String
- linked_item_ids_none_of::String
- schema_fields::Dict{String, Any}
- name::String
- name_includes::String
- creator_ids::String
- modified_at::String
- next_token::String
- page_size::Int64
- display_ids::String
- archive_reason::String

Return: WorkflowOutputsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_workflow_outputs(_api::WorkflowOutputsApi; ids=nothing, workflow_task_group_ids=nothing, workflow_task_ids=nothing, schema_id=nothing, watcher_ids=nothing, responsible_team_ids=nothing, creation_origin_ids=nothing, linked_item_ids_any_of=nothing, linked_item_ids_all_of=nothing, linked_item_ids_none_of=nothing, schema_fields=nothing, name=nothing, name_includes=nothing, creator_ids=nothing, modified_at=nothing, next_token=nothing, page_size=nothing, display_ids=nothing, archive_reason=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_workflow_outputs(_api; ids=ids, workflow_task_group_ids=workflow_task_group_ids, workflow_task_ids=workflow_task_ids, schema_id=schema_id, watcher_ids=watcher_ids, responsible_team_ids=responsible_team_ids, creation_origin_ids=creation_origin_ids, linked_item_ids_any_of=linked_item_ids_any_of, linked_item_ids_all_of=linked_item_ids_all_of, linked_item_ids_none_of=linked_item_ids_none_of, schema_fields=schema_fields, name=name, name_includes=name_includes, creator_ids=creator_ids, modified_at=modified_at, next_token=next_token, page_size=page_size, display_ids=display_ids, archive_reason=archive_reason, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_workflow_outputs(_api::WorkflowOutputsApi, response_stream::Channel; ids=nothing, workflow_task_group_ids=nothing, workflow_task_ids=nothing, schema_id=nothing, watcher_ids=nothing, responsible_team_ids=nothing, creation_origin_ids=nothing, linked_item_ids_any_of=nothing, linked_item_ids_all_of=nothing, linked_item_ids_none_of=nothing, schema_fields=nothing, name=nothing, name_includes=nothing, creator_ids=nothing, modified_at=nothing, next_token=nothing, page_size=nothing, display_ids=nothing, archive_reason=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_workflow_outputs(_api; ids=ids, workflow_task_group_ids=workflow_task_group_ids, workflow_task_ids=workflow_task_ids, schema_id=schema_id, watcher_ids=watcher_ids, responsible_team_ids=responsible_team_ids, creation_origin_ids=creation_origin_ids, linked_item_ids_any_of=linked_item_ids_any_of, linked_item_ids_all_of=linked_item_ids_all_of, linked_item_ids_none_of=linked_item_ids_none_of, schema_fields=schema_fields, name=name, name_includes=name_includes, creator_ids=creator_ids, modified_at=modified_at, next_token=next_token, page_size=page_size, display_ids=display_ids, archive_reason=archive_reason, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_workflow_outputs_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkflowOutputsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_workflow_outputs_WorkflowOutputsApi, "/workflow-outputs:unarchive", ["basicApiKeyAuth", "oAuth", ], workflow_outputs_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive one or more workflow outputs

Unarchive one or more workflow outputs

Params:
- workflow_outputs_unarchive::WorkflowOutputsUnarchive

Return: WorkflowOutputsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_workflow_outputs(_api::WorkflowOutputsApi; workflow_outputs_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_workflow_outputs(_api; workflow_outputs_unarchive=workflow_outputs_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_workflow_outputs(_api::WorkflowOutputsApi, response_stream::Channel; workflow_outputs_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_workflow_outputs(_api; workflow_outputs_unarchive=workflow_outputs_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_workflow_output_WorkflowOutputsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkflowOutput,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_workflow_output(_api::WorkflowOutputsApi, workflow_output_id::String, workflow_output_update::WorkflowOutputUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_workflow_output_WorkflowOutputsApi, "/workflow-outputs/{workflow_output_id}", ["basicApiKeyAuth", "oAuth", ], workflow_output_update)
    OpenAPI.Clients.set_param(_ctx.path, "workflow_output_id", workflow_output_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a workflow output

Update a workflow output

Params:
- workflow_output_id::String (required)
- workflow_output_update::WorkflowOutputUpdate (required)

Return: WorkflowOutput, OpenAPI.Clients.ApiResponse
"""
function update_workflow_output(_api::WorkflowOutputsApi, workflow_output_id::String, workflow_output_update::WorkflowOutputUpdate; _mediaType=nothing)
    _ctx = _oacinternal_update_workflow_output(_api, workflow_output_id, workflow_output_update; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_workflow_output(_api::WorkflowOutputsApi, response_stream::Channel, workflow_output_id::String, workflow_output_update::WorkflowOutputUpdate; _mediaType=nothing)
    _ctx = _oacinternal_update_workflow_output(_api, workflow_output_id, workflow_output_update; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_workflow_outputs
export bulk_create_workflow_outputs
export bulk_update_workflow_outputs
export create_workflow_output
export get_workflow_output
export list_workflow_outputs
export unarchive_workflow_outputs
export update_workflow_output
