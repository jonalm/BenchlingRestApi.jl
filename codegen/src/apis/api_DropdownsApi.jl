# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DropdownsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DropdownsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DropdownsApi }) = "/api/v2"

const _returntypes_archive_dropdown_options_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DropdownOptionsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_archive_dropdown_options(_api::DropdownsApi, dropdown_id::String; dropdown_options_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_dropdown_options_DropdownsApi, "/dropdowns/{dropdown_id}/options:archive", ["basicApiKeyAuth", "oAuth", ], dropdown_options_archive)
    OpenAPI.Clients.set_param(_ctx.path, "dropdown_id", dropdown_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive dropdown options

Archive options belonging to a dropdown

Params:
- dropdown_id::String (required)
- dropdown_options_archive::DropdownOptionsArchive

Return: DropdownOptionsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_dropdown_options(_api::DropdownsApi, dropdown_id::String; dropdown_options_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_dropdown_options(_api, dropdown_id; dropdown_options_archive=dropdown_options_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_dropdown_options(_api::DropdownsApi, response_stream::Channel, dropdown_id::String; dropdown_options_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_dropdown_options(_api, dropdown_id; dropdown_options_archive=dropdown_options_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_dropdown_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dropdown,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_dropdown(_api::DropdownsApi; dropdown_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_dropdown_DropdownsApi, "/dropdowns", ["basicApiKeyAuth", "oAuth", ], dropdown_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a dropdown

Create a dropdown

Params:
- dropdown_create::DropdownCreate

Return: Dropdown, OpenAPI.Clients.ApiResponse
"""
function create_dropdown(_api::DropdownsApi; dropdown_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dropdown(_api; dropdown_create=dropdown_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_dropdown(_api::DropdownsApi, response_stream::Channel; dropdown_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_dropdown(_api; dropdown_create=dropdown_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_dropdown_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dropdown,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_dropdown(_api::DropdownsApi, dropdown_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_dropdown_DropdownsApi, "/dropdowns/{dropdown_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "dropdown_id", dropdown_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a dropdown

Get a dropdown

Params:
- dropdown_id::String (required)

Return: Dropdown, OpenAPI.Clients.ApiResponse
"""
function get_dropdown(_api::DropdownsApi, dropdown_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_dropdown(_api, dropdown_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_dropdown(_api::DropdownsApi, response_stream::Channel, dropdown_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_dropdown(_api, dropdown_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_dropdowns_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DropdownSummariesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_dropdowns(_api::DropdownsApi; next_token=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_dropdowns", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_dropdowns", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_dropdowns_DropdownsApi, "/dropdowns", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List dropdowns

List dropdowns

Params:
- next_token::String
- page_size::Int64

Return: DropdownSummariesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_dropdowns(_api::DropdownsApi; next_token=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_dropdowns(_api; next_token=next_token, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_dropdowns(_api::DropdownsApi, response_stream::Channel; next_token=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_dropdowns(_api; next_token=next_token, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_dropdown_options_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DropdownOptionsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_unarchive_dropdown_options(_api::DropdownsApi, dropdown_id::String; dropdown_options_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_dropdown_options_DropdownsApi, "/dropdowns/{dropdown_id}/options:unarchive", ["basicApiKeyAuth", "oAuth", ], dropdown_options_unarchive)
    OpenAPI.Clients.set_param(_ctx.path, "dropdown_id", dropdown_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive dropdown options

Unarchive options belonging to a dropdown

Params:
- dropdown_id::String (required)
- dropdown_options_unarchive::DropdownOptionsUnarchive

Return: DropdownOptionsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_dropdown_options(_api::DropdownsApi, dropdown_id::String; dropdown_options_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_dropdown_options(_api, dropdown_id; dropdown_options_unarchive=dropdown_options_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_dropdown_options(_api::DropdownsApi, response_stream::Channel, dropdown_id::String; dropdown_options_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_dropdown_options(_api, dropdown_id; dropdown_options_unarchive=dropdown_options_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_dropdown_DropdownsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dropdown,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("403", "x"=>".") * "\$") => ForbiddenError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_update_dropdown(_api::DropdownsApi, dropdown_id::String; dropdown_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_dropdown_DropdownsApi, "/dropdowns/{dropdown_id}", ["basicApiKeyAuth", "oAuth", ], dropdown_update)
    OpenAPI.Clients.set_param(_ctx.path, "dropdown_id", dropdown_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a dropdown

Update a dropdown

Params:
- dropdown_id::String (required)
- dropdown_update::DropdownUpdate

Return: Dropdown, OpenAPI.Clients.ApiResponse
"""
function update_dropdown(_api::DropdownsApi, dropdown_id::String; dropdown_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_dropdown(_api, dropdown_id; dropdown_update=dropdown_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_dropdown(_api::DropdownsApi, response_stream::Channel, dropdown_id::String; dropdown_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_dropdown(_api, dropdown_id; dropdown_update=dropdown_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_dropdown_options
export create_dropdown
export get_dropdown
export list_dropdowns
export unarchive_dropdown_options
export update_dropdown
