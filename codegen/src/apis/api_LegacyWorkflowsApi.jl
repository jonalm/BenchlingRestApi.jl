# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct LegacyWorkflowsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `LegacyWorkflowsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ LegacyWorkflowsApi }) = "/api/v2"

const _returntypes_list_legacy_workflow_stage_run_input_samples_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowSampleList,
)

function _oacinternal_list_legacy_workflow_stage_run_input_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflow_stage_run_input_samples_LegacyWorkflowsApi, "/legacy-workflow-stage-runs/{stage_run_id}/input-samples", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "stage_run_id", stage_run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflow stage run input samples

List legacy workflow stage run input samples

Params:
- stage_run_id::String (required)

Return: LegacyWorkflowSampleList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflow_stage_run_input_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_input_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflow_stage_run_input_samples(_api::LegacyWorkflowsApi, response_stream::Channel, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_input_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_legacy_workflow_stage_run_output_samples_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowSampleList,
)

function _oacinternal_list_legacy_workflow_stage_run_output_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflow_stage_run_output_samples_LegacyWorkflowsApi, "/legacy-workflow-stage-runs/{stage_run_id}/output-samples", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "stage_run_id", stage_run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflow stage run output samples

List legacy workflow stage run output samples

Params:
- stage_run_id::String (required)

Return: LegacyWorkflowSampleList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflow_stage_run_output_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_output_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflow_stage_run_output_samples(_api::LegacyWorkflowsApi, response_stream::Channel, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_output_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_legacy_workflow_stage_run_registered_samples_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowSampleList,
)

function _oacinternal_list_legacy_workflow_stage_run_registered_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflow_stage_run_registered_samples_LegacyWorkflowsApi, "/legacy-workflow-stage-runs/{stage_run_id}/registered-samples", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "stage_run_id", stage_run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflow stage run registered samples

List legacy workflow stage run registered samples

Params:
- stage_run_id::String (required)

Return: LegacyWorkflowSampleList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflow_stage_run_registered_samples(_api::LegacyWorkflowsApi, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_registered_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflow_stage_run_registered_samples(_api::LegacyWorkflowsApi, response_stream::Channel, stage_run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_run_registered_samples(_api, stage_run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_legacy_workflow_stage_runs_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowStageRunList,
)

function _oacinternal_list_legacy_workflow_stage_runs(_api::LegacyWorkflowsApi, stage_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflow_stage_runs_LegacyWorkflowsApi, "/legacy-workflow-stages/{stage_id}/workflow-stage-runs", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "stage_id", stage_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflow stage runs

List legacy workflow stage runs

Params:
- stage_id::String (required)

Return: LegacyWorkflowStageRunList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflow_stage_runs(_api::LegacyWorkflowsApi, stage_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_runs(_api, stage_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflow_stage_runs(_api::LegacyWorkflowsApi, response_stream::Channel, stage_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stage_runs(_api, stage_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_legacy_workflow_stages_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowStageList,
)

function _oacinternal_list_legacy_workflow_stages(_api::LegacyWorkflowsApi, legacy_workflow_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflow_stages_LegacyWorkflowsApi, "/legacy-workflows/{legacy_workflow_id}/workflow-stages", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "legacy_workflow_id", legacy_workflow_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflow stages

List legacy workflow stages

Params:
- legacy_workflow_id::String (required)

Return: LegacyWorkflowStageList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflow_stages(_api::LegacyWorkflowsApi, legacy_workflow_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stages(_api, legacy_workflow_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflow_stages(_api::LegacyWorkflowsApi, response_stream::Channel, legacy_workflow_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflow_stages(_api, legacy_workflow_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_legacy_workflows_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflowList,
)

function _oacinternal_list_legacy_workflows(_api::LegacyWorkflowsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_legacy_workflows_LegacyWorkflowsApi, "/legacy-workflows", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List legacy workflows

List legacy workflows

Params:

Return: LegacyWorkflowList, OpenAPI.Clients.ApiResponse
"""
function list_legacy_workflows(_api::LegacyWorkflowsApi; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflows(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_legacy_workflows(_api::LegacyWorkflowsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_legacy_workflows(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_legacy_workflow_metadata_LegacyWorkflowsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LegacyWorkflow,
)

function _oacinternal_update_legacy_workflow_metadata(_api::LegacyWorkflowsApi, legacy_workflow_id::String; legacy_workflow_patch=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_legacy_workflow_metadata_LegacyWorkflowsApi, "/legacy-workflows/{legacy_workflow_id}", ["basicApiKeyAuth", "oAuth", ], legacy_workflow_patch)
    OpenAPI.Clients.set_param(_ctx.path, "legacy_workflow_id", legacy_workflow_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update legacy workflow

Update workflow metadata

Params:
- legacy_workflow_id::String (required)
- legacy_workflow_patch::LegacyWorkflowPatch

Return: LegacyWorkflow, OpenAPI.Clients.ApiResponse
"""
function update_legacy_workflow_metadata(_api::LegacyWorkflowsApi, legacy_workflow_id::String; legacy_workflow_patch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_legacy_workflow_metadata(_api, legacy_workflow_id; legacy_workflow_patch=legacy_workflow_patch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_legacy_workflow_metadata(_api::LegacyWorkflowsApi, response_stream::Channel, legacy_workflow_id::String; legacy_workflow_patch=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_legacy_workflow_metadata(_api, legacy_workflow_id; legacy_workflow_patch=legacy_workflow_patch, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export list_legacy_workflow_stage_run_input_samples
export list_legacy_workflow_stage_run_output_samples
export list_legacy_workflow_stage_run_registered_samples
export list_legacy_workflow_stage_runs
export list_legacy_workflow_stages
export list_legacy_workflows
export update_legacy_workflow_metadata
