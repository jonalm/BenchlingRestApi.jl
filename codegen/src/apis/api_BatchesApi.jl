# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct BatchesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `BatchesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ BatchesApi }) = "/api/v2"

const _returntypes_archive_batches_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_batches(_api::BatchesApi; batches_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_batches_BatchesApi, "/batches:archive", ["basicApiKeyAuth", "oAuth", ], batches_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive Batches

Archive Batches

Params:
- batches_archive::BatchesArchive

Return: BatchesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_batches(_api::BatchesApi; batches_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_batches(_api; batches_archive=batches_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_batches(_api::BatchesApi, response_stream::Channel; batches_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_batches(_api; batches_archive=batches_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_batches_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchesBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_batches(_api::BatchesApi; batch_ids=nothing, batch_names=nothing, registry_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_batches_BatchesApi, "/batches:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "batchIds", batch_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "batchNames", batch_names)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "registryId", registry_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get batches

Batches can be queried by their IDs or their names. Querying by name requires specifying a registryId since batch names are not necessarily unique across registries. Batches must be registered to query by name. 

Params:
- batch_ids::String
- batch_names::String
- registry_id::String

Return: BatchesBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_batches(_api::BatchesApi; batch_ids=nothing, batch_names=nothing, registry_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_batches(_api; batch_ids=batch_ids, batch_names=batch_names, registry_id=registry_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_batches(_api::BatchesApi, response_stream::Channel; batch_ids=nothing, batch_names=nothing, registry_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_batches(_api; batch_ids=batch_ids, batch_names=batch_names, registry_id=registry_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_batch_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Batch,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_batch(_api::BatchesApi; batch_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_batch_BatchesApi, "/batches", ["basicApiKeyAuth", "oAuth", ], batch_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a batch

Create a batch

Params:
- batch_create::BatchCreate

Return: Batch, OpenAPI.Clients.ApiResponse
"""
function create_batch(_api::BatchesApi; batch_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_batch(_api; batch_create=batch_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_batch(_api::BatchesApi, response_stream::Channel; batch_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_batch(_api; batch_create=batch_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_batch_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Batch,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_batch(_api::BatchesApi, batch_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_batch_BatchesApi, "/batches/{batch_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "batch_id", batch_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a batch

Get a batch

Params:
- batch_id::String (required)

Return: Batch, OpenAPI.Clients.ApiResponse
"""
function get_batch(_api::BatchesApi, batch_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_batch(_api, batch_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_batch(_api::BatchesApi, response_stream::Channel, batch_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_batch(_api, batch_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_enitity_batches_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_enitity_batches(_api::BatchesApi, entity_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_enitity_batches_BatchesApi, "/entities/{entity_id}/batches", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "entity_id", entity_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an entity's batches

Get an entity's batches

Params:
- entity_id::String (required)

Return: BatchesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function get_enitity_batches(_api::BatchesApi, entity_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_enitity_batches(_api, entity_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_enitity_batches(_api::BatchesApi, response_stream::Channel, entity_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_enitity_batches(_api, entity_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_batches_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_batches(_api::BatchesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, ids=nothing, creator_ids=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_batches", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_batches", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_batches_BatchesApi, "/batches", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List batches

List batches

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- schema_id::String
- schema_fields::Dict{String, Any}
- archive_reason::String
- ids::String
- creator_ids::String

Return: BatchesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_batches(_api::BatchesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, ids=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_batches(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, ids=ids, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_batches(_api::BatchesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, ids=nothing, creator_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_batches(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, ids=ids, creator_ids=creator_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_batches_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BatchesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_batches(_api::BatchesApi; batches_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_batches_BatchesApi, "/batches:unarchive", ["basicApiKeyAuth", "oAuth", ], batches_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive Batches

Unarchive Batches

Params:
- batches_unarchive::BatchesUnarchive

Return: BatchesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_batches(_api::BatchesApi; batches_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_batches(_api; batches_unarchive=batches_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_batches(_api::BatchesApi, response_stream::Channel; batches_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_batches(_api; batches_unarchive=batches_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_batch_BatchesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Batch,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_update_batch(_api::BatchesApi, batch_id::String; batch_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_batch_BatchesApi, "/batches/{batch_id}", ["basicApiKeyAuth", "oAuth", ], batch_update)
    OpenAPI.Clients.set_param(_ctx.path, "batch_id", batch_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a batch

Update a batch

Params:
- batch_id::String (required)
- batch_update::BatchUpdate

Return: Batch, OpenAPI.Clients.ApiResponse
"""
function update_batch(_api::BatchesApi, batch_id::String; batch_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_batch(_api, batch_id; batch_update=batch_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_batch(_api::BatchesApi, response_stream::Channel, batch_id::String; batch_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_batch(_api, batch_id; batch_update=batch_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_batches
export bulk_get_batches
export create_batch
export get_batch
export get_enitity_batches
export list_batches
export unarchive_batches
export update_batch
