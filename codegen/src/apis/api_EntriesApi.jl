# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct EntriesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `EntriesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ EntriesApi }) = "/api/v2"

const _returntypes_archive_entries_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntriesArchivalChange,
)

function _oacinternal_archive_entries(_api::EntriesApi; entries_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_entries_EntriesApi, "/entries:archive", ["basicApiKeyAuth", "oAuth", ], entries_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive notebook entries

Archive notebook entries

Params:
- entries_archive::EntriesArchive

Return: EntriesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_entries(_api::EntriesApi; entries_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_entries(_api; entries_archive=entries_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_entries(_api::EntriesApi, response_stream::Channel; entries_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_entries(_api; entries_archive=entries_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_entries_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Entries,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_entries(_api::EntriesApi; entry_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_entries_EntriesApi, "/entries:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "entryIds", entry_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "displayIds", display_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get notebook entries using entry IDs or display IDs

Get notebook entries using entry IDs or display IDs

Params:
- entry_ids::String
- display_ids::String
- returning::String

Return: Entries, OpenAPI.Clients.ApiResponse
"""
function bulk_get_entries(_api::EntriesApi; entry_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_entries(_api; entry_ids=entry_ids, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_entries(_api::EntriesApi, response_stream::Channel; entry_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_entries(_api; entry_ids=entry_ids, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_entry_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Entry,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_entry(_api::EntriesApi; entry_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_entry_EntriesApi, "/entries", ["basicApiKeyAuth", "oAuth", ], entry_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a notebook entry

Create a notebook entry

Params:
- entry_create::EntryCreate

Return: Entry, OpenAPI.Clients.ApiResponse
"""
function create_entry(_api::EntriesApi; entry_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_entry(_api; entry_create=entry_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_entry(_api::EntriesApi, response_stream::Channel; entry_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_entry(_api; entry_create=entry_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_entry_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntryById,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_entry(_api::EntriesApi, entry_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_entry_EntriesApi, "/entries/{entry_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "entry_id", entry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a notebook entry by ID

Get a notebook entry by ID

Params:
- entry_id::String (required)
- returning::String

Return: EntryById, OpenAPI.Clients.ApiResponse
"""
function get_entry(_api::EntriesApi, entry_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_entry(_api, entry_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_entry(_api::EntriesApi, response_stream::Channel, entry_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_entry(_api, entry_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_entry_template_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntryTemplate,
)

function _oacinternal_get_entry_template(_api::EntriesApi, entry_template_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_entry_template_EntriesApi, "/entry-templates/{entry_template_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "entry_template_id", entry_template_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a notebook template entry by ID

Get a notebook template entry by ID

Params:
- entry_template_id::String (required)
- returning::String

Return: EntryTemplate, OpenAPI.Clients.ApiResponse
"""
function get_entry_template(_api::EntriesApi, entry_template_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_entry_template(_api, entry_template_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_entry_template(_api::EntriesApi, response_stream::Channel, entry_template_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_entry_template(_api, entry_template_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_external_file_metadata_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntryExternalFileById,
)

function _oacinternal_get_external_file_metadata(_api::EntriesApi, entry_id::String, external_file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_external_file_metadata_EntriesApi, "/entries/{entry_id}/external-files/{external_file_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "entry_id", entry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "external_file_id", external_file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves the metadata for an external file. Use the 'downloadURL' to download the actual file. 

Retrieves the metadata for an external file. Use the 'downloadURL' to download the actual file. (Expand the schema view for details) 

Params:
- entry_id::String (required)
- external_file_id::String (required)

Return: EntryExternalFileById, OpenAPI.Clients.ApiResponse
"""
function get_external_file_metadata(_api::EntriesApi, entry_id::String, external_file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_external_file_metadata(_api, entry_id, external_file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_external_file_metadata(_api::EntriesApi, response_stream::Channel, entry_id::String, external_file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_external_file_metadata(_api, entry_id, external_file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_entries_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntriesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_entries(_api::EntriesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, project_id=nothing, archive_reason=nothing, review_status=nothing, mentioned_in=nothing, mentions=nothing, ids=nothing, schema_id=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, assigned_reviewer_ids_any_of=nothing, creator_ids=nothing, author_ids_any_of=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_entries", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_entries", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_entries_EntriesApi, "/entries", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "projectId", project_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "reviewStatus", review_status)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentionedIn", mentioned_in)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentions", mentions)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "assignedReviewerIds.anyOf", assigned_reviewer_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "authorIds.anyOf", author_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "displayIds", display_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List entries

List notebook entries

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- project_id::String
- archive_reason::String
- review_status::String
- mentioned_in::String
- mentions::String
- ids::String
- schema_id::String
- names_any_of::String
- names_any_of_case_sensitive::String
- assigned_reviewer_ids_any_of::String
- creator_ids::String
- author_ids_any_of::String
- display_ids::String
- returning::String

Return: EntriesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_entries(_api::EntriesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, project_id=nothing, archive_reason=nothing, review_status=nothing, mentioned_in=nothing, mentions=nothing, ids=nothing, schema_id=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, assigned_reviewer_ids_any_of=nothing, creator_ids=nothing, author_ids_any_of=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_entries(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, project_id=project_id, archive_reason=archive_reason, review_status=review_status, mentioned_in=mentioned_in, mentions=mentions, ids=ids, schema_id=schema_id, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, assigned_reviewer_ids_any_of=assigned_reviewer_ids_any_of, creator_ids=creator_ids, author_ids_any_of=author_ids_any_of, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_entries(_api::EntriesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, project_id=nothing, archive_reason=nothing, review_status=nothing, mentioned_in=nothing, mentions=nothing, ids=nothing, schema_id=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, assigned_reviewer_ids_any_of=nothing, creator_ids=nothing, author_ids_any_of=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_entries(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, project_id=project_id, archive_reason=archive_reason, review_status=review_status, mentioned_in=mentioned_in, mentions=mentions, ids=ids, schema_id=schema_id, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, assigned_reviewer_ids_any_of=assigned_reviewer_ids_any_of, creator_ids=creator_ids, author_ids_any_of=author_ids_any_of, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_entry_templates_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntryTemplatesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_entry_templates(_api::EntriesApi; page_size=nothing, next_token=nothing, modified_at=nothing, name=nothing, template_collection_id=nothing, ids=nothing, schema_id=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_entry_templates", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_entry_templates", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_entry_templates_EntriesApi, "/entry-templates", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "templateCollectionId", template_collection_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List entry templates

List entry templates

Params:
- page_size::Int64
- next_token::String
- modified_at::String
- name::String
- template_collection_id::String
- ids::String
- schema_id::String
- returning::String

Return: EntryTemplatesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_entry_templates(_api::EntriesApi; page_size=nothing, next_token=nothing, modified_at=nothing, name=nothing, template_collection_id=nothing, ids=nothing, schema_id=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_entry_templates(_api; page_size=page_size, next_token=next_token, modified_at=modified_at, name=name, template_collection_id=template_collection_id, ids=ids, schema_id=schema_id, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_entry_templates(_api::EntriesApi, response_stream::Channel; page_size=nothing, next_token=nothing, modified_at=nothing, name=nothing, template_collection_id=nothing, ids=nothing, schema_id=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_entry_templates(_api; page_size=page_size, next_token=next_token, modified_at=modified_at, name=name, template_collection_id=template_collection_id, ids=ids, schema_id=schema_id, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_entries_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EntriesArchivalChange,
)

function _oacinternal_unarchive_entries(_api::EntriesApi; entries_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_entries_EntriesApi, "/entries:unarchive", ["basicApiKeyAuth", "oAuth", ], entries_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive notebook entries

Unarchive notebook entries

Params:
- entries_unarchive::EntriesUnarchive

Return: EntriesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_entries(_api::EntriesApi; entries_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_entries(_api; entries_unarchive=entries_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_entries(_api::EntriesApi, response_stream::Channel; entries_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_entries(_api; entries_unarchive=entries_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_entry_EntriesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Entry,
)

function _oacinternal_update_entry(_api::EntriesApi, entry_id::String; returning=nothing, entry_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_entry_EntriesApi, "/entries/{entry_id}", ["basicApiKeyAuth", "oAuth", ], entry_update)
    OpenAPI.Clients.set_param(_ctx.path, "entry_id", entry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a notebook entry's metadata

Update a notebook entry's metadata

Params:
- entry_id::String (required)
- returning::String
- entry_update::EntryUpdate

Return: Entry, OpenAPI.Clients.ApiResponse
"""
function update_entry(_api::EntriesApi, entry_id::String; returning=nothing, entry_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_entry(_api, entry_id; returning=returning, entry_update=entry_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_entry(_api::EntriesApi, response_stream::Channel, entry_id::String; returning=nothing, entry_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_entry(_api, entry_id; returning=returning, entry_update=entry_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_entries
export bulk_get_entries
export create_entry
export get_entry
export get_entry_template
export get_external_file_metadata
export list_entries
export list_entry_templates
export unarchive_entries
export update_entry
