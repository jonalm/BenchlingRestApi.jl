# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ProjectsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ProjectsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ProjectsApi }) = "/api/v2"

const _returntypes_archive_projects_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ProjectsArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_projects(_api::ProjectsApi; projects_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_projects_ProjectsApi, "/projects:archive", ["basicApiKeyAuth", "oAuth", ], projects_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive projects

Archives projects and their contents

Params:
- projects_archive::ProjectsArchive

Return: ProjectsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_projects(_api::ProjectsApi; projects_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_projects(_api; projects_archive=projects_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_projects(_api::ProjectsApi, response_stream::Channel; projects_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_projects(_api; projects_archive=projects_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_project_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Project,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_project(_api::ProjectsApi, project_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_project_ProjectsApi, "/projects/{project_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "project_id", project_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a project by ID

Get a project by ID

Params:
- project_id::String (required)

Return: Project, OpenAPI.Clients.ApiResponse
"""
function get_project(_api::ProjectsApi, project_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_project(_api, project_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_project(_api::ProjectsApi, response_stream::Channel, project_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_project(_api, project_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_projects_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ProjectsPaginatedList,
)

function _oacinternal_list_projects(_api::ProjectsApi; next_token=nothing, page_size=nothing, sort=nothing, archive_reason=nothing, ids=nothing, name=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_projects", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_projects", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_projects_ProjectsApi, "/projects", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List projects

List projects

Params:
- next_token::String
- page_size::Int64
- sort::String
- archive_reason::String
- ids::String
- name::String

Return: ProjectsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_projects(_api::ProjectsApi; next_token=nothing, page_size=nothing, sort=nothing, archive_reason=nothing, ids=nothing, name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_projects(_api; next_token=next_token, page_size=page_size, sort=sort, archive_reason=archive_reason, ids=ids, name=name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_projects(_api::ProjectsApi, response_stream::Channel; next_token=nothing, page_size=nothing, sort=nothing, archive_reason=nothing, ids=nothing, name=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_projects(_api; next_token=next_token, page_size=page_size, sort=sort, archive_reason=archive_reason, ids=ids, name=name, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_projects_ProjectsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ProjectsArchivalChange,
)

function _oacinternal_unarchive_projects(_api::ProjectsApi; projects_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_projects_ProjectsApi, "/projects:unarchive", ["basicApiKeyAuth", "oAuth", ], projects_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive projects

Unarchives projects and the contents that were archived along with them

Params:
- projects_unarchive::ProjectsUnarchive

Return: ProjectsArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_projects(_api::ProjectsApi; projects_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_projects(_api; projects_unarchive=projects_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_projects(_api::ProjectsApi, response_stream::Channel; projects_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_projects(_api; projects_unarchive=projects_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_projects
export get_project
export list_projects
export unarchive_projects
