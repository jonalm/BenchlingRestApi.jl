# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct RNASequencesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `RNASequencesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ RNASequencesApi }) = "/api/v2"

const _returntypes_archive_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequencesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_r_n_a_sequences_RNASequencesApi, "/rna-sequences:archive", ["basicApiKeyAuth", "oAuth", ], rna_sequences_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive RNA Sequences

Archive RNA Sequences. RNA sequences that are already registered will not be removed from the registry.

Params:
- rna_sequences_archive::RnaSequencesArchive

Return: RnaSequencesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_r_n_a_sequences(_api; rna_sequences_archive=rna_sequences_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel; rna_sequences_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_r_n_a_sequences(_api; rna_sequences_archive=rna_sequences_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_auto_annotate_rna_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_auto_annotate_rna_sequences(_api::RNASequencesApi; auto_annotate_rna_sequences_param=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_auto_annotate_rna_sequences_RNASequencesApi, "/rna-sequences:auto-annotate", ["basicApiKeyAuth", "oAuth", ], auto_annotate_rna_sequences_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Auto-annotate RNA sequences with matching features from specified Feature Libraries

Auto-annotate RNA sequences with matching features from specified Feature Libraries. U/T bases are treated as interchangeable in both features and sequences.

Params:
- auto_annotate_rna_sequences_param::AutoAnnotateRnaSequences

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function auto_annotate_rna_sequences(_api::RNASequencesApi; auto_annotate_rna_sequences_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_auto_annotate_rna_sequences(_api; auto_annotate_rna_sequences_param=auto_annotate_rna_sequences_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function auto_annotate_rna_sequences(_api::RNASequencesApi, response_stream::Channel; auto_annotate_rna_sequences_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_auto_annotate_rna_sequences(_api; auto_annotate_rna_sequences_param=auto_annotate_rna_sequences_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_autofill_r_n_a_sequence_parts_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_autofill_r_n_a_sequence_parts(_api::RNASequencesApi; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_autofill_r_n_a_sequence_parts_RNASequencesApi, "/rna-sequences:autofill-parts", ["basicApiKeyAuth", "oAuth", ], autofill_rna_sequences)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Autofill RNA sequence parts

Autofill parts from matching RNA Sequences with linked schemas.

Params:
- autofill_rna_sequences::AutofillRnaSequences

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function autofill_r_n_a_sequence_parts(_api::RNASequencesApi; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = _oacinternal_autofill_r_n_a_sequence_parts(_api; autofill_rna_sequences=autofill_rna_sequences, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function autofill_r_n_a_sequence_parts(_api::RNASequencesApi, response_stream::Channel; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = _oacinternal_autofill_r_n_a_sequence_parts(_api; autofill_rna_sequences=autofill_rna_sequences, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_autofill_r_n_a_sequence_translations_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_autofill_r_n_a_sequence_translations(_api::RNASequencesApi; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_autofill_r_n_a_sequence_translations_RNASequencesApi, "/rna-sequences:autofill-translations", ["basicApiKeyAuth", "oAuth", ], autofill_rna_sequences)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Autofill RNA sequence translations from Amino Acid sequences with matching schemas

Autofill RNA sequence translations

Params:
- autofill_rna_sequences::AutofillRnaSequences

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function autofill_r_n_a_sequence_translations(_api::RNASequencesApi; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = _oacinternal_autofill_r_n_a_sequence_translations(_api; autofill_rna_sequences=autofill_rna_sequences, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function autofill_r_n_a_sequence_translations(_api::RNASequencesApi, response_stream::Channel; autofill_rna_sequences=nothing, _mediaType=nothing)
    _ctx = _oacinternal_autofill_r_n_a_sequence_translations(_api; autofill_rna_sequences=autofill_rna_sequences, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_create_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_r_n_a_sequences_RNASequencesApi, "/rna-sequences:bulk-create", ["basicApiKeyAuth", "oAuth", ], rna_sequences_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Create RNA sequences

Bulk Create RNA sequences. Limit of 1000 RNA Sequences per request.

Params:
- rna_sequences_bulk_create_request::RnaSequencesBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_r_n_a_sequences(_api; rna_sequences_bulk_create_request=rna_sequences_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel; rna_sequences_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_r_n_a_sequences(_api; rna_sequences_bulk_create_request=rna_sequences_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequencesBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_r_n_a_sequences(_api::RNASequencesApi, rna_sequence_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_r_n_a_sequences_RNASequencesApi, "/rna-sequences:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "rnaSequenceIds", rna_sequence_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get RNA sequences by ID

Bulk get RNA sequences by ID

Params:
- rna_sequence_ids::String (required)
- returning::String

Return: RnaSequencesBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_r_n_a_sequences(_api::RNASequencesApi, rna_sequence_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_r_n_a_sequences(_api, rna_sequence_ids; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel, rna_sequence_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_r_n_a_sequences(_api, rna_sequence_ids; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_update_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_update_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_update_r_n_a_sequences_RNASequencesApi, "/rna-sequences:bulk-update", ["basicApiKeyAuth", "oAuth", ], rna_sequences_bulk_update_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Update RNA sequences

Bulk Update RNA sequences

Params:
- rna_sequences_bulk_update_request::RnaSequencesBulkUpdateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_update_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_r_n_a_sequences(_api; rna_sequences_bulk_update_request=rna_sequences_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_update_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel; rna_sequences_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_r_n_a_sequences(_api; rna_sequences_bulk_update_request=rna_sequences_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_r_n_a_sequence_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => RnaSequence,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("503", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_r_n_a_sequence(_api::RNASequencesApi; rna_sequence_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_r_n_a_sequence_RNASequencesApi, "/rna-sequences", ["basicApiKeyAuth", "oAuth", ], rna_sequence_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an RNA sequence

Create an RNA sequence

Params:
- rna_sequence_create::RnaSequenceCreate

Return: RnaSequence, OpenAPI.Clients.ApiResponse
"""
function create_r_n_a_sequence(_api::RNASequencesApi; rna_sequence_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_r_n_a_sequence(_api; rna_sequence_create=rna_sequence_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_r_n_a_sequence(_api::RNASequencesApi, response_stream::Channel; rna_sequence_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_r_n_a_sequence(_api; rna_sequence_create=rna_sequence_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_r_n_a_sequence_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequence,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_r_n_a_sequence(_api::RNASequencesApi, rna_sequence_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_r_n_a_sequence_RNASequencesApi, "/rna-sequences/{rna_sequence_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "rna_sequence_id", rna_sequence_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an RNA sequence

Get an RNA sequence

Params:
- rna_sequence_id::String (required)
- returning::String

Return: RnaSequence, OpenAPI.Clients.ApiResponse
"""
function get_r_n_a_sequence(_api::RNASequencesApi, rna_sequence_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_r_n_a_sequence(_api, rna_sequence_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_r_n_a_sequence(_api::RNASequencesApi, response_stream::Channel, rna_sequence_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_r_n_a_sequence(_api, rna_sequence_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequencesPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_r_n_a_sequences(_api::RNASequencesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, author_ids_any_of=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_r_n_a_sequences", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_r_n_a_sequences", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_r_n_a_sequences_RNASequencesApi, "/rna-sequences", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nameIncludes", name_includes)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "bases", bases)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "folderId", folder_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentionedIn", mentioned_in)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "projectId", project_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "registryId", registry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentions", mentions)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entityRegistryIds.anyOf", entity_registry_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "authorIds.anyOf", author_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List RNA sequences

List RNA sequences

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- name_includes::String
- bases::String
- folder_id::String
- mentioned_in::String
- project_id::String
- registry_id::String
- schema_id::String
- schema_fields::Dict{String, Any}
- archive_reason::String
- mentions::String
- ids::String
- entity_registry_ids_any_of::String
- names_any_of::String
- names_any_of_case_sensitive::String
- creator_ids::String
- author_ids_any_of::String
- returning::String

Return: RnaSequencesPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_r_n_a_sequences(_api::RNASequencesApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, author_ids_any_of=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_r_n_a_sequences(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, bases=bases, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, author_ids_any_of=author_ids_any_of, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, name_includes=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, author_ids_any_of=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_r_n_a_sequences(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, name_includes=name_includes, bases=bases, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, author_ids_any_of=author_ids_any_of, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_r_n_a_sequences_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequencesArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_r_n_a_sequences_RNASequencesApi, "/rna-sequences:unarchive", ["basicApiKeyAuth", "oAuth", ], rna_sequences_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive RNA sequences

Unarchive RNA sequences

Params:
- rna_sequences_unarchive::RnaSequencesUnarchive

Return: RnaSequencesArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_r_n_a_sequences(_api::RNASequencesApi; rna_sequences_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_r_n_a_sequences(_api; rna_sequences_unarchive=rna_sequences_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_r_n_a_sequences(_api::RNASequencesApi, response_stream::Channel; rna_sequences_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_r_n_a_sequences(_api; rna_sequences_unarchive=rna_sequences_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_r_n_a_sequence_RNASequencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RnaSequence,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_update_r_n_a_sequence(_api::RNASequencesApi, rna_sequence_id::String; rna_sequence_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_r_n_a_sequence_RNASequencesApi, "/rna-sequences/{rna_sequence_id}", ["basicApiKeyAuth", "oAuth", ], rna_sequence_update)
    OpenAPI.Clients.set_param(_ctx.path, "rna_sequence_id", rna_sequence_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an RNA sequence

Update an RNA sequence

Params:
- rna_sequence_id::String (required)
- rna_sequence_update::RnaSequenceUpdate

Return: RnaSequence, OpenAPI.Clients.ApiResponse
"""
function update_r_n_a_sequence(_api::RNASequencesApi, rna_sequence_id::String; rna_sequence_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_r_n_a_sequence(_api, rna_sequence_id; rna_sequence_update=rna_sequence_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_r_n_a_sequence(_api::RNASequencesApi, response_stream::Channel, rna_sequence_id::String; rna_sequence_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_r_n_a_sequence(_api, rna_sequence_id; rna_sequence_update=rna_sequence_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_r_n_a_sequences
export auto_annotate_rna_sequences
export autofill_r_n_a_sequence_parts
export autofill_r_n_a_sequence_translations
export bulk_create_r_n_a_sequences
export bulk_get_r_n_a_sequences
export bulk_update_r_n_a_sequences
export create_r_n_a_sequence
export get_r_n_a_sequence
export list_r_n_a_sequences
export unarchive_r_n_a_sequences
export update_r_n_a_sequence
