# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OligosApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OligosApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OligosApi }) = "/api/v2"

const _returntypes_archive_oligos_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OligosArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_archive_oligos(_api::OligosApi; oligos_archive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_archive_oligos_OligosApi, "/oligos:archive", ["basicApiKeyAuth", "oAuth", ], oligos_archive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Archive Oligos

Archive Oligos

Params:
- oligos_archive::OligosArchive

Return: OligosArchivalChange, OpenAPI.Clients.ApiResponse
"""
function archive_oligos(_api::OligosApi; oligos_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_oligos(_api; oligos_archive=oligos_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function archive_oligos(_api::OligosApi, response_stream::Channel; oligos_archive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_archive_oligos(_api; oligos_archive=oligos_archive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_create_oligos_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => AsyncTaskLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_create_oligos(_api::OligosApi; oligos_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_oligos_OligosApi, "/oligos:bulk-create", ["basicApiKeyAuth", "oAuth", ], oligos_bulk_create_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk Create DNA Oligos

Bulk Create DNA Oligos Please migrate to [Bulk Create DNA Oligos](#/DNA%20Oligos/bulkCreateDNAOligos) so that we can support RNA Oligos. 

Params:
- oligos_bulk_create_request::OligosBulkCreateRequest

Return: AsyncTaskLink, OpenAPI.Clients.ApiResponse
"""
function bulk_create_oligos(_api::OligosApi; oligos_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_oligos(_api; oligos_bulk_create_request=oligos_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_oligos(_api::OligosApi, response_stream::Channel; oligos_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_oligos(_api; oligos_bulk_create_request=oligos_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_oligos_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OligosBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_oligos(_api::OligosApi, oligo_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_oligos_OligosApi, "/oligos:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "oligoIds", oligo_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get Oligos by ID

Bulk get Oligos by ID

Params:
- oligo_ids::String (required)
- returning::String

Return: OligosBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_oligos(_api::OligosApi, oligo_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_oligos(_api, oligo_ids; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_oligos(_api::OligosApi, response_stream::Channel, oligo_ids::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_oligos(_api, oligo_ids; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_oligo_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => DnaOligo,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("503", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_oligo(_api::OligosApi; oligo_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_oligo_OligosApi, "/oligos", ["basicApiKeyAuth", "oAuth", ], oligo_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an Oligo

Create an Oligo

Params:
- oligo_create::OligoCreate

Return: DnaOligo, OpenAPI.Clients.ApiResponse
"""
function create_oligo(_api::OligosApi; oligo_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_oligo(_api; oligo_create=oligo_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_oligo(_api::OligosApi, response_stream::Channel; oligo_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_oligo(_api; oligo_create=oligo_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_oligo_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DnaOligo,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_get_oligo(_api::OligosApi, oligo_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_oligo_OligosApi, "/oligos/{oligo_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "oligo_id", oligo_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an Oligo

Get an Oligo

Params:
- oligo_id::String (required)
- returning::String

Return: DnaOligo, OpenAPI.Clients.ApiResponse
"""
function get_oligo(_api::OligosApi, oligo_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_oligo(_api, oligo_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_oligo(_api::OligosApi, response_stream::Channel, oligo_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_oligo(_api, oligo_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_oligos_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OligosPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_oligos(_api::OligosApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_oligos", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_oligos", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_oligos_OligosApi, "/oligos", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "bases", bases)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "folderId", folder_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentionedIn", mentioned_in)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "projectId", project_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "registryId", registry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "schemaFields", schema_fields)  # type Dict{String, Any}
    OpenAPI.Clients.set_param(_ctx.query, "archiveReason", archive_reason)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "mentions", mentions)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ids", ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "entityRegistryIds.anyOf", entity_registry_ids_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf", names_any_of)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "names.anyOf.caseSensitive", names_any_of_case_sensitive)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "creatorIds", creator_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Oligos

List Oligos

Params:
- page_size::Int64
- next_token::String
- sort::String
- modified_at::String
- name::String
- bases::String
- folder_id::String
- mentioned_in::String
- project_id::String
- registry_id::String
- schema_id::String
- schema_fields::Dict{String, Any}
- archive_reason::String
- mentions::String
- ids::String
- entity_registry_ids_any_of::String
- names_any_of::String
- names_any_of_case_sensitive::String
- creator_ids::String
- returning::String

Return: OligosPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_oligos(_api::OligosApi; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_oligos(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, bases=bases, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_oligos(_api::OligosApi, response_stream::Channel; page_size=nothing, next_token=nothing, sort=nothing, modified_at=nothing, name=nothing, bases=nothing, folder_id=nothing, mentioned_in=nothing, project_id=nothing, registry_id=nothing, schema_id=nothing, schema_fields=nothing, archive_reason=nothing, mentions=nothing, ids=nothing, entity_registry_ids_any_of=nothing, names_any_of=nothing, names_any_of_case_sensitive=nothing, creator_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_oligos(_api; page_size=page_size, next_token=next_token, sort=sort, modified_at=modified_at, name=name, bases=bases, folder_id=folder_id, mentioned_in=mentioned_in, project_id=project_id, registry_id=registry_id, schema_id=schema_id, schema_fields=schema_fields, archive_reason=archive_reason, mentions=mentions, ids=ids, entity_registry_ids_any_of=entity_registry_ids_any_of, names_any_of=names_any_of, names_any_of_case_sensitive=names_any_of_case_sensitive, creator_ids=creator_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unarchive_oligos_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OligosArchivalChange,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_unarchive_oligos(_api::OligosApi; oligos_unarchive=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_unarchive_oligos_OligosApi, "/oligos:unarchive", ["basicApiKeyAuth", "oAuth", ], oligos_unarchive)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unarchive Oligos

Unarchive Oligos

Params:
- oligos_unarchive::OligosUnarchive

Return: OligosArchivalChange, OpenAPI.Clients.ApiResponse
"""
function unarchive_oligos(_api::OligosApi; oligos_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_oligos(_api; oligos_unarchive=oligos_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unarchive_oligos(_api::OligosApi, response_stream::Channel; oligos_unarchive=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unarchive_oligos(_api; oligos_unarchive=oligos_unarchive, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_oligo_OligosApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DnaOligo,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_update_oligo(_api::OligosApi, oligo_id::String; oligo_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_oligo_OligosApi, "/oligos/{oligo_id}", ["basicApiKeyAuth", "oAuth", ], oligo_update)
    OpenAPI.Clients.set_param(_ctx.path, "oligo_id", oligo_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an Oligo

Update an Oligo

Params:
- oligo_id::String (required)
- oligo_update::OligoUpdate

Return: DnaOligo, OpenAPI.Clients.ApiResponse
"""
function update_oligo(_api::OligosApi, oligo_id::String; oligo_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_oligo(_api, oligo_id; oligo_update=oligo_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_oligo(_api::OligosApi, response_stream::Channel, oligo_id::String; oligo_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_oligo(_api, oligo_id; oligo_update=oligo_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export archive_oligos
export bulk_create_oligos
export bulk_get_oligos
export create_oligo
export get_oligo
export list_oligos
export unarchive_oligos
export update_oligo
