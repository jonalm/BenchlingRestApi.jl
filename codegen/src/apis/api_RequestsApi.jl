# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct RequestsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `RequestsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ RequestsApi }) = "/api/v2"

const _returntypes_bulk_create_request_tasks_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestTasksBulkCreateResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestErrorBulk,
)

function _oacinternal_bulk_create_request_tasks(_api::RequestsApi, request_id::String; request_tasks_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_create_request_tasks_RequestsApi, "/requests/{request_id}/tasks:bulk-create", ["basicApiKeyAuth", "oAuth", ], request_tasks_bulk_create_request)
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create tasks for a request

Create tasks for a request

Params:
- request_id::String (required)
- request_tasks_bulk_create_request::RequestTasksBulkCreateRequest

Return: RequestTasksBulkCreateResponse, OpenAPI.Clients.ApiResponse
"""
function bulk_create_request_tasks(_api::RequestsApi, request_id::String; request_tasks_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_request_tasks(_api, request_id; request_tasks_bulk_create_request=request_tasks_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_create_request_tasks(_api::RequestsApi, response_stream::Channel, request_id::String; request_tasks_bulk_create_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_create_request_tasks(_api, request_id; request_tasks_bulk_create_request=request_tasks_bulk_create_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_get_requests_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestsBulkGet,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_bulk_get_requests(_api::RequestsApi; request_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_bulk_get_requests_RequestsApi, "/requests:bulk-get", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "requestIds", request_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "displayIds", display_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get requests

Bulk get requests by API ID or display ID

Params:
- request_ids::String
- display_ids::String
- returning::String

Return: RequestsBulkGet, OpenAPI.Clients.ApiResponse
"""
function bulk_get_requests(_api::RequestsApi; request_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_requests(_api; request_ids=request_ids, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_get_requests(_api::RequestsApi, response_stream::Channel; request_ids=nothing, display_ids=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_get_requests(_api; request_ids=request_ids, display_ids=display_ids, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_bulk_update_request_tasks_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestTasksBulkUpdateResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_bulk_update_request_tasks(_api::RequestsApi, request_id::String; request_tasks_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_bulk_update_request_tasks_RequestsApi, "/requests/{request_id}/tasks:bulk-update", ["basicApiKeyAuth", "oAuth", ], request_tasks_bulk_update_request)
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk update tasks for a request

Bulk update tasks for a request

Params:
- request_id::String (required)
- request_tasks_bulk_update_request::RequestTasksBulkUpdateRequest

Return: RequestTasksBulkUpdateResponse, OpenAPI.Clients.ApiResponse
"""
function bulk_update_request_tasks(_api::RequestsApi, request_id::String; request_tasks_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_request_tasks(_api, request_id; request_tasks_bulk_update_request=request_tasks_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function bulk_update_request_tasks(_api::RequestsApi, response_stream::Channel, request_id::String; request_tasks_bulk_update_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_bulk_update_request_tasks(_api, request_id; request_tasks_bulk_update_request=request_tasks_bulk_update_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_request_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Request,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_create_request(_api::RequestsApi; request_create=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_request_RequestsApi, "/requests", ["basicApiKeyAuth", "oAuth", ], request_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a request

Create a request

Params:
- request_create::RequestCreate

Return: Request, OpenAPI.Clients.ApiResponse
"""
function create_request(_api::RequestsApi; request_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_request(_api; request_create=request_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_request(_api::RequestsApi, response_stream::Channel; request_create=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_request(_api; request_create=request_create, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_execute_requests_sample_groups_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_execute_requests_sample_groups(_api::RequestsApi, request_id::String; sample_groups_status_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_execute_requests_sample_groups_RequestsApi, "/requests/{request_id}:execute-sample-groups", ["basicApiKeyAuth", "oAuth", ], sample_groups_status_update)
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the status of sample groups in a request

Update the status of sample groups in a request

Params:
- request_id::String (required)
- sample_groups_status_update::SampleGroupsStatusUpdate

Return: Any, OpenAPI.Clients.ApiResponse
"""
function execute_requests_sample_groups(_api::RequestsApi, request_id::String; sample_groups_status_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_execute_requests_sample_groups(_api, request_id; sample_groups_status_update=sample_groups_status_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function execute_requests_sample_groups(_api::RequestsApi, response_stream::Channel, request_id::String; sample_groups_status_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_execute_requests_sample_groups(_api, request_id; sample_groups_status_update=sample_groups_status_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_request_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Request,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_request(_api::RequestsApi, request_id::String; returning=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_request_RequestsApi, "/requests/{request_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a request by ID

Get a request by ID

Params:
- request_id::String (required)
- returning::String

Return: Request, OpenAPI.Clients.ApiResponse
"""
function get_request(_api::RequestsApi, request_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_request(_api, request_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_request(_api::RequestsApi, response_stream::Channel, request_id::String; returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_request(_api, request_id; returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_request_fulfillment_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestFulfillment,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_request_fulfillment(_api::RequestsApi, request_fulfillment_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_request_fulfillment_RequestsApi, "/request-fulfillments/{request_fulfillment_id}", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "request_fulfillment_id", request_fulfillment_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a request's fulfillment

Get a request's fulfillment

Params:
- request_fulfillment_id::String (required)

Return: RequestFulfillment, OpenAPI.Clients.ApiResponse
"""
function get_request_fulfillment(_api::RequestsApi, request_fulfillment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_request_fulfillment(_api, request_fulfillment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_request_fulfillment(_api::RequestsApi, response_stream::Channel, request_fulfillment_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_request_fulfillment(_api, request_fulfillment_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_request_response_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestResponse,
    Regex("^" * replace("404", "x"=>".") * "\$") => NotFoundError,
)

function _oacinternal_get_request_response(_api::RequestsApi, request_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_request_response_RequestsApi, "/requests/{request_id}/response", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a request's response

Get a request's response

Params:
- request_id::String (required)

Return: RequestResponse, OpenAPI.Clients.ApiResponse
"""
function get_request_response(_api::RequestsApi, request_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_request_response(_api, request_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_request_response(_api::RequestsApi, response_stream::Channel, request_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_request_response(_api, request_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_request_fulfillments_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestFulfillmentsPaginatedList,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_list_request_fulfillments(_api::RequestsApi, entry_id::String; modified_at=nothing, next_token=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_request_fulfillments", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_request_fulfillments", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_request_fulfillments_RequestsApi, "/request-fulfillments", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "entryId", entry_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "modifiedAt", modified_at)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List Request Fulfillments

List Request Fulfillments

Params:
- entry_id::String (required)
- modified_at::String
- next_token::String
- page_size::Int64

Return: RequestFulfillmentsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_request_fulfillments(_api::RequestsApi, entry_id::String; modified_at=nothing, next_token=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_request_fulfillments(_api, entry_id; modified_at=modified_at, next_token=next_token, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_request_fulfillments(_api::RequestsApi, response_stream::Channel, entry_id::String; modified_at=nothing, next_token=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_request_fulfillments(_api, entry_id; modified_at=modified_at, next_token=next_token, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_requests_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RequestsPaginatedList,
)

function _oacinternal_list_requests(_api::RequestsApi, schema_id::String; request_status=nothing, min_created_time=nothing, max_created_time=nothing, next_token=nothing, page_size=nothing, returning=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_requests", :maximum, page_size, 100, false)
    OpenAPI.validate_param("page_size", "list_requests", :minimum, page_size, 0, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_requests_RequestsApi, "/requests", ["basicApiKeyAuth", "oAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "schemaId", schema_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "requestStatus", request_status)  # type RequestStatus
    OpenAPI.Clients.set_param(_ctx.query, "minCreatedTime", min_created_time)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "maxCreatedTime", max_created_time)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "nextToken", next_token)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "returning", returning)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List requests

List requests

Params:
- schema_id::String (required)
- request_status::RequestStatus
- min_created_time::Int64
- max_created_time::Int64
- next_token::String
- page_size::Int64
- returning::String

Return: RequestsPaginatedList, OpenAPI.Clients.ApiResponse
"""
function list_requests(_api::RequestsApi, schema_id::String; request_status=nothing, min_created_time=nothing, max_created_time=nothing, next_token=nothing, page_size=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_requests(_api, schema_id; request_status=request_status, min_created_time=min_created_time, max_created_time=max_created_time, next_token=next_token, page_size=page_size, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_requests(_api::RequestsApi, response_stream::Channel, schema_id::String; request_status=nothing, min_created_time=nothing, max_created_time=nothing, next_token=nothing, page_size=nothing, returning=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_requests(_api, schema_id; request_status=request_status, min_created_time=min_created_time, max_created_time=max_created_time, next_token=next_token, page_size=page_size, returning=returning, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_request_RequestsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Request,
    Regex("^" * replace("400", "x"=>".") * "\$") => BadRequestError,
)

function _oacinternal_patch_request(_api::RequestsApi, request_id::String; request_update=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_request_RequestsApi, "/requests/{request_id}", ["basicApiKeyAuth", "oAuth", ], request_update)
    OpenAPI.Clients.set_param(_ctx.path, "request_id", request_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a request

Update a request

Params:
- request_id::String (required)
- request_update::RequestUpdate

Return: Request, OpenAPI.Clients.ApiResponse
"""
function patch_request(_api::RequestsApi, request_id::String; request_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_request(_api, request_id; request_update=request_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_request(_api::RequestsApi, response_stream::Channel, request_id::String; request_update=nothing, _mediaType=nothing)
    _ctx = _oacinternal_patch_request(_api, request_id; request_update=request_update, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export bulk_create_request_tasks
export bulk_get_requests
export bulk_update_request_tasks
export create_request
export execute_requests_sample_groups
export get_request
export get_request_fulfillment
export get_request_response
export list_request_fulfillments
export list_requests
export patch_request
